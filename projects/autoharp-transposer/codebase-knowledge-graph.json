{
  "generated": "2025-08-02T06:23:45.115Z",
  "project": "autoharp-transposer",
  "statistics": {
    "files": 27,
    "classes": 13,
    "functions": 59,
    "methods": 276,
    "eventHandlers": 42
  },
  "graph": {
    "files": {
      "codebase-mapper.js": {
        "path": "codebase-mapper.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\codebase-mapper.js",
        "classes": [
          {
            "name": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 11,
            "methods": [
              {
                "name": "constructor",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 12,
                "signature": "constructor(projectPath) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 33,
                "signature": "for (const file of jsFiles) {",
                "calls": []
              },
              {
                "name": "findJavaScriptFiles",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 47,
                "signature": "findJavaScriptFiles(dir) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 51,
                "signature": "for (const entry of entries) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 95,
                "signature": "if (classMatch) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 114,
                "signature": "if (methodMatch && currentClass) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 130,
                "signature": "if (functionMatch) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 144,
                "signature": "if (arrowFunctionMatch) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 159,
                "signature": "if (eventHandlerMatch) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 173,
                "signature": "if (importMatch) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 181,
                "signature": "if (callMatches) {",
                "calls": []
              },
              {
                "name": "buildRelationships",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 199,
                "signature": "buildRelationships() {",
                "calls": []
              },
              {
                "name": "generateReport",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 217,
                "signature": "generateReport() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 230,
                "signature": "if (this.knowledgeGraph.classes.size > 0) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 234,
                "signature": "if (classInfo.constructor) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 244,
                "signature": "if (this.knowledgeGraph.functions.size > 0) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 253,
                "signature": "if (this.knowledgeGraph.eventHandlers.size > 0) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 263,
                "signature": "if (moduleInfo.dependencies.length > 0) {",
                "calls": []
              },
              {
                "name": "exportKnowledgeGraph",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 272,
                "signature": "exportKnowledgeGraph() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "CodebaseMapper",
                "file": "codebase-mapper.js",
                "line": 307,
                "signature": "if (require.main === module) {",
                "calls": []
              }
            ],
            "constructor": {
              "line": 108,
              "signature": "if (currentClass && trimmedLine.includes('constructor(')) {"
            }
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "constructor",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 12,
            "signature": "constructor(projectPath) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 33,
            "signature": "for (const file of jsFiles) {",
            "calls": []
          },
          {
            "name": "findJavaScriptFiles",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 47,
            "signature": "findJavaScriptFiles(dir) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 51,
            "signature": "for (const entry of entries) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 95,
            "signature": "if (classMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 114,
            "signature": "if (methodMatch && currentClass) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 130,
            "signature": "if (functionMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 144,
            "signature": "if (arrowFunctionMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 159,
            "signature": "if (eventHandlerMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 173,
            "signature": "if (importMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 181,
            "signature": "if (callMatches) {",
            "calls": []
          },
          {
            "name": "buildRelationships",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 199,
            "signature": "buildRelationships() {",
            "calls": []
          },
          {
            "name": "generateReport",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 217,
            "signature": "generateReport() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 230,
            "signature": "if (this.knowledgeGraph.classes.size > 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 234,
            "signature": "if (classInfo.constructor) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 244,
            "signature": "if (this.knowledgeGraph.functions.size > 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 253,
            "signature": "if (this.knowledgeGraph.eventHandlers.size > 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 263,
            "signature": "if (moduleInfo.dependencies.length > 0) {",
            "calls": []
          },
          {
            "name": "exportKnowledgeGraph",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 272,
            "signature": "exportKnowledgeGraph() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 307,
            "signature": "if (require.main === module) {",
            "calls": []
          }
        ],
        "eventHandlers": [],
        "imports": [
          "fs",
          "path"
        ],
        "exports": [],
        "dependencies": [
          "fs",
          "path"
        ],
        "lineCount": 314
      },
      "detect-duplicates.js": {
        "path": "detect-duplicates.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\detect-duplicates.js",
        "classes": [
          {
            "name": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 11,
            "methods": [
              {
                "name": "constructor",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 12,
                "signature": "constructor(projectPath) {",
                "calls": []
              },
              {
                "name": "scanProject",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 24,
                "signature": "scanProject() {",
                "calls": []
              },
              {
                "name": "findJavaScriptFiles",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 50,
                "signature": "findJavaScriptFiles(dir) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 56,
                "signature": "for (const entry of entries) {",
                "calls": []
              },
              {
                "name": "scanFile",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 75,
                "signature": "scanFile(filePath) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 118,
                "signature": "if (match) {",
                "calls": []
              },
              {
                "name": "analyzeResults",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 151,
                "signature": "analyzeResults() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 156,
                "signature": "if (definitions.length > 1) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 168,
                "signature": "if (fileDefs.length > 1) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 178,
                "signature": "if (fileGroups.size > 1) {",
                "calls": []
              },
              {
                "name": "findSimilarMethodNames",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 191,
                "signature": "findSimilarMethodNames() {",
                "calls": []
              },
              {
                "name": "for",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 194,
                "signature": "for (let i = 0; i < methodNames.length; i++) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 195,
                "signature": "for (let j = i + 1; j < methodNames.length; j++) {",
                "calls": []
              },
              {
                "name": "areMethodNamesSimilar",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 211,
                "signature": "areMethodNamesSimilar(name1, name2) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 228,
                "signature": "for (const prefix of commonPrefixes) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 231,
                "signature": "if (base1 === base2 && base1 !== lower1 && base2 !== lower2) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 236,
                "signature": "for (const suffix of commonSuffixes) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 239,
                "signature": "if (base1 === base2 && base1 !== lower1 && base2 !== lower2) {",
                "calls": []
              },
              {
                "name": "generateReport",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 247,
                "signature": "generateReport() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 265,
                "signature": "if (this.results.criticalDuplicates.length > 0) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 278,
                "signature": "if (this.results.crossFileDuplicates.length > 0) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 291,
                "signature": "if (this.results.similarNames.length > 0) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 299,
                "signature": "if (this.results.similarNames.length > 10) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 306,
                "signature": "if (this.results.criticalDuplicates.length === 0) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 308,
                "signature": "if (this.results.crossFileDuplicates.length === 0) {",
                "calls": []
              },
              {
                "name": "outputReport",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 324,
                "signature": "outputReport(reportLines) {",
                "calls": []
              },
              {
                "name": "getResults",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 344,
                "signature": "getResults() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "RobustDuplicateDetector",
                "file": "detect-duplicates.js",
                "line": 350,
                "signature": "if (require.main === module) {",
                "calls": []
              }
            ],
            "constructor": {
              "line": 12,
              "signature": "constructor(projectPath) {"
            }
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "constructor",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 12,
            "signature": "constructor(projectPath) {",
            "calls": []
          },
          {
            "name": "scanProject",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 24,
            "signature": "scanProject() {",
            "calls": []
          },
          {
            "name": "findJavaScriptFiles",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 50,
            "signature": "findJavaScriptFiles(dir) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 56,
            "signature": "for (const entry of entries) {",
            "calls": []
          },
          {
            "name": "scanFile",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 75,
            "signature": "scanFile(filePath) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 118,
            "signature": "if (match) {",
            "calls": []
          },
          {
            "name": "analyzeResults",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 151,
            "signature": "analyzeResults() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 156,
            "signature": "if (definitions.length > 1) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 168,
            "signature": "if (fileDefs.length > 1) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 178,
            "signature": "if (fileGroups.size > 1) {",
            "calls": []
          },
          {
            "name": "findSimilarMethodNames",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 191,
            "signature": "findSimilarMethodNames() {",
            "calls": []
          },
          {
            "name": "for",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 194,
            "signature": "for (let i = 0; i < methodNames.length; i++) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 195,
            "signature": "for (let j = i + 1; j < methodNames.length; j++) {",
            "calls": []
          },
          {
            "name": "areMethodNamesSimilar",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 211,
            "signature": "areMethodNamesSimilar(name1, name2) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 228,
            "signature": "for (const prefix of commonPrefixes) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 231,
            "signature": "if (base1 === base2 && base1 !== lower1 && base2 !== lower2) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 236,
            "signature": "for (const suffix of commonSuffixes) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 239,
            "signature": "if (base1 === base2 && base1 !== lower1 && base2 !== lower2) {",
            "calls": []
          },
          {
            "name": "generateReport",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 247,
            "signature": "generateReport() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 265,
            "signature": "if (this.results.criticalDuplicates.length > 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 278,
            "signature": "if (this.results.crossFileDuplicates.length > 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 291,
            "signature": "if (this.results.similarNames.length > 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 299,
            "signature": "if (this.results.similarNames.length > 10) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 306,
            "signature": "if (this.results.criticalDuplicates.length === 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 308,
            "signature": "if (this.results.crossFileDuplicates.length === 0) {",
            "calls": []
          },
          {
            "name": "outputReport",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 324,
            "signature": "outputReport(reportLines) {",
            "calls": []
          },
          {
            "name": "getResults",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 344,
            "signature": "getResults() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 350,
            "signature": "if (require.main === module) {",
            "calls": []
          }
        ],
        "eventHandlers": [],
        "imports": [
          "fs",
          "path"
        ],
        "exports": [],
        "dependencies": [
          "fs",
          "path"
        ],
        "lineCount": 357
      },
      "improved-codebase-mapper.js": {
        "path": "improved-codebase-mapper.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\improved-codebase-mapper.js",
        "classes": [
          {
            "name": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 11,
            "methods": [
              {
                "name": "constructor",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 12,
                "signature": "constructor(projectPath) {",
                "calls": []
              },
              {
                "name": "generateKnowledgeGraph",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 32,
                "signature": "generateKnowledgeGraph() {",
                "calls": []
              },
              {
                "name": "findJavaScriptFiles",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 60,
                "signature": "findJavaScriptFiles(dir) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 66,
                "signature": "for (const entry of entries) {",
                "calls": []
              },
              {
                "name": "analyzeFile",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 84,
                "signature": "analyzeFile(filePath) {",
                "calls": []
              },
              {
                "name": "extractClasses",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 104,
                "signature": "extractClasses(lines, fileInfo) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 113,
                "signature": "if (classMatch) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 126,
                "signature": "if (currentClass) {",
                "calls": []
              },
              {
                "name": "extractFunctions",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 146,
                "signature": "extractFunctions(lines, fileInfo) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 153,
                "signature": "if (funcMatch) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 168,
                "signature": "if (arrowMatch) {",
                "calls": []
              },
              {
                "name": "buildMethodIndex",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 183,
                "signature": "buildMethodIndex() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 189,
                "signature": "if (!this.results.methodIndex[methodName]) {",
                "calls": []
              },
              {
                "name": "findDuplicates",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 202,
                "signature": "findDuplicates() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 204,
                "signature": "if (locations.length > 1) {",
                "calls": []
              },
              {
                "name": "updateMetadata",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 213,
                "signature": "updateMetadata() {",
                "calls": []
              },
              {
                "name": "saveResults",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 222,
                "signature": "saveResults() {",
                "calls": []
              },
              {
                "name": "generateSummary",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 232,
                "signature": "generateSummary() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 243,
                "signature": "if (meta.totalClasses > 0) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 250,
                "signature": "if (meta.duplicatesFound > 0) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ImprovedCodebaseMapper",
                "file": "improved-codebase-mapper.js",
                "line": 265,
                "signature": "if (require.main === module) {",
                "calls": []
              }
            ],
            "constructor": {
              "line": 12,
              "signature": "constructor(projectPath) {"
            }
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "constructor",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 12,
            "signature": "constructor(projectPath) {",
            "calls": []
          },
          {
            "name": "generateKnowledgeGraph",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 32,
            "signature": "generateKnowledgeGraph() {",
            "calls": []
          },
          {
            "name": "findJavaScriptFiles",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 60,
            "signature": "findJavaScriptFiles(dir) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 66,
            "signature": "for (const entry of entries) {",
            "calls": []
          },
          {
            "name": "analyzeFile",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 84,
            "signature": "analyzeFile(filePath) {",
            "calls": []
          },
          {
            "name": "extractClasses",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 104,
            "signature": "extractClasses(lines, fileInfo) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 113,
            "signature": "if (classMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 126,
            "signature": "if (currentClass) {",
            "calls": []
          },
          {
            "name": "extractFunctions",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 146,
            "signature": "extractFunctions(lines, fileInfo) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 153,
            "signature": "if (funcMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 168,
            "signature": "if (arrowMatch) {",
            "calls": []
          },
          {
            "name": "buildMethodIndex",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 183,
            "signature": "buildMethodIndex() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 189,
            "signature": "if (!this.results.methodIndex[methodName]) {",
            "calls": []
          },
          {
            "name": "findDuplicates",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 202,
            "signature": "findDuplicates() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 204,
            "signature": "if (locations.length > 1) {",
            "calls": []
          },
          {
            "name": "updateMetadata",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 213,
            "signature": "updateMetadata() {",
            "calls": []
          },
          {
            "name": "saveResults",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 222,
            "signature": "saveResults() {",
            "calls": []
          },
          {
            "name": "generateSummary",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 232,
            "signature": "generateSummary() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 243,
            "signature": "if (meta.totalClasses > 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 250,
            "signature": "if (meta.duplicatesFound > 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 265,
            "signature": "if (require.main === module) {",
            "calls": []
          }
        ],
        "eventHandlers": [],
        "imports": [
          "fs",
          "path"
        ],
        "exports": [],
        "dependencies": [
          "fs",
          "path"
        ],
        "lineCount": 272
      },
      "modules\\appIntegration.js": {
        "path": "modules\\appIntegration.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\modules\\appIntegration.js",
        "classes": [
          {
            "name": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 14,
            "methods": [
              {
                "name": "constructor",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 15,
                "signature": "constructor() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 64,
                "signature": "if (window.CHORD_LISTS && integrationBridge.legacyDataReady) {",
                "calls": []
              },
              {
                "name": "connectModules",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 113,
                "signature": "connectModules() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 125,
                "signature": "if (data.source === 'text') {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 134,
                "signature": "if (data.current) {",
                "calls": []
              },
              {
                "name": "loadSavedState",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 142,
                "signature": "loadSavedState() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 155,
                "signature": "if (session && session.selectedChords) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 160,
                "signature": "if (preferences.audioEnabled) {",
                "calls": []
              },
              {
                "name": "initializeUI",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 170,
                "signature": "initializeUI() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 172,
                "signature": "if (window.initializeDOMReferences && typeof window.initializeDOMReferences === 'function') {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 181,
                "signature": "if (window.chordGroup) {",
                "calls": []
              },
              {
                "name": "updateAutoharpTypeUI",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 193,
                "signature": "updateAutoharpTypeUI() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 196,
                "signature": "if (radio) {",
                "calls": []
              },
              {
                "name": "updateAudioToggleUI",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 204,
                "signature": "updateAudioToggleUI() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 207,
                "signature": "if (toggle) {",
                "calls": []
              },
              {
                "name": "updateSelectedChordsUI",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 213,
                "signature": "updateSelectedChordsUI() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 215,
                "signature": "if (window.initializeDOMReferences && typeof window.initializeDOMReferences === 'function') {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 220,
                "signature": "if (window.chordGroup) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 226,
                "signature": "if (window.chordGroup) {",
                "calls": []
              },
              {
                "name": "setupAutoSave",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 233,
                "signature": "setupAutoSave() {",
                "calls": []
              },
              {
                "name": "saveCurrentSession",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 245,
                "signature": "saveCurrentSession() {",
                "calls": []
              },
              {
                "name": "addChord",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 267,
                "signature": "addChord(chord, source = 'api') {",
                "calls": []
              },
              {
                "name": "removeChord",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 276,
                "signature": "removeChord(chord) {",
                "calls": []
              },
              {
                "name": "clearAllChords",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 284,
                "signature": "clearAllChords() {",
                "calls": []
              },
              {
                "name": "getSelectedChords",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 292,
                "signature": "getSelectedChords() {",
                "calls": []
              },
              {
                "name": "setAutoharpType",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 296,
                "signature": "setAutoharpType(type) {",
                "calls": []
              },
              {
                "name": "toggleAudio",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 300,
                "signature": "toggleAudio() {",
                "calls": []
              },
              {
                "name": "getState",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 304,
                "signature": "getState() {",
                "calls": []
              },
              {
                "name": "on",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 309,
                "signature": "on(event, callback) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 310,
                "signature": "if (!this.eventListeners) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 313,
                "signature": "if (!this.eventListeners[event]) {",
                "calls": []
              },
              {
                "name": "emit",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 319,
                "signature": "emit(event, data) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 320,
                "signature": "if (this.eventListeners && this.eventListeners[event]) {",
                "calls": []
              },
              {
                "name": "exportData",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 332,
                "signature": "exportData() {",
                "calls": []
              },
              {
                "name": "importData",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 340,
                "signature": "importData(data) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 341,
                "signature": "if (data.state) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 344,
                "signature": "if (data.storage) {",
                "calls": []
              },
              {
                "name": "getDebugInfo",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 349,
                "signature": "getDebugInfo() {",
                "calls": []
              },
              {
                "name": "destroy",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 361,
                "signature": "destroy() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 367,
                "signature": "if (this.modules.audioManager) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 372,
                "signature": "if (this.autoSaveInterval) {",
                "calls": []
              },
              {
                "name": "handleInitializationError",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 382,
                "signature": "handleInitializationError(error) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 404,
                "signature": "if (appInstance) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTransposerApp",
                "file": "modules\\appIntegration.js",
                "line": 418,
                "signature": "if (document.readyState === 'loading') {",
                "calls": []
              }
            ],
            "constructor": {
              "line": 15,
              "signature": "constructor() {"
            }
          }
        ],
        "functions": [
          {
            "name": "initializeApp",
            "file": "modules\\appIntegration.js",
            "line": 403,
            "signature": "function initializeApp() {",
            "calls": []
          }
        ],
        "methods": [
          {
            "name": "constructor",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 15,
            "signature": "constructor() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 64,
            "signature": "if (window.CHORD_LISTS && integrationBridge.legacyDataReady) {",
            "calls": []
          },
          {
            "name": "connectModules",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 113,
            "signature": "connectModules() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 125,
            "signature": "if (data.source === 'text') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 134,
            "signature": "if (data.current) {",
            "calls": []
          },
          {
            "name": "loadSavedState",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 142,
            "signature": "loadSavedState() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 155,
            "signature": "if (session && session.selectedChords) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 160,
            "signature": "if (preferences.audioEnabled) {",
            "calls": []
          },
          {
            "name": "initializeUI",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 170,
            "signature": "initializeUI() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 172,
            "signature": "if (window.initializeDOMReferences && typeof window.initializeDOMReferences === 'function') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 181,
            "signature": "if (window.chordGroup) {",
            "calls": []
          },
          {
            "name": "updateAutoharpTypeUI",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 193,
            "signature": "updateAutoharpTypeUI() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 196,
            "signature": "if (radio) {",
            "calls": []
          },
          {
            "name": "updateAudioToggleUI",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 204,
            "signature": "updateAudioToggleUI() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 207,
            "signature": "if (toggle) {",
            "calls": []
          },
          {
            "name": "updateSelectedChordsUI",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 213,
            "signature": "updateSelectedChordsUI() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 215,
            "signature": "if (window.initializeDOMReferences && typeof window.initializeDOMReferences === 'function') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 220,
            "signature": "if (window.chordGroup) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 226,
            "signature": "if (window.chordGroup) {",
            "calls": []
          },
          {
            "name": "setupAutoSave",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 233,
            "signature": "setupAutoSave() {",
            "calls": []
          },
          {
            "name": "saveCurrentSession",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 245,
            "signature": "saveCurrentSession() {",
            "calls": []
          },
          {
            "name": "addChord",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 267,
            "signature": "addChord(chord, source = 'api') {",
            "calls": []
          },
          {
            "name": "removeChord",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 276,
            "signature": "removeChord(chord) {",
            "calls": []
          },
          {
            "name": "clearAllChords",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 284,
            "signature": "clearAllChords() {",
            "calls": []
          },
          {
            "name": "getSelectedChords",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 292,
            "signature": "getSelectedChords() {",
            "calls": []
          },
          {
            "name": "setAutoharpType",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 296,
            "signature": "setAutoharpType(type) {",
            "calls": []
          },
          {
            "name": "toggleAudio",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 300,
            "signature": "toggleAudio() {",
            "calls": []
          },
          {
            "name": "getState",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 304,
            "signature": "getState() {",
            "calls": []
          },
          {
            "name": "on",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 309,
            "signature": "on(event, callback) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 310,
            "signature": "if (!this.eventListeners) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 313,
            "signature": "if (!this.eventListeners[event]) {",
            "calls": []
          },
          {
            "name": "emit",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 319,
            "signature": "emit(event, data) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 320,
            "signature": "if (this.eventListeners && this.eventListeners[event]) {",
            "calls": []
          },
          {
            "name": "exportData",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 332,
            "signature": "exportData() {",
            "calls": []
          },
          {
            "name": "importData",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 340,
            "signature": "importData(data) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 341,
            "signature": "if (data.state) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 344,
            "signature": "if (data.storage) {",
            "calls": []
          },
          {
            "name": "getDebugInfo",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 349,
            "signature": "getDebugInfo() {",
            "calls": []
          },
          {
            "name": "destroy",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 361,
            "signature": "destroy() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 367,
            "signature": "if (this.modules.audioManager) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 372,
            "signature": "if (this.autoSaveInterval) {",
            "calls": []
          },
          {
            "name": "handleInitializationError",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 382,
            "signature": "handleInitializationError(error) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 404,
            "signature": "if (appInstance) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 418,
            "signature": "if (document.readyState === 'loading') {",
            "calls": []
          }
        ],
        "eventHandlers": [
          {
            "event": "beforeunload",
            "handler": "(",
            "file": "modules\\appIntegration.js",
            "line": 240,
            "signature": "window.addEventListener('beforeunload', () => {"
          },
          {
            "event": "DOMContentLoaded",
            "handler": "(",
            "file": "modules\\appIntegration.js",
            "line": 419,
            "signature": "document.addEventListener('DOMContentLoaded', () => {"
          }
        ],
        "imports": [
          "./chordAudio.js",
          "./chordParser.js",
          "./inputManager.js",
          "./stateManager.js",
          "./eventCoordinator.js",
          "./storageManager.js",
          "./integrationBridge.js"
        ],
        "exports": [],
        "dependencies": [
          "./chordAudio.js",
          "./chordParser.js",
          "./inputManager.js",
          "./stateManager.js",
          "./eventCoordinator.js",
          "./storageManager.js",
          "./integrationBridge.js"
        ],
        "lineCount": 429
      },
      "modules\\autoharpTypes.js": {
        "path": "modules\\autoharpTypes.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\modules\\autoharpTypes.js",
        "classes": [
          {
            "name": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 11,
            "methods": [
              {
                "name": "constructor",
                "class": "AutoharpTypes",
                "file": "modules\\autoharpTypes.js",
                "line": 12,
                "signature": "constructor() {",
                "calls": []
              },
              {
                "name": "getAvailableTypes",
                "class": "AutoharpTypes",
                "file": "modules\\autoharpTypes.js",
                "line": 83,
                "signature": "getAvailableTypes() {",
                "calls": []
              },
              {
                "name": "getType",
                "class": "AutoharpTypes",
                "file": "modules\\autoharpTypes.js",
                "line": 92,
                "signature": "getType(type) {",
                "calls": []
              },
              {
                "name": "getAllChords",
                "class": "AutoharpTypes",
                "file": "modules\\autoharpTypes.js",
                "line": 101,
                "signature": "getAllChords(type) {",
                "calls": []
              },
              {
                "name": "getChordsByCategory",
                "class": "AutoharpTypes",
                "file": "modules\\autoharpTypes.js",
                "line": 118,
                "signature": "getChordsByCategory(type, category) {",
                "calls": []
              },
              {
                "name": "getIntervals",
                "class": "AutoharpTypes",
                "file": "modules\\autoharpTypes.js",
                "line": 131,
                "signature": "getIntervals(type, category) {",
                "calls": []
              },
              {
                "name": "isChordAvailable",
                "class": "AutoharpTypes",
                "file": "modules\\autoharpTypes.js",
                "line": 144,
                "signature": "isChordAvailable(chord, type) {",
                "calls": []
              },
              {
                "name": "getTypeInfo",
                "class": "AutoharpTypes",
                "file": "modules\\autoharpTypes.js",
                "line": 156,
                "signature": "getTypeInfo(type) {",
                "calls": []
              },
              {
                "name": "getCompatibilityMatrix",
                "class": "AutoharpTypes",
                "file": "modules\\autoharpTypes.js",
                "line": 172,
                "signature": "getCompatibilityMatrix(chords) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "AutoharpTypes",
                "file": "modules\\autoharpTypes.js",
                "line": 176,
                "signature": "for (const chord of chords) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "AutoharpTypes",
                "file": "modules\\autoharpTypes.js",
                "line": 178,
                "signature": "for (const type of types) {",
                "calls": []
              },
              {
                "name": "findBestAutoharpType",
                "class": "AutoharpTypes",
                "file": "modules\\autoharpTypes.js",
                "line": 191,
                "signature": "findBestAutoharpType(chords) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "AutoharpTypes",
                "file": "modules\\autoharpTypes.js",
                "line": 201,
                "signature": "for (const type of types) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "AutoharpTypes",
                "file": "modules\\autoharpTypes.js",
                "line": 205,
                "signature": "for (const chord of chords) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "AutoharpTypes",
                "file": "modules\\autoharpTypes.js",
                "line": 215,
                "signature": "if (coverage > bestMatch.coverage) {",
                "calls": []
              }
            ],
            "constructor": {
              "line": 12,
              "signature": "constructor() {"
            }
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "constructor",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 12,
            "signature": "constructor() {",
            "calls": []
          },
          {
            "name": "getAvailableTypes",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 83,
            "signature": "getAvailableTypes() {",
            "calls": []
          },
          {
            "name": "getType",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 92,
            "signature": "getType(type) {",
            "calls": []
          },
          {
            "name": "getAllChords",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 101,
            "signature": "getAllChords(type) {",
            "calls": []
          },
          {
            "name": "getChordsByCategory",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 118,
            "signature": "getChordsByCategory(type, category) {",
            "calls": []
          },
          {
            "name": "getIntervals",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 131,
            "signature": "getIntervals(type, category) {",
            "calls": []
          },
          {
            "name": "isChordAvailable",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 144,
            "signature": "isChordAvailable(chord, type) {",
            "calls": []
          },
          {
            "name": "getTypeInfo",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 156,
            "signature": "getTypeInfo(type) {",
            "calls": []
          },
          {
            "name": "getCompatibilityMatrix",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 172,
            "signature": "getCompatibilityMatrix(chords) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 176,
            "signature": "for (const chord of chords) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 178,
            "signature": "for (const type of types) {",
            "calls": []
          },
          {
            "name": "findBestAutoharpType",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 191,
            "signature": "findBestAutoharpType(chords) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 201,
            "signature": "for (const type of types) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 205,
            "signature": "for (const chord of chords) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 215,
            "signature": "if (coverage > bestMatch.coverage) {",
            "calls": []
          }
        ],
        "eventHandlers": [],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 231
      },
      "modules\\chordAudio.js": {
        "path": "modules\\chordAudio.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\modules\\chordAudio.js",
        "classes": [
          {
            "name": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 6,
            "methods": [
              {
                "name": "constructor",
                "class": "ChordAudioManager",
                "file": "modules\\chordAudio.js",
                "line": 7,
                "signature": "constructor() {",
                "calls": []
              },
              {
                "name": "initializeAudioContext",
                "class": "ChordAudioManager",
                "file": "modules\\chordAudio.js",
                "line": 15,
                "signature": "initializeAudioContext() {",
                "calls": []
              },
              {
                "name": "toggleSound",
                "class": "ChordAudioManager",
                "file": "modules\\chordAudio.js",
                "line": 27,
                "signature": "toggleSound() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordAudioManager",
                "file": "modules\\chordAudio.js",
                "line": 30,
                "signature": "if (soundToggle) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordAudioManager",
                "file": "modules\\chordAudio.js",
                "line": 36,
                "signature": "if (this.soundEnabled && this.audioContext && this.audioContext.state === 'suspended') {",
                "calls": []
              },
              {
                "name": "playChord",
                "class": "ChordAudioManager",
                "file": "modules\\chordAudio.js",
                "line": 43,
                "signature": "playChord(chordName) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordAudioManager",
                "file": "modules\\chordAudio.js",
                "line": 44,
                "signature": "if (!this.soundEnabled || !this.audioContext || !chordName) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordAudioManager",
                "file": "modules\\chordAudio.js",
                "line": 80,
                "signature": "if (index > -1) {",
                "calls": []
              },
              {
                "name": "stopAllSounds",
                "class": "ChordAudioManager",
                "file": "modules\\chordAudio.js",
                "line": 90,
                "signature": "stopAllSounds() {",
                "calls": []
              },
              {
                "name": "getChordFrequencies",
                "class": "ChordAudioManager",
                "file": "modules\\chordAudio.js",
                "line": 101,
                "signature": "getChordFrequencies(chordName) {",
                "calls": []
              },
              {
                "name": "switch",
                "class": "ChordAudioManager",
                "file": "modules\\chordAudio.js",
                "line": 120,
                "signature": "switch (parsed.type) {",
                "calls": []
              },
              {
                "name": "parseChordName",
                "class": "ChordAudioManager",
                "file": "modules\\chordAudio.js",
                "line": 140,
                "signature": "parseChordName(chordName) {",
                "calls": []
              },
              {
                "name": "destroy",
                "class": "ChordAudioManager",
                "file": "modules\\chordAudio.js",
                "line": 160,
                "signature": "destroy() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordAudioManager",
                "file": "modules\\chordAudio.js",
                "line": 162,
                "signature": "if (this.audioContext) {",
                "calls": []
              }
            ],
            "constructor": {
              "line": 7,
              "signature": "constructor() {"
            }
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "constructor",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 7,
            "signature": "constructor() {",
            "calls": []
          },
          {
            "name": "initializeAudioContext",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 15,
            "signature": "initializeAudioContext() {",
            "calls": []
          },
          {
            "name": "toggleSound",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 27,
            "signature": "toggleSound() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 30,
            "signature": "if (soundToggle) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 36,
            "signature": "if (this.soundEnabled && this.audioContext && this.audioContext.state === 'suspended') {",
            "calls": []
          },
          {
            "name": "playChord",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 43,
            "signature": "playChord(chordName) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 44,
            "signature": "if (!this.soundEnabled || !this.audioContext || !chordName) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 80,
            "signature": "if (index > -1) {",
            "calls": []
          },
          {
            "name": "stopAllSounds",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 90,
            "signature": "stopAllSounds() {",
            "calls": []
          },
          {
            "name": "getChordFrequencies",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 101,
            "signature": "getChordFrequencies(chordName) {",
            "calls": []
          },
          {
            "name": "switch",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 120,
            "signature": "switch (parsed.type) {",
            "calls": []
          },
          {
            "name": "parseChordName",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 140,
            "signature": "parseChordName(chordName) {",
            "calls": []
          },
          {
            "name": "destroy",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 160,
            "signature": "destroy() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 162,
            "signature": "if (this.audioContext) {",
            "calls": []
          }
        ],
        "eventHandlers": [],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 169
      },
      "modules\\chordParser.js": {
        "path": "modules\\chordParser.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\modules\\chordParser.js",
        "classes": [
          {
            "name": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 10,
            "methods": [
              {
                "name": "constructor",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 11,
                "signature": "constructor(availableChords = []) {",
                "calls": []
              },
              {
                "name": "generateAllValidChords",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 31,
                "signature": "generateAllValidChords() {",
                "calls": []
              },
              {
                "name": "for",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 62,
                "signature": "for (const root of roots) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 63,
                "signature": "for (const type of chordTypes) {",
                "calls": []
              },
              {
                "name": "updateAvailableChords",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 71,
                "signature": "updateAvailableChords(chords) {",
                "calls": []
              },
              {
                "name": "parseChord",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 82,
                "signature": "parseChord(input) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 92,
                "signature": "if (exactValidMatch) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 97,
                "signature": "if (availableMatch) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 106,
                "signature": "if (normalizedChord) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 111,
                "signature": "if (validNormalizedMatch) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 116,
                "signature": "if (availableNormalizedMatch) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 124,
                "signature": "if (validFuzzyMatches.length > 0) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 130,
                "signature": "if (availableFuzzyMatch) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 139,
                "signature": "if (originalFuzzyMatches.length > 0) {",
                "calls": []
              },
              {
                "name": "normalizeChordInput",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 151,
                "signature": "normalizeChordInput(input) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 243,
                "signature": "if (remainder) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 270,
                "signature": "if (score > bestScore && score > 0.6) { // Higher threshold for chord types",
                "calls": []
              },
              {
                "name": "getFuzzyMatches",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 286,
                "signature": "getFuzzyMatches(input, maxResults = 5, chordList = null) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 297,
                "signature": "if (score > 0.3) { // Minimum similarity threshold",
                "calls": []
              },
              {
                "name": "getSuggestions",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 308,
                "signature": "getSuggestions(input, maxSuggestions = 5) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 309,
                "signature": "if (!input || input.length < 1) {",
                "calls": []
              },
              {
                "name": "getRootNotePermutations",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 320,
                "signature": "getRootNotePermutations(input, maxSuggestions = 5) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 323,
                "signature": "if (!rootNote) {",
                "calls": []
              },
              {
                "name": "extractRootNote",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 338,
                "signature": "extractRootNote(input) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 356,
                "signature": "if (enharmonicMap[rootNote]) {",
                "calls": []
              },
              {
                "name": "generateChordVariations",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 363,
                "signature": "generateChordVariations(rootNote) {",
                "calls": []
              },
              {
                "name": "filterAndPrioritizeVariations",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 391,
                "signature": "filterAndPrioritizeVariations(variations, input, maxSuggestions) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 400,
                "signature": "if (variationLower === inputLower) {",
                "calls": []
              },
              {
                "name": "validateChord",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 426,
                "signature": "validateChord(chord) {",
                "calls": []
              },
              {
                "name": "calculateSimilarity",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 433,
                "signature": "calculateSimilarity(input, target) {",
                "calls": []
              },
              {
                "name": "levenshteinDistance",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 444,
                "signature": "levenshteinDistance(str1, str2) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 450,
                "signature": "for (let i = 0; i <= len2; i++) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 453,
                "signature": "for (let j = 0; j <= len1; j++) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 458,
                "signature": "for (let i = 1; i <= len2; i++) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 459,
                "signature": "for (let j = 1; j <= len1; j++) {",
                "calls": []
              },
              {
                "name": "soundexMatch",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 475,
                "signature": "soundexMatch(str1, str2) {",
                "calls": []
              },
              {
                "name": "normalizeChordName",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 492,
                "signature": "normalizeChordName(chordName) {",
                "calls": []
              },
              {
                "name": "addToHistory",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 512,
                "signature": "addToHistory(chord) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 517,
                "signature": "if (index > -1) {",
                "calls": []
              },
              {
                "name": "loadChordHistory",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 531,
                "signature": "loadChordHistory() {",
                "calls": []
              },
              {
                "name": "saveChordHistory",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 541,
                "signature": "saveChordHistory() {",
                "calls": []
              },
              {
                "name": "parseAdvancedChord",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 550,
                "signature": "parseAdvancedChord(input) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 563,
                "signature": "for (const variation of variations) {",
                "calls": []
              },
              {
                "name": "getContextualSuggestions",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 572,
                "signature": "getContextualSuggestions(input, recentChords = []) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 576,
                "signature": "if (recentChords.length > 0) {",
                "calls": []
              },
              {
                "name": "getHarmonicallyRelatedChords",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 589,
                "signature": "getHarmonicallyRelatedChords(chord) {",
                "calls": []
              },
              {
                "name": "switch",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 656,
                "signature": "switch (chordType) {",
                "calls": []
              },
              {
                "name": "setAutoharpType",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 685,
                "signature": "setAutoharpType(autoharpType) {",
                "calls": []
              },
              {
                "name": "getCurrentAutoharpType",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 697,
                "signature": "getCurrentAutoharpType() {",
                "calls": []
              },
              {
                "name": "transposeProgression",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 709,
                "signature": "transposeProgression(chords, fromKey, toKey, autoharpType = null) {",
                "calls": []
              },
              {
                "name": "validateChordForAutoharp",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 720,
                "signature": "validateChordForAutoharp(chord, autoharpType = null) {",
                "calls": []
              },
              {
                "name": "getCompatibleChords",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 730,
                "signature": "getCompatibleChords(autoharpType = null) {",
                "calls": []
              },
              {
                "name": "getAutoharpTypeInfo",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 740,
                "signature": "getAutoharpTypeInfo(autoharpType = null) {",
                "calls": []
              },
              {
                "name": "findBestAutoharpType",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 750,
                "signature": "findBestAutoharpType(chords) {",
                "calls": []
              },
              {
                "name": "findOptimalKeys",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 760,
                "signature": "findOptimalKeys(chords, autoharpType = null) {",
                "calls": []
              },
              {
                "name": "simulateCapo",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 772,
                "signature": "simulateCapo(chords, capoFret, autoharpType = null) {",
                "calls": []
              },
              {
                "name": "getCompatibilityMatrix",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 782,
                "signature": "getCompatibilityMatrix(chords) {",
                "calls": []
              },
              {
                "name": "analyzeProgression",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 791,
                "signature": "analyzeProgression(chords) {",
                "calls": []
              },
              {
                "name": "parseChordWithAutoharpInfo",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 801,
                "signature": "parseChordWithAutoharpInfo(input, autoharpType = null) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordParser",
                "file": "modules\\chordParser.js",
                "line": 805,
                "signature": "if (!parsedChord) {",
                "calls": []
              }
            ],
            "constructor": {
              "line": 11,
              "signature": "constructor(availableChords = []) {"
            }
          }
        ],
        "functions": [
          {
            "name": "normalize",
            "file": "modules\\chordParser.js",
            "line": 477,
            "signature": "const normalize = (str) => {",
            "type": "arrow/assigned",
            "calls": []
          }
        ],
        "methods": [
          {
            "name": "constructor",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 11,
            "signature": "constructor(availableChords = []) {",
            "calls": []
          },
          {
            "name": "generateAllValidChords",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 31,
            "signature": "generateAllValidChords() {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 62,
            "signature": "for (const root of roots) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 63,
            "signature": "for (const type of chordTypes) {",
            "calls": []
          },
          {
            "name": "updateAvailableChords",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 71,
            "signature": "updateAvailableChords(chords) {",
            "calls": []
          },
          {
            "name": "parseChord",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 82,
            "signature": "parseChord(input) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 92,
            "signature": "if (exactValidMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 97,
            "signature": "if (availableMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 106,
            "signature": "if (normalizedChord) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 111,
            "signature": "if (validNormalizedMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 116,
            "signature": "if (availableNormalizedMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 124,
            "signature": "if (validFuzzyMatches.length > 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 130,
            "signature": "if (availableFuzzyMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 139,
            "signature": "if (originalFuzzyMatches.length > 0) {",
            "calls": []
          },
          {
            "name": "normalizeChordInput",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 151,
            "signature": "normalizeChordInput(input) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 243,
            "signature": "if (remainder) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 270,
            "signature": "if (score > bestScore && score > 0.6) { // Higher threshold for chord types",
            "calls": []
          },
          {
            "name": "getFuzzyMatches",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 286,
            "signature": "getFuzzyMatches(input, maxResults = 5, chordList = null) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 297,
            "signature": "if (score > 0.3) { // Minimum similarity threshold",
            "calls": []
          },
          {
            "name": "getSuggestions",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 308,
            "signature": "getSuggestions(input, maxSuggestions = 5) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 309,
            "signature": "if (!input || input.length < 1) {",
            "calls": []
          },
          {
            "name": "getRootNotePermutations",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 320,
            "signature": "getRootNotePermutations(input, maxSuggestions = 5) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 323,
            "signature": "if (!rootNote) {",
            "calls": []
          },
          {
            "name": "extractRootNote",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 338,
            "signature": "extractRootNote(input) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 356,
            "signature": "if (enharmonicMap[rootNote]) {",
            "calls": []
          },
          {
            "name": "generateChordVariations",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 363,
            "signature": "generateChordVariations(rootNote) {",
            "calls": []
          },
          {
            "name": "filterAndPrioritizeVariations",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 391,
            "signature": "filterAndPrioritizeVariations(variations, input, maxSuggestions) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 400,
            "signature": "if (variationLower === inputLower) {",
            "calls": []
          },
          {
            "name": "validateChord",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 426,
            "signature": "validateChord(chord) {",
            "calls": []
          },
          {
            "name": "calculateSimilarity",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 433,
            "signature": "calculateSimilarity(input, target) {",
            "calls": []
          },
          {
            "name": "levenshteinDistance",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 444,
            "signature": "levenshteinDistance(str1, str2) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 450,
            "signature": "for (let i = 0; i <= len2; i++) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 453,
            "signature": "for (let j = 0; j <= len1; j++) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 458,
            "signature": "for (let i = 1; i <= len2; i++) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 459,
            "signature": "for (let j = 1; j <= len1; j++) {",
            "calls": []
          },
          {
            "name": "soundexMatch",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 475,
            "signature": "soundexMatch(str1, str2) {",
            "calls": []
          },
          {
            "name": "normalizeChordName",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 492,
            "signature": "normalizeChordName(chordName) {",
            "calls": []
          },
          {
            "name": "addToHistory",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 512,
            "signature": "addToHistory(chord) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 517,
            "signature": "if (index > -1) {",
            "calls": []
          },
          {
            "name": "loadChordHistory",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 531,
            "signature": "loadChordHistory() {",
            "calls": []
          },
          {
            "name": "saveChordHistory",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 541,
            "signature": "saveChordHistory() {",
            "calls": []
          },
          {
            "name": "parseAdvancedChord",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 550,
            "signature": "parseAdvancedChord(input) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 563,
            "signature": "for (const variation of variations) {",
            "calls": []
          },
          {
            "name": "getContextualSuggestions",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 572,
            "signature": "getContextualSuggestions(input, recentChords = []) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 576,
            "signature": "if (recentChords.length > 0) {",
            "calls": []
          },
          {
            "name": "getHarmonicallyRelatedChords",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 589,
            "signature": "getHarmonicallyRelatedChords(chord) {",
            "calls": []
          },
          {
            "name": "switch",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 656,
            "signature": "switch (chordType) {",
            "calls": []
          },
          {
            "name": "setAutoharpType",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 685,
            "signature": "setAutoharpType(autoharpType) {",
            "calls": []
          },
          {
            "name": "getCurrentAutoharpType",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 697,
            "signature": "getCurrentAutoharpType() {",
            "calls": []
          },
          {
            "name": "transposeProgression",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 709,
            "signature": "transposeProgression(chords, fromKey, toKey, autoharpType = null) {",
            "calls": []
          },
          {
            "name": "validateChordForAutoharp",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 720,
            "signature": "validateChordForAutoharp(chord, autoharpType = null) {",
            "calls": []
          },
          {
            "name": "getCompatibleChords",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 730,
            "signature": "getCompatibleChords(autoharpType = null) {",
            "calls": []
          },
          {
            "name": "getAutoharpTypeInfo",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 740,
            "signature": "getAutoharpTypeInfo(autoharpType = null) {",
            "calls": []
          },
          {
            "name": "findBestAutoharpType",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 750,
            "signature": "findBestAutoharpType(chords) {",
            "calls": []
          },
          {
            "name": "findOptimalKeys",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 760,
            "signature": "findOptimalKeys(chords, autoharpType = null) {",
            "calls": []
          },
          {
            "name": "simulateCapo",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 772,
            "signature": "simulateCapo(chords, capoFret, autoharpType = null) {",
            "calls": []
          },
          {
            "name": "getCompatibilityMatrix",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 782,
            "signature": "getCompatibilityMatrix(chords) {",
            "calls": []
          },
          {
            "name": "analyzeProgression",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 791,
            "signature": "analyzeProgression(chords) {",
            "calls": []
          },
          {
            "name": "parseChordWithAutoharpInfo",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 801,
            "signature": "parseChordWithAutoharpInfo(input, autoharpType = null) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 805,
            "signature": "if (!parsedChord) {",
            "calls": []
          }
        ],
        "eventHandlers": [],
        "imports": [
          "./autoharpTypes.js",
          "./chordTransposition.js"
        ],
        "exports": [],
        "dependencies": [
          "./autoharpTypes.js",
          "./chordTransposition.js"
        ],
        "lineCount": 831
      },
      "modules\\chordTransposition.js": {
        "path": "modules\\chordTransposition.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\modules\\chordTransposition.js",
        "classes": [
          {
            "name": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 12,
            "methods": [
              {
                "name": "constructor",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 13,
                "signature": "constructor() {",
                "calls": []
              },
              {
                "name": "transposeChord",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 38,
                "signature": "transposeChord(chord, semitones) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 53,
                "signature": "if (rootIndex === -1 && this.enharmonicMap[rootNote]) {",
                "calls": []
              },
              {
                "name": "calculateSemitoneInterval",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 74,
                "signature": "calculateSemitoneInterval(fromKey, toKey) {",
                "calls": []
              },
              {
                "name": "transposeProgression",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 95,
                "signature": "transposeProgression(chords, fromKey, toKey, autoharpType = '21-chord') {",
                "calls": []
              },
              {
                "name": "for",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 111,
                "signature": "for (const originalChord of chords) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 114,
                "signature": "if (transposedChord) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 127,
                "signature": "if (isAvailable) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 131,
                "signature": "if (alternatives.length > 0) {",
                "calls": []
              },
              {
                "name": "findAlternativeChords",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 151,
                "signature": "findAlternativeChords(targetChord, autoharpType) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 162,
                "signature": "for (const chord of availableChords) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 185,
                "signature": "if (this.enharmonicMap[rootNote]) {",
                "calls": []
              },
              {
                "name": "simulateCapo",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 203,
                "signature": "simulateCapo(chords, capoFret, autoharpType = '21-chord') {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 204,
                "signature": "if (capoFret < 1 || capoFret > 12) {",
                "calls": []
              },
              {
                "name": "for",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 218,
                "signature": "for (const chord of chords) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 230,
                "signature": "if (isPlayable) {",
                "calls": []
              },
              {
                "name": "findOptimalKeys",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 247,
                "signature": "findOptimalKeys(chords, autoharpType = '21-chord') {",
                "calls": []
              },
              {
                "name": "for",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 251,
                "signature": "for (let semitones = 0; semitones < 12; semitones++) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 267,
                "signature": "if (b.coverage !== a.coverage) {",
                "calls": []
              },
              {
                "name": "analyzeProgression",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 279,
                "signature": "analyzeProgression(chords) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "ChordTransposition",
                "file": "modules\\chordTransposition.js",
                "line": 311,
                "signature": "if (uniqueChordTypes.size > 3) {",
                "calls": []
              }
            ],
            "constructor": {
              "line": 13,
              "signature": "constructor() {"
            }
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "constructor",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 13,
            "signature": "constructor() {",
            "calls": []
          },
          {
            "name": "transposeChord",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 38,
            "signature": "transposeChord(chord, semitones) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 53,
            "signature": "if (rootIndex === -1 && this.enharmonicMap[rootNote]) {",
            "calls": []
          },
          {
            "name": "calculateSemitoneInterval",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 74,
            "signature": "calculateSemitoneInterval(fromKey, toKey) {",
            "calls": []
          },
          {
            "name": "transposeProgression",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 95,
            "signature": "transposeProgression(chords, fromKey, toKey, autoharpType = '21-chord') {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 111,
            "signature": "for (const originalChord of chords) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 114,
            "signature": "if (transposedChord) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 127,
            "signature": "if (isAvailable) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 131,
            "signature": "if (alternatives.length > 0) {",
            "calls": []
          },
          {
            "name": "findAlternativeChords",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 151,
            "signature": "findAlternativeChords(targetChord, autoharpType) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 162,
            "signature": "for (const chord of availableChords) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 185,
            "signature": "if (this.enharmonicMap[rootNote]) {",
            "calls": []
          },
          {
            "name": "simulateCapo",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 203,
            "signature": "simulateCapo(chords, capoFret, autoharpType = '21-chord') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 204,
            "signature": "if (capoFret < 1 || capoFret > 12) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 218,
            "signature": "for (const chord of chords) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 230,
            "signature": "if (isPlayable) {",
            "calls": []
          },
          {
            "name": "findOptimalKeys",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 247,
            "signature": "findOptimalKeys(chords, autoharpType = '21-chord') {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 251,
            "signature": "for (let semitones = 0; semitones < 12; semitones++) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 267,
            "signature": "if (b.coverage !== a.coverage) {",
            "calls": []
          },
          {
            "name": "analyzeProgression",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 279,
            "signature": "analyzeProgression(chords) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 311,
            "signature": "if (uniqueChordTypes.size > 3) {",
            "calls": []
          }
        ],
        "eventHandlers": [],
        "imports": [
          "./autoharpTypes.js"
        ],
        "exports": [],
        "dependencies": [
          "./autoharpTypes.js"
        ],
        "lineCount": 322
      },
      "modules\\eventCoordinator.js": {
        "path": "modules\\eventCoordinator.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\modules\\eventCoordinator.js",
        "classes": [
          {
            "name": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 6,
            "methods": [
              {
                "name": "constructor",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 7,
                "signature": "constructor(inputManager, stateManager, audioManager) {",
                "calls": []
              },
              {
                "name": "setupEventListeners",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 20,
                "signature": "setupEventListeners() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 22,
                "signature": "if (document.readyState === 'loading') {",
                "calls": []
              },
              {
                "name": "initializeEventListeners",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 29,
                "signature": "initializeEventListeners() {",
                "calls": []
              },
              {
                "name": "setupAutoharpTypeListeners",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 49,
                "signature": "setupAutoharpTypeListeners() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 53,
                "signature": "if (e.target.checked) {",
                "calls": []
              },
              {
                "name": "setupChordButtonListeners",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 60,
                "signature": "setupChordButtonListeners() {",
                "calls": []
              },
              {
                "name": "setupTextInputListeners",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 81,
                "signature": "setupTextInputListeners() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 85,
                "signature": "if (textInput) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 89,
                "signature": "if (this.justSubmitted) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 98,
                "signature": "if (e.key === 'Enter') {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 121,
                "signature": "if (suggestionsContainer) {",
                "calls": []
              },
              {
                "name": "setupAudioControlListeners",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 130,
                "signature": "setupAudioControlListeners() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 133,
                "signature": "if (soundToggle) {",
                "calls": []
              },
              {
                "name": "setupUtilityButtonListeners",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 140,
                "signature": "setupUtilityButtonListeners() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 143,
                "signature": "if (addChordBtn) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 151,
                "signature": "if (clearAllBtn) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 159,
                "signature": "if (playAllBtn) {",
                "calls": []
              },
              {
                "name": "setupKeyboardShortcuts",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 166,
                "signature": "setupKeyboardShortcuts() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 169,
                "signature": "if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {",
                "calls": []
              },
              {
                "name": "switch",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 173,
                "signature": "switch (e.key) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 175,
                "signature": "if (e.ctrlKey || e.metaKey) {",
                "calls": []
              },
              {
                "name": "setupStateListeners",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 203,
                "signature": "setupStateListeners() {",
                "calls": []
              },
              {
                "name": "handleAutoharpTypeChange",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 233,
                "signature": "handleAutoharpTypeChange(type) {",
                "calls": []
              },
              {
                "name": "handleChordNameSelection",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 238,
                "signature": "handleChordNameSelection(chordName, button) {",
                "calls": []
              },
              {
                "name": "handleChordTypeSelection",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 248,
                "signature": "handleChordTypeSelection(chordType, button) {",
                "calls": []
              },
              {
                "name": "handleAddChordClick",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 258,
                "signature": "handleAddChordClick() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 267,
                "signature": "if (!inputValue) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 277,
                "signature": "if (success) {",
                "calls": []
              },
              {
                "name": "handleRemoveChordClick",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 289,
                "signature": "handleRemoveChordClick(button) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 291,
                "signature": "if (chord) {",
                "calls": []
              },
              {
                "name": "handlePlayAll",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 300,
                "signature": "handlePlayAll() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 304,
                "signature": "if (!selectedChords || selectedChords.length === 0) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 312,
                "signature": "if (!this.audioManager) {",
                "calls": []
              },
              {
                "name": "handleTextInputFocus",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 330,
                "signature": "handleTextInputFocus() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 332,
                "signature": "if (input && input.value) {",
                "calls": []
              },
              {
                "name": "handleSuggestionClick",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 337,
                "signature": "handleSuggestionClick(chord) {",
                "calls": []
              },
              {
                "name": "handleTextInput",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 348,
                "signature": "handleTextInput(inputValue) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 371,
                "signature": "if (validationResult) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 383,
                "signature": "if (suggestions.length > 0) {",
                "calls": []
              },
              {
                "name": "handleTextInputSubmit",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 390,
                "signature": "handleTextInputSubmit(inputValue) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 399,
                "signature": "if (selectedSuggestion) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 409,
                "signature": "if (result.success) {",
                "calls": []
              },
              {
                "name": "clearTextInput",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 424,
                "signature": "clearTextInput() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 427,
                "signature": "if (textInput) {",
                "calls": []
              },
              {
                "name": "showSuggestions",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 439,
                "signature": "showSuggestions(suggestions, inputValue) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 447,
                "signature": "if (suggestions.length === 0) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 470,
                "signature": "if (index === 0) {",
                "calls": []
              },
              {
                "name": "clearSuggestions",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 484,
                "signature": "clearSuggestions() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 486,
                "signature": "if (container) {",
                "calls": []
              },
              {
                "name": "highlightMatch",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 498,
                "signature": "highlightMatch(suggestion, input) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 499,
                "signature": "if (!input || input.length === 0) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 509,
                "signature": "if (matchIndex === -1) {",
                "calls": []
              },
              {
                "name": "handleSuggestionNavigation",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 522,
                "signature": "handleSuggestionNavigation(key) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 529,
                "signature": "if (currentSelected) {",
                "calls": []
              },
              {
                "name": "handleSoundToggle",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 540,
                "signature": "handleSoundToggle() {",
                "calls": []
              },
              {
                "name": "handleClearAll",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 546,
                "signature": "handleClearAll() {",
                "calls": []
              },
              {
                "name": "updateUI",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 552,
                "signature": "updateUI() {",
                "calls": []
              },
              {
                "name": "updateSelectedChordsDisplay",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 558,
                "signature": "updateSelectedChordsDisplay() {",
                "calls": []
              },
              {
                "name": "updateChordButtons",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 574,
                "signature": "updateChordButtons() {",
                "calls": []
              },
              {
                "name": "updateAvailableChordButtons",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 584,
                "signature": "updateAvailableChordButtons() {",
                "calls": []
              },
              {
                "name": "updateSuggestions",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 594,
                "signature": "updateSuggestions(input) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 595,
                "signature": "if (!input || input.length < 1) {",
                "calls": []
              },
              {
                "name": "updateProgressions",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 610,
                "signature": "updateProgressions() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 614,
                "signature": "if (window.initializeDOMReferences && typeof window.initializeDOMReferences === 'function') {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 619,
                "signature": "if (typeof window.onInputChordsChanged === 'function' && window.chordGroup) {",
                "calls": []
              },
              {
                "name": "createChordElement",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 630,
                "signature": "createChordElement(chord, index) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 641,
                "signature": "if (removeBtn) {",
                "calls": []
              },
              {
                "name": "formatChordNameLegacy",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 652,
                "signature": "formatChordNameLegacy(chordName, chordType) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 654,
                "signature": "if (typeof window.formatChordName === 'function') {",
                "calls": []
              },
              {
                "name": "focusTextInput",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 663,
                "signature": "focusTextInput() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 665,
                "signature": "if (input) {",
                "calls": []
              },
              {
                "name": "showMessage",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 673,
                "signature": "showMessage(message, type = 'info') {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 675,
                "signature": "if (!messageContainer) {",
                "calls": []
              },
              {
                "name": "removeLastChord",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 690,
                "signature": "removeLastChord() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 692,
                "signature": "if (selectedChords.length > 0) {",
                "calls": []
              },
              {
                "name": "showMessage",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 698,
                "signature": "showMessage(message, type = 'info') {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 701,
                "signature": "if (!messageEl) {",
                "calls": []
              },
              {
                "name": "getDebugInfo",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 719,
                "signature": "getDebugInfo() {",
                "calls": []
              },
              {
                "name": "selectChordNameLegacy",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 738,
                "signature": "selectChordNameLegacy(chordName) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 751,
                "signature": "if (btn !== selectedButton) {",
                "calls": []
              },
              {
                "name": "selectChordTypeLegacy",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 766,
                "signature": "selectChordTypeLegacy(chordType) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 779,
                "signature": "if (btn !== selectedButton) {",
                "calls": []
              },
              {
                "name": "tryAddChordLegacy",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 793,
                "signature": "tryAddChordLegacy() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 794,
                "signature": "if (window.selectedChordName && window.selectedChordType) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 796,
                "signature": "if (typeof window.appendChord === 'function') {",
                "calls": []
              },
              {
                "name": "if",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 799,
                "signature": "if (typeof window.onInputChordsChanged === 'function') {",
                "calls": []
              },
              {
                "name": "resetChordSelectionLegacy",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 810,
                "signature": "resetChordSelectionLegacy() {",
                "calls": []
              },
              {
                "name": "initializeChordInputListenerLegacy",
                "class": "EventCoordinator",
                "file": "modules\\eventCoordinator.js",
                "line": 824,
                "signature": "initializeChordInputListenerLegacy() {",
                "calls": []
              }
            ],
            "constructor": {
              "line": 7,
              "signature": "constructor(inputManager, stateManager, audioManager) {"
            }
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "constructor",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 7,
            "signature": "constructor(inputManager, stateManager, audioManager) {",
            "calls": []
          },
          {
            "name": "setupEventListeners",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 20,
            "signature": "setupEventListeners() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 22,
            "signature": "if (document.readyState === 'loading') {",
            "calls": []
          },
          {
            "name": "initializeEventListeners",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 29,
            "signature": "initializeEventListeners() {",
            "calls": []
          },
          {
            "name": "setupAutoharpTypeListeners",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 49,
            "signature": "setupAutoharpTypeListeners() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 53,
            "signature": "if (e.target.checked) {",
            "calls": []
          },
          {
            "name": "setupChordButtonListeners",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 60,
            "signature": "setupChordButtonListeners() {",
            "calls": []
          },
          {
            "name": "setupTextInputListeners",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 81,
            "signature": "setupTextInputListeners() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 85,
            "signature": "if (textInput) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 89,
            "signature": "if (this.justSubmitted) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 98,
            "signature": "if (e.key === 'Enter') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 121,
            "signature": "if (suggestionsContainer) {",
            "calls": []
          },
          {
            "name": "setupAudioControlListeners",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 130,
            "signature": "setupAudioControlListeners() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 133,
            "signature": "if (soundToggle) {",
            "calls": []
          },
          {
            "name": "setupUtilityButtonListeners",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 140,
            "signature": "setupUtilityButtonListeners() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 143,
            "signature": "if (addChordBtn) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 151,
            "signature": "if (clearAllBtn) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 159,
            "signature": "if (playAllBtn) {",
            "calls": []
          },
          {
            "name": "setupKeyboardShortcuts",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 166,
            "signature": "setupKeyboardShortcuts() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 169,
            "signature": "if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {",
            "calls": []
          },
          {
            "name": "switch",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 173,
            "signature": "switch (e.key) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 175,
            "signature": "if (e.ctrlKey || e.metaKey) {",
            "calls": []
          },
          {
            "name": "setupStateListeners",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 203,
            "signature": "setupStateListeners() {",
            "calls": []
          },
          {
            "name": "handleAutoharpTypeChange",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 233,
            "signature": "handleAutoharpTypeChange(type) {",
            "calls": []
          },
          {
            "name": "handleChordNameSelection",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 238,
            "signature": "handleChordNameSelection(chordName, button) {",
            "calls": []
          },
          {
            "name": "handleChordTypeSelection",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 248,
            "signature": "handleChordTypeSelection(chordType, button) {",
            "calls": []
          },
          {
            "name": "handleAddChordClick",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 258,
            "signature": "handleAddChordClick() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 267,
            "signature": "if (!inputValue) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 277,
            "signature": "if (success) {",
            "calls": []
          },
          {
            "name": "handleRemoveChordClick",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 289,
            "signature": "handleRemoveChordClick(button) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 291,
            "signature": "if (chord) {",
            "calls": []
          },
          {
            "name": "handlePlayAll",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 300,
            "signature": "handlePlayAll() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 304,
            "signature": "if (!selectedChords || selectedChords.length === 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 312,
            "signature": "if (!this.audioManager) {",
            "calls": []
          },
          {
            "name": "handleTextInputFocus",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 330,
            "signature": "handleTextInputFocus() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 332,
            "signature": "if (input && input.value) {",
            "calls": []
          },
          {
            "name": "handleSuggestionClick",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 337,
            "signature": "handleSuggestionClick(chord) {",
            "calls": []
          },
          {
            "name": "handleTextInput",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 348,
            "signature": "handleTextInput(inputValue) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 371,
            "signature": "if (validationResult) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 383,
            "signature": "if (suggestions.length > 0) {",
            "calls": []
          },
          {
            "name": "handleTextInputSubmit",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 390,
            "signature": "handleTextInputSubmit(inputValue) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 399,
            "signature": "if (selectedSuggestion) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 409,
            "signature": "if (result.success) {",
            "calls": []
          },
          {
            "name": "clearTextInput",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 424,
            "signature": "clearTextInput() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 427,
            "signature": "if (textInput) {",
            "calls": []
          },
          {
            "name": "showSuggestions",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 439,
            "signature": "showSuggestions(suggestions, inputValue) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 447,
            "signature": "if (suggestions.length === 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 470,
            "signature": "if (index === 0) {",
            "calls": []
          },
          {
            "name": "clearSuggestions",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 484,
            "signature": "clearSuggestions() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 486,
            "signature": "if (container) {",
            "calls": []
          },
          {
            "name": "highlightMatch",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 498,
            "signature": "highlightMatch(suggestion, input) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 499,
            "signature": "if (!input || input.length === 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 509,
            "signature": "if (matchIndex === -1) {",
            "calls": []
          },
          {
            "name": "handleSuggestionNavigation",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 522,
            "signature": "handleSuggestionNavigation(key) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 529,
            "signature": "if (currentSelected) {",
            "calls": []
          },
          {
            "name": "handleSoundToggle",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 540,
            "signature": "handleSoundToggle() {",
            "calls": []
          },
          {
            "name": "handleClearAll",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 546,
            "signature": "handleClearAll() {",
            "calls": []
          },
          {
            "name": "updateUI",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 552,
            "signature": "updateUI() {",
            "calls": []
          },
          {
            "name": "updateSelectedChordsDisplay",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 558,
            "signature": "updateSelectedChordsDisplay() {",
            "calls": []
          },
          {
            "name": "updateChordButtons",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 574,
            "signature": "updateChordButtons() {",
            "calls": []
          },
          {
            "name": "updateAvailableChordButtons",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 584,
            "signature": "updateAvailableChordButtons() {",
            "calls": []
          },
          {
            "name": "updateSuggestions",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 594,
            "signature": "updateSuggestions(input) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 595,
            "signature": "if (!input || input.length < 1) {",
            "calls": []
          },
          {
            "name": "updateProgressions",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 610,
            "signature": "updateProgressions() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 614,
            "signature": "if (window.initializeDOMReferences && typeof window.initializeDOMReferences === 'function') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 619,
            "signature": "if (typeof window.onInputChordsChanged === 'function' && window.chordGroup) {",
            "calls": []
          },
          {
            "name": "createChordElement",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 630,
            "signature": "createChordElement(chord, index) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 641,
            "signature": "if (removeBtn) {",
            "calls": []
          },
          {
            "name": "formatChordNameLegacy",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 652,
            "signature": "formatChordNameLegacy(chordName, chordType) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 654,
            "signature": "if (typeof window.formatChordName === 'function') {",
            "calls": []
          },
          {
            "name": "focusTextInput",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 663,
            "signature": "focusTextInput() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 665,
            "signature": "if (input) {",
            "calls": []
          },
          {
            "name": "showMessage",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 673,
            "signature": "showMessage(message, type = 'info') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 675,
            "signature": "if (!messageContainer) {",
            "calls": []
          },
          {
            "name": "removeLastChord",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 690,
            "signature": "removeLastChord() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 692,
            "signature": "if (selectedChords.length > 0) {",
            "calls": []
          },
          {
            "name": "showMessage",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 698,
            "signature": "showMessage(message, type = 'info') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 701,
            "signature": "if (!messageEl) {",
            "calls": []
          },
          {
            "name": "getDebugInfo",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 719,
            "signature": "getDebugInfo() {",
            "calls": []
          },
          {
            "name": "selectChordNameLegacy",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 738,
            "signature": "selectChordNameLegacy(chordName) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 751,
            "signature": "if (btn !== selectedButton) {",
            "calls": []
          },
          {
            "name": "selectChordTypeLegacy",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 766,
            "signature": "selectChordTypeLegacy(chordType) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 779,
            "signature": "if (btn !== selectedButton) {",
            "calls": []
          },
          {
            "name": "tryAddChordLegacy",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 793,
            "signature": "tryAddChordLegacy() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 794,
            "signature": "if (window.selectedChordName && window.selectedChordType) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 796,
            "signature": "if (typeof window.appendChord === 'function') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 799,
            "signature": "if (typeof window.onInputChordsChanged === 'function') {",
            "calls": []
          },
          {
            "name": "resetChordSelectionLegacy",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 810,
            "signature": "resetChordSelectionLegacy() {",
            "calls": []
          },
          {
            "name": "initializeChordInputListenerLegacy",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 824,
            "signature": "initializeChordInputListenerLegacy() {",
            "calls": []
          }
        ],
        "eventHandlers": [
          {
            "event": "DOMContentLoaded",
            "handler": "(",
            "file": "modules\\eventCoordinator.js",
            "line": 23,
            "signature": "document.addEventListener('DOMContentLoaded', () => this.initializeEventListeners());"
          },
          {
            "event": "change",
            "handler": "(e",
            "file": "modules\\eventCoordinator.js",
            "line": 52,
            "signature": "radio.addEventListener('change', (e) => {"
          },
          {
            "event": "click",
            "handler": "(e",
            "file": "modules\\eventCoordinator.js",
            "line": 62,
            "signature": "document.addEventListener('click', (e) => {"
          },
          {
            "event": "input",
            "handler": "(e",
            "file": "modules\\eventCoordinator.js",
            "line": 87,
            "signature": "textInput.addEventListener('input', (e) => {"
          },
          {
            "event": "keydown",
            "handler": "(e",
            "file": "modules\\eventCoordinator.js",
            "line": 97,
            "signature": "textInput.addEventListener('keydown', (e) => {"
          },
          {
            "event": "focus",
            "handler": "(",
            "file": "modules\\eventCoordinator.js",
            "line": 110,
            "signature": "textInput.addEventListener('focus', () => {"
          },
          {
            "event": "blur",
            "handler": "(",
            "file": "modules\\eventCoordinator.js",
            "line": 114,
            "signature": "textInput.addEventListener('blur', () => {"
          },
          {
            "event": "click",
            "handler": "(e",
            "file": "modules\\eventCoordinator.js",
            "line": 122,
            "signature": "suggestionsContainer.addEventListener('click', (e) => {"
          },
          {
            "event": "click",
            "handler": "(",
            "file": "modules\\eventCoordinator.js",
            "line": 134,
            "signature": "soundToggle.addEventListener('click', () => {"
          },
          {
            "event": "click",
            "handler": "(",
            "file": "modules\\eventCoordinator.js",
            "line": 144,
            "signature": "addChordBtn.addEventListener('click', () => {"
          },
          {
            "event": "click",
            "handler": "(",
            "file": "modules\\eventCoordinator.js",
            "line": 152,
            "signature": "clearAllBtn.addEventListener('click', () => {"
          },
          {
            "event": "click",
            "handler": "(",
            "file": "modules\\eventCoordinator.js",
            "line": 160,
            "signature": "playAllBtn.addEventListener('click', () => {"
          },
          {
            "event": "keydown",
            "handler": "(e",
            "file": "modules\\eventCoordinator.js",
            "line": 167,
            "signature": "document.addEventListener('keydown', (e) => {"
          },
          {
            "event": "click",
            "handler": "(",
            "file": "modules\\eventCoordinator.js",
            "line": 463,
            "signature": "item.addEventListener('click', () => {"
          },
          {
            "event": "click",
            "handler": "(e",
            "file": "modules\\eventCoordinator.js",
            "line": 642,
            "signature": "removeBtn.addEventListener('click', (e) => {"
          }
        ],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 832
      },
      "modules\\inputManager.js": {
        "path": "modules\\inputManager.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\modules\\inputManager.js",
        "classes": [
          {
            "name": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 6,
            "methods": [
              {
                "name": "constructor",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 7,
                "signature": "constructor(audioManager, chordParser) {",
                "calls": []
              },
              {
                "name": "on",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 19,
                "signature": "on(event, callback) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 20,
                "signature": "if (this.callbacks[event]) {",
                "calls": []
              },
              {
                "name": "emit",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 25,
                "signature": "emit(event, data) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 26,
                "signature": "if (this.callbacks[event]) {",
                "calls": []
              },
              {
                "name": "addChord",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 38,
                "signature": "addChord(chord, source = 'unknown') {",
                "calls": []
              },
              {
                "name": "if",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 41,
                "signature": "if (!chord) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 48,
                "signature": "if (!normalizedChord) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 77,
                "signature": "if (this.audioManager && this.audioManager.soundEnabled) {",
                "calls": []
              },
              {
                "name": "removeChord",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 94,
                "signature": "removeChord(chord) {",
                "calls": []
              },
              {
                "name": "removeChordAt",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 107,
                "signature": "removeChordAt(index) {",
                "calls": []
              },
              {
                "name": "clearAll",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 120,
                "signature": "clearAll() {",
                "calls": []
              },
              {
                "name": "getSelectedChords",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 131,
                "signature": "getSelectedChords() {",
                "calls": []
              },
              {
                "name": "hasChord",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 135,
                "signature": "hasChord(chord) {",
                "calls": []
              },
              {
                "name": "getChordCount",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 139,
                "signature": "getChordCount() {",
                "calls": []
              },
              {
                "name": "isValidChordFormat",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 144,
                "signature": "isValidChordFormat(chord) {",
                "calls": []
              },
              {
                "name": "processTextInput",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 158,
                "signature": "processTextInput(input) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 167,
                "signature": "if (parsedChord) {",
                "calls": []
              },
              {
                "name": "getSuggestions",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 188,
                "signature": "getSuggestions(input, maxSuggestions = 5) {",
                "calls": []
              },
              {
                "name": "reorderChords",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 193,
                "signature": "reorderChords(fromIndex, toIndex) {",
                "calls": []
              },
              {
                "name": "updateAvailableChords",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 213,
                "signature": "updateAvailableChords(chords) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 221,
                "signature": "if (validChords.length !== this.selectedChords.length) {",
                "calls": []
              },
              {
                "name": "addChords",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 242,
                "signature": "addChords(chords, source = 'batch') {",
                "calls": []
              },
              {
                "name": "replaceChords",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 251,
                "signature": "replaceChords(chords, source = 'replace') {",
                "calls": []
              },
              {
                "name": "exportState",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 257,
                "signature": "exportState() {",
                "calls": []
              },
              {
                "name": "importState",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 264,
                "signature": "importState(state) {",
                "calls": []
              },
              {
                "name": "validateAllSelected",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 274,
                "signature": "validateAllSelected() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 279,
                "signature": "if (invalidChords.length > 0) {",
                "calls": []
              },
              {
                "name": "getDebugInfo",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 288,
                "signature": "getDebugInfo() {",
                "calls": []
              },
              {
                "name": "getInputChordsLegacy",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 306,
                "signature": "getInputChordsLegacy() {",
                "calls": []
              },
              {
                "name": "appendChordLegacy",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 316,
                "signature": "appendChordLegacy(chord) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 332,
                "signature": "if (typeof window.addDragListeners === 'function') {",
                "calls": []
              },
              {
                "name": "removeChordLegacy",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 342,
                "signature": "removeChordLegacy(button) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 354,
                "signature": "if (typeof window.onInputChordsChanged === 'function') {",
                "calls": []
              },
              {
                "name": "addChordFromButtonLegacy",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 365,
                "signature": "addChordFromButtonLegacy(chordValue) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 366,
                "signature": "if (chordValue) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "InputManager",
                "file": "modules\\inputManager.js",
                "line": 369,
                "signature": "if (typeof window.onInputChordsChanged === 'function') {",
                "calls": []
              }
            ],
            "constructor": {
              "line": 7,
              "signature": "constructor(audioManager, chordParser) {"
            }
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "constructor",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 7,
            "signature": "constructor(audioManager, chordParser) {",
            "calls": []
          },
          {
            "name": "on",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 19,
            "signature": "on(event, callback) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 20,
            "signature": "if (this.callbacks[event]) {",
            "calls": []
          },
          {
            "name": "emit",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 25,
            "signature": "emit(event, data) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 26,
            "signature": "if (this.callbacks[event]) {",
            "calls": []
          },
          {
            "name": "addChord",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 38,
            "signature": "addChord(chord, source = 'unknown') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 41,
            "signature": "if (!chord) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 48,
            "signature": "if (!normalizedChord) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 77,
            "signature": "if (this.audioManager && this.audioManager.soundEnabled) {",
            "calls": []
          },
          {
            "name": "removeChord",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 94,
            "signature": "removeChord(chord) {",
            "calls": []
          },
          {
            "name": "removeChordAt",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 107,
            "signature": "removeChordAt(index) {",
            "calls": []
          },
          {
            "name": "clearAll",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 120,
            "signature": "clearAll() {",
            "calls": []
          },
          {
            "name": "getSelectedChords",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 131,
            "signature": "getSelectedChords() {",
            "calls": []
          },
          {
            "name": "hasChord",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 135,
            "signature": "hasChord(chord) {",
            "calls": []
          },
          {
            "name": "getChordCount",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 139,
            "signature": "getChordCount() {",
            "calls": []
          },
          {
            "name": "isValidChordFormat",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 144,
            "signature": "isValidChordFormat(chord) {",
            "calls": []
          },
          {
            "name": "processTextInput",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 158,
            "signature": "processTextInput(input) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 167,
            "signature": "if (parsedChord) {",
            "calls": []
          },
          {
            "name": "getSuggestions",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 188,
            "signature": "getSuggestions(input, maxSuggestions = 5) {",
            "calls": []
          },
          {
            "name": "reorderChords",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 193,
            "signature": "reorderChords(fromIndex, toIndex) {",
            "calls": []
          },
          {
            "name": "updateAvailableChords",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 213,
            "signature": "updateAvailableChords(chords) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 221,
            "signature": "if (validChords.length !== this.selectedChords.length) {",
            "calls": []
          },
          {
            "name": "addChords",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 242,
            "signature": "addChords(chords, source = 'batch') {",
            "calls": []
          },
          {
            "name": "replaceChords",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 251,
            "signature": "replaceChords(chords, source = 'replace') {",
            "calls": []
          },
          {
            "name": "exportState",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 257,
            "signature": "exportState() {",
            "calls": []
          },
          {
            "name": "importState",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 264,
            "signature": "importState(state) {",
            "calls": []
          },
          {
            "name": "validateAllSelected",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 274,
            "signature": "validateAllSelected() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 279,
            "signature": "if (invalidChords.length > 0) {",
            "calls": []
          },
          {
            "name": "getDebugInfo",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 288,
            "signature": "getDebugInfo() {",
            "calls": []
          },
          {
            "name": "getInputChordsLegacy",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 306,
            "signature": "getInputChordsLegacy() {",
            "calls": []
          },
          {
            "name": "appendChordLegacy",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 316,
            "signature": "appendChordLegacy(chord) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 332,
            "signature": "if (typeof window.addDragListeners === 'function') {",
            "calls": []
          },
          {
            "name": "removeChordLegacy",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 342,
            "signature": "removeChordLegacy(button) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 354,
            "signature": "if (typeof window.onInputChordsChanged === 'function') {",
            "calls": []
          },
          {
            "name": "addChordFromButtonLegacy",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 365,
            "signature": "addChordFromButtonLegacy(chordValue) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 366,
            "signature": "if (chordValue) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 369,
            "signature": "if (typeof window.onInputChordsChanged === 'function') {",
            "calls": []
          }
        ],
        "eventHandlers": [
          {
            "event": "animationend",
            "handler": "(",
            "file": "modules\\inputManager.js",
            "line": 351,
            "signature": "newChord.addEventListener(\"animationend\", () => {"
          }
        ],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 377
      },
      "modules\\integrationBridge.js": {
        "path": "modules\\integrationBridge.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\modules\\integrationBridge.js",
        "classes": [
          {
            "name": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 6,
            "methods": [
              {
                "name": "constructor",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 7,
                "signature": "constructor() {",
                "calls": []
              },
              {
                "name": "setupLegacyDataWatcher",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 16,
                "signature": "setupLegacyDataWatcher() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 18,
                "signature": "if (window.CHORD_LISTS) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 25,
                "signature": "if (window.CHORD_LISTS) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 34,
                "signature": "if (!this.legacyDataReady) {",
                "calls": []
              },
              {
                "name": "onLegacyDataReady",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 41,
                "signature": "onLegacyDataReady() {",
                "calls": []
              },
              {
                "name": "checkReadiness",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 49,
                "signature": "checkReadiness() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 50,
                "signature": "if (this.legacyDataReady) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 52,
                "signature": "if (this.readyCallbacks && this.readyCallbacks.length > 0) {",
                "calls": []
              },
              {
                "name": "setModuleSystemReady",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 70,
                "signature": "setModuleSystemReady() {",
                "calls": []
              },
              {
                "name": "useFallbackChordData",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 75,
                "signature": "useFallbackChordData() {",
                "calls": []
              },
              {
                "name": "setModuleSystemReady",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 95,
                "signature": "setModuleSystemReady() {",
                "calls": []
              },
              {
                "name": "checkReadiness",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 100,
                "signature": "checkReadiness() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 101,
                "signature": "if (this.legacyDataReady && this.moduleSystemReady) {",
                "calls": []
              },
              {
                "name": "onReady",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 106,
                "signature": "onReady(callback) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 107,
                "signature": "if (this.legacyDataReady && this.moduleSystemReady) {",
                "calls": []
              },
              {
                "name": "executePendingCallbacks",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 114,
                "signature": "executePendingCallbacks() {",
                "calls": []
              },
              {
                "name": "getAvailableChordsForType",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 125,
                "signature": "getAvailableChordsForType(type) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 126,
                "signature": "if (!this.chordLists) {",
                "calls": []
              },
              {
                "name": "switch",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 131,
                "signature": "switch (type) {",
                "calls": []
              },
              {
                "name": "bridgeLegacyFunctions",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 158,
                "signature": "bridgeLegacyFunctions(app) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 162,
                "signature": "if (window.selectChordName) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 174,
                "signature": "if (window.selectChordType) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 187,
                "signature": "if (window.onChordTypeChanged) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 193,
                "signature": "if (selectedType) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 200,
                "signature": "if (window.onInputChordsChanged) {",
                "calls": []
              },
              {
                "name": "getCurrentAutoharpType",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 212,
                "signature": "getCurrentAutoharpType() {",
                "calls": []
              },
              {
                "name": "getCurrentSelectedChords",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 218,
                "signature": "getCurrentSelectedChords() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 220,
                "signature": "if (window.initializeDOMReferences && typeof window.initializeDOMReferences === 'function') {",
                "calls": []
              },
              {
                "name": "if",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 225,
                "signature": "if (window.getInputChords && typeof window.getInputChords === 'function' && window.chordGroup) {",
                "calls": []
              },
              {
                "name": "syncLegacyToNewSystem",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 242,
                "signature": "syncLegacyToNewSystem(app) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 252,
                "signature": "if (currentChords.length > 0) {",
                "calls": []
              },
              {
                "name": "syncNewSystemToLegacy",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 263,
                "signature": "syncNewSystemToLegacy(app) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "IntegrationBridge",
                "file": "modules\\integrationBridge.js",
                "line": 270,
                "signature": "if (window.renderInputChords && typeof window.renderInputChords === 'function') {",
                "calls": []
              }
            ],
            "constructor": {
              "line": 7,
              "signature": "constructor() {"
            }
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "constructor",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 7,
            "signature": "constructor() {",
            "calls": []
          },
          {
            "name": "setupLegacyDataWatcher",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 16,
            "signature": "setupLegacyDataWatcher() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 18,
            "signature": "if (window.CHORD_LISTS) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 25,
            "signature": "if (window.CHORD_LISTS) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 34,
            "signature": "if (!this.legacyDataReady) {",
            "calls": []
          },
          {
            "name": "onLegacyDataReady",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 41,
            "signature": "onLegacyDataReady() {",
            "calls": []
          },
          {
            "name": "checkReadiness",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 49,
            "signature": "checkReadiness() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 50,
            "signature": "if (this.legacyDataReady) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 52,
            "signature": "if (this.readyCallbacks && this.readyCallbacks.length > 0) {",
            "calls": []
          },
          {
            "name": "setModuleSystemReady",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 70,
            "signature": "setModuleSystemReady() {",
            "calls": []
          },
          {
            "name": "useFallbackChordData",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 75,
            "signature": "useFallbackChordData() {",
            "calls": []
          },
          {
            "name": "setModuleSystemReady",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 95,
            "signature": "setModuleSystemReady() {",
            "calls": []
          },
          {
            "name": "checkReadiness",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 100,
            "signature": "checkReadiness() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 101,
            "signature": "if (this.legacyDataReady && this.moduleSystemReady) {",
            "calls": []
          },
          {
            "name": "onReady",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 106,
            "signature": "onReady(callback) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 107,
            "signature": "if (this.legacyDataReady && this.moduleSystemReady) {",
            "calls": []
          },
          {
            "name": "executePendingCallbacks",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 114,
            "signature": "executePendingCallbacks() {",
            "calls": []
          },
          {
            "name": "getAvailableChordsForType",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 125,
            "signature": "getAvailableChordsForType(type) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 126,
            "signature": "if (!this.chordLists) {",
            "calls": []
          },
          {
            "name": "switch",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 131,
            "signature": "switch (type) {",
            "calls": []
          },
          {
            "name": "bridgeLegacyFunctions",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 158,
            "signature": "bridgeLegacyFunctions(app) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 162,
            "signature": "if (window.selectChordName) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 174,
            "signature": "if (window.selectChordType) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 187,
            "signature": "if (window.onChordTypeChanged) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 193,
            "signature": "if (selectedType) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 200,
            "signature": "if (window.onInputChordsChanged) {",
            "calls": []
          },
          {
            "name": "getCurrentAutoharpType",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 212,
            "signature": "getCurrentAutoharpType() {",
            "calls": []
          },
          {
            "name": "getCurrentSelectedChords",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 218,
            "signature": "getCurrentSelectedChords() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 220,
            "signature": "if (window.initializeDOMReferences && typeof window.initializeDOMReferences === 'function') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 225,
            "signature": "if (window.getInputChords && typeof window.getInputChords === 'function' && window.chordGroup) {",
            "calls": []
          },
          {
            "name": "syncLegacyToNewSystem",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 242,
            "signature": "syncLegacyToNewSystem(app) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 252,
            "signature": "if (currentChords.length > 0) {",
            "calls": []
          },
          {
            "name": "syncNewSystemToLegacy",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 263,
            "signature": "syncNewSystemToLegacy(app) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 270,
            "signature": "if (window.renderInputChords && typeof window.renderInputChords === 'function') {",
            "calls": []
          }
        ],
        "eventHandlers": [],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 285
      },
      "modules\\stateManager.js": {
        "path": "modules\\stateManager.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\modules\\stateManager.js",
        "classes": [
          {
            "name": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 6,
            "methods": [
              {
                "name": "constructor",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 7,
                "signature": "constructor() {",
                "calls": []
              },
              {
                "name": "initializeAvailableChords",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 32,
                "signature": "initializeAvailableChords() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 35,
                "signature": "if (chords && chords.length > 0) {",
                "calls": []
              },
              {
                "name": "subscribe",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 48,
                "signature": "subscribe(event, callback) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 49,
                "signature": "if (!this.listeners[event]) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 57,
                "signature": "if (index > -1) {",
                "calls": []
              },
              {
                "name": "emit",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 63,
                "signature": "emit(event, data) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 64,
                "signature": "if (this.listeners[event]) {",
                "calls": []
              },
              {
                "name": "getState",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 76,
                "signature": "getState() {",
                "calls": []
              },
              {
                "name": "get",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 80,
                "signature": "get(key) {",
                "calls": []
              },
              {
                "name": "setState",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 85,
                "signature": "setState(updates) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 91,
                "signature": "if (previousState[key] !== this.state[key]) {",
                "calls": []
              },
              {
                "name": "set",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 109,
                "signature": "set(key, value) {",
                "calls": []
              },
              {
                "name": "updateAutoharpType",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 114,
                "signature": "updateAutoharpType(type) {",
                "calls": []
              },
              {
                "name": "updateSelectedChords",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 127,
                "signature": "updateSelectedChords(chords) {",
                "calls": []
              },
              {
                "name": "addSelectedChord",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 131,
                "signature": "addSelectedChord(chord) {",
                "calls": []
              },
              {
                "name": "removeSelectedChord",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 138,
                "signature": "removeSelectedChord(chord) {",
                "calls": []
              },
              {
                "name": "clearSelectedChords",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 143,
                "signature": "clearSelectedChords() {",
                "calls": []
              },
              {
                "name": "updateProgressions",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 152,
                "signature": "updateProgressions(progressions) {",
                "calls": []
              },
              {
                "name": "updateSuggestions",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 156,
                "signature": "updateSuggestions(suggestions) {",
                "calls": []
              },
              {
                "name": "toggleAudio",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 160,
                "signature": "toggleAudio() {",
                "calls": []
              },
              {
                "name": "setInputMode",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 165,
                "signature": "setInputMode(mode) {",
                "calls": []
              },
              {
                "name": "updateCurrentChord",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 171,
                "signature": "updateCurrentChord(chordName, chordType) {",
                "calls": []
              },
              {
                "name": "getAvailableChordsForType",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 179,
                "signature": "getAvailableChordsForType(type) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 181,
                "signature": "if (window.integrationBridge) {",
                "calls": []
              },
              {
                "name": "switch",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 188,
                "signature": "switch (type) {",
                "calls": []
              },
              {
                "name": "isChordAvailable",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 214,
                "signature": "isChordAvailable(chord) {",
                "calls": []
              },
              {
                "name": "isChordSelected",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 218,
                "signature": "isChordSelected(chord) {",
                "calls": []
              },
              {
                "name": "getSelectedChordCount",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 222,
                "signature": "getSelectedChordCount() {",
                "calls": []
              },
              {
                "name": "saveToStorage",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 227,
                "signature": "saveToStorage() {",
                "calls": []
              },
              {
                "name": "loadFromStorage",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 241,
                "signature": "loadFromStorage() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 244,
                "signature": "if (stored) {",
                "calls": []
              },
              {
                "name": "clearStorage",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 261,
                "signature": "clearStorage() {",
                "calls": []
              },
              {
                "name": "validateState",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 270,
                "signature": "validateState() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 273,
                "signature": "if (!this.state.autoharpType) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 290,
                "signature": "if (invalidChords.length > 0) {",
                "calls": []
              },
              {
                "name": "reset",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 301,
                "signature": "reset() {",
                "calls": []
              },
              {
                "name": "getDebugInfo",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 321,
                "signature": "getDebugInfo() {",
                "calls": []
              },
              {
                "name": "exportState",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 334,
                "signature": "exportState() {",
                "calls": []
              },
              {
                "name": "importState",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 342,
                "signature": "importState(exportedState) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 343,
                "signature": "if (!exportedState || typeof exportedState !== 'object') {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StateManager",
                "file": "modules\\stateManager.js",
                "line": 348,
                "signature": "if (!exportedState.autoharpType) {",
                "calls": []
              }
            ],
            "constructor": {
              "line": 7,
              "signature": "constructor() {"
            }
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "constructor",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 7,
            "signature": "constructor() {",
            "calls": []
          },
          {
            "name": "initializeAvailableChords",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 32,
            "signature": "initializeAvailableChords() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 35,
            "signature": "if (chords && chords.length > 0) {",
            "calls": []
          },
          {
            "name": "subscribe",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 48,
            "signature": "subscribe(event, callback) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 49,
            "signature": "if (!this.listeners[event]) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 57,
            "signature": "if (index > -1) {",
            "calls": []
          },
          {
            "name": "emit",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 63,
            "signature": "emit(event, data) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 64,
            "signature": "if (this.listeners[event]) {",
            "calls": []
          },
          {
            "name": "getState",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 76,
            "signature": "getState() {",
            "calls": []
          },
          {
            "name": "get",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 80,
            "signature": "get(key) {",
            "calls": []
          },
          {
            "name": "setState",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 85,
            "signature": "setState(updates) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 91,
            "signature": "if (previousState[key] !== this.state[key]) {",
            "calls": []
          },
          {
            "name": "set",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 109,
            "signature": "set(key, value) {",
            "calls": []
          },
          {
            "name": "updateAutoharpType",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 114,
            "signature": "updateAutoharpType(type) {",
            "calls": []
          },
          {
            "name": "updateSelectedChords",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 127,
            "signature": "updateSelectedChords(chords) {",
            "calls": []
          },
          {
            "name": "addSelectedChord",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 131,
            "signature": "addSelectedChord(chord) {",
            "calls": []
          },
          {
            "name": "removeSelectedChord",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 138,
            "signature": "removeSelectedChord(chord) {",
            "calls": []
          },
          {
            "name": "clearSelectedChords",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 143,
            "signature": "clearSelectedChords() {",
            "calls": []
          },
          {
            "name": "updateProgressions",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 152,
            "signature": "updateProgressions(progressions) {",
            "calls": []
          },
          {
            "name": "updateSuggestions",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 156,
            "signature": "updateSuggestions(suggestions) {",
            "calls": []
          },
          {
            "name": "toggleAudio",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 160,
            "signature": "toggleAudio() {",
            "calls": []
          },
          {
            "name": "setInputMode",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 165,
            "signature": "setInputMode(mode) {",
            "calls": []
          },
          {
            "name": "updateCurrentChord",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 171,
            "signature": "updateCurrentChord(chordName, chordType) {",
            "calls": []
          },
          {
            "name": "getAvailableChordsForType",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 179,
            "signature": "getAvailableChordsForType(type) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 181,
            "signature": "if (window.integrationBridge) {",
            "calls": []
          },
          {
            "name": "switch",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 188,
            "signature": "switch (type) {",
            "calls": []
          },
          {
            "name": "isChordAvailable",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 214,
            "signature": "isChordAvailable(chord) {",
            "calls": []
          },
          {
            "name": "isChordSelected",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 218,
            "signature": "isChordSelected(chord) {",
            "calls": []
          },
          {
            "name": "getSelectedChordCount",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 222,
            "signature": "getSelectedChordCount() {",
            "calls": []
          },
          {
            "name": "saveToStorage",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 227,
            "signature": "saveToStorage() {",
            "calls": []
          },
          {
            "name": "loadFromStorage",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 241,
            "signature": "loadFromStorage() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 244,
            "signature": "if (stored) {",
            "calls": []
          },
          {
            "name": "clearStorage",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 261,
            "signature": "clearStorage() {",
            "calls": []
          },
          {
            "name": "validateState",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 270,
            "signature": "validateState() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 273,
            "signature": "if (!this.state.autoharpType) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 290,
            "signature": "if (invalidChords.length > 0) {",
            "calls": []
          },
          {
            "name": "reset",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 301,
            "signature": "reset() {",
            "calls": []
          },
          {
            "name": "getDebugInfo",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 321,
            "signature": "getDebugInfo() {",
            "calls": []
          },
          {
            "name": "exportState",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 334,
            "signature": "exportState() {",
            "calls": []
          },
          {
            "name": "importState",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 342,
            "signature": "importState(exportedState) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 343,
            "signature": "if (!exportedState || typeof exportedState !== 'object') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 348,
            "signature": "if (!exportedState.autoharpType) {",
            "calls": []
          }
        ],
        "eventHandlers": [],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 372
      },
      "modules\\storageManager.js": {
        "path": "modules\\storageManager.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\modules\\storageManager.js",
        "classes": [
          {
            "name": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 6,
            "methods": [
              {
                "name": "constructor",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 7,
                "signature": "constructor() {",
                "calls": []
              },
              {
                "name": "save",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 13,
                "signature": "save(key, data) {",
                "calls": []
              },
              {
                "name": "load",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 28,
                "signature": "load(key, defaultValue = null) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 36,
                "signature": "if (storageData.version !== this.version) {",
                "calls": []
              },
              {
                "name": "remove",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 48,
                "signature": "remove(key) {",
                "calls": []
              },
              {
                "name": "exists",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 58,
                "signature": "exists(key) {",
                "calls": []
              },
              {
                "name": "savePreferences",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 63,
                "signature": "savePreferences(preferences) {",
                "calls": []
              },
              {
                "name": "loadPreferences",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 72,
                "signature": "loadPreferences() {",
                "calls": []
              },
              {
                "name": "saveChordHistory",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 84,
                "signature": "saveChordHistory(chords) {",
                "calls": []
              },
              {
                "name": "loadChordHistory",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 90,
                "signature": "loadChordHistory() {",
                "calls": []
              },
              {
                "name": "addToChordHistory",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 94,
                "signature": "addToChordHistory(chord) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 101,
                "signature": "if (index > -1) {",
                "calls": []
              },
              {
                "name": "saveChordProgression",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 111,
                "signature": "saveChordProgression(name, progression) {",
                "calls": []
              },
              {
                "name": "loadChordProgressions",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 124,
                "signature": "loadChordProgressions() {",
                "calls": []
              },
              {
                "name": "deleteChordProgression",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 128,
                "signature": "deleteChordProgression(name) {",
                "calls": []
              },
              {
                "name": "updateProgressionLastUsed",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 134,
                "signature": "updateProgressionLastUsed(name) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 136,
                "signature": "if (progressions[name]) {",
                "calls": []
              },
              {
                "name": "saveSession",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 144,
                "signature": "saveSession(sessionData) {",
                "calls": []
              },
              {
                "name": "loadSession",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 152,
                "signature": "loadSession() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 156,
                "signature": "if (session && session.timestamp) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 158,
                "signature": "if (hoursSinceSession > 24) {",
                "calls": []
              },
              {
                "name": "clearSession",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 167,
                "signature": "clearSession() {",
                "calls": []
              },
              {
                "name": "saveUsageStats",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 172,
                "signature": "saveUsageStats(stats) {",
                "calls": []
              },
              {
                "name": "loadUsageStats",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 182,
                "signature": "loadUsageStats() {",
                "calls": []
              },
              {
                "name": "incrementStat",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 195,
                "signature": "incrementStat(statName, value = 1) {",
                "calls": []
              },
              {
                "name": "incrementChordUsage",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 201,
                "signature": "incrementChordUsage(chord) {",
                "calls": []
              },
              {
                "name": "exportAllData",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 209,
                "signature": "exportAllData() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 220,
                "signature": "if (data !== null) {",
                "calls": []
              },
              {
                "name": "importAllData",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 232,
                "signature": "importAllData(importData) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 233,
                "signature": "if (!importData || typeof importData !== 'object') {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 238,
                "signature": "if (importData.version && importData.version !== this.version) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 251,
                "signature": "if (importData[key]) {",
                "calls": []
              },
              {
                "name": "clearAllData",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 260,
                "signature": "clearAllData() {",
                "calls": []
              },
              {
                "name": "getStorageInfo",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 277,
                "signature": "getStorageInfo() {",
                "calls": []
              },
              {
                "name": "for",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 283,
                "signature": "for (let i = 0; i < localStorage.length; i++) {",
                "calls": []
              },
              {
                "name": "getStorageQuota",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 308,
                "signature": "getStorageQuota() {",
                "calls": []
              },
              {
                "name": "for",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 317,
                "signature": "for (let i = 0; i < 1000; i++) {",
                "calls": []
              },
              {
                "name": "while",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 321,
                "signature": "while (true) {",
                "calls": []
              },
              {
                "name": "cleanupOldData",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 343,
                "signature": "cleanupOldData() {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 352,
                "signature": "if (progression.lastUsed && progression.lastUsed < cutoffTime) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 358,
                "signature": "if (cleanedProgressions) {",
                "calls": []
              },
              {
                "name": "if",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 364,
                "signature": "if (history.length > 50) {",
                "calls": []
              },
              {
                "name": "migrateFromOldVersion",
                "class": "StorageManager",
                "file": "modules\\storageManager.js",
                "line": 375,
                "signature": "migrateFromOldVersion(oldData) {",
                "calls": []
              }
            ],
            "constructor": {
              "line": 7,
              "signature": "constructor() {"
            }
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "constructor",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 7,
            "signature": "constructor() {",
            "calls": []
          },
          {
            "name": "save",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 13,
            "signature": "save(key, data) {",
            "calls": []
          },
          {
            "name": "load",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 28,
            "signature": "load(key, defaultValue = null) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 36,
            "signature": "if (storageData.version !== this.version) {",
            "calls": []
          },
          {
            "name": "remove",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 48,
            "signature": "remove(key) {",
            "calls": []
          },
          {
            "name": "exists",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 58,
            "signature": "exists(key) {",
            "calls": []
          },
          {
            "name": "savePreferences",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 63,
            "signature": "savePreferences(preferences) {",
            "calls": []
          },
          {
            "name": "loadPreferences",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 72,
            "signature": "loadPreferences() {",
            "calls": []
          },
          {
            "name": "saveChordHistory",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 84,
            "signature": "saveChordHistory(chords) {",
            "calls": []
          },
          {
            "name": "loadChordHistory",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 90,
            "signature": "loadChordHistory() {",
            "calls": []
          },
          {
            "name": "addToChordHistory",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 94,
            "signature": "addToChordHistory(chord) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 101,
            "signature": "if (index > -1) {",
            "calls": []
          },
          {
            "name": "saveChordProgression",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 111,
            "signature": "saveChordProgression(name, progression) {",
            "calls": []
          },
          {
            "name": "loadChordProgressions",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 124,
            "signature": "loadChordProgressions() {",
            "calls": []
          },
          {
            "name": "deleteChordProgression",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 128,
            "signature": "deleteChordProgression(name) {",
            "calls": []
          },
          {
            "name": "updateProgressionLastUsed",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 134,
            "signature": "updateProgressionLastUsed(name) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 136,
            "signature": "if (progressions[name]) {",
            "calls": []
          },
          {
            "name": "saveSession",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 144,
            "signature": "saveSession(sessionData) {",
            "calls": []
          },
          {
            "name": "loadSession",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 152,
            "signature": "loadSession() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 156,
            "signature": "if (session && session.timestamp) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 158,
            "signature": "if (hoursSinceSession > 24) {",
            "calls": []
          },
          {
            "name": "clearSession",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 167,
            "signature": "clearSession() {",
            "calls": []
          },
          {
            "name": "saveUsageStats",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 172,
            "signature": "saveUsageStats(stats) {",
            "calls": []
          },
          {
            "name": "loadUsageStats",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 182,
            "signature": "loadUsageStats() {",
            "calls": []
          },
          {
            "name": "incrementStat",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 195,
            "signature": "incrementStat(statName, value = 1) {",
            "calls": []
          },
          {
            "name": "incrementChordUsage",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 201,
            "signature": "incrementChordUsage(chord) {",
            "calls": []
          },
          {
            "name": "exportAllData",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 209,
            "signature": "exportAllData() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 220,
            "signature": "if (data !== null) {",
            "calls": []
          },
          {
            "name": "importAllData",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 232,
            "signature": "importAllData(importData) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 233,
            "signature": "if (!importData || typeof importData !== 'object') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 238,
            "signature": "if (importData.version && importData.version !== this.version) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 251,
            "signature": "if (importData[key]) {",
            "calls": []
          },
          {
            "name": "clearAllData",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 260,
            "signature": "clearAllData() {",
            "calls": []
          },
          {
            "name": "getStorageInfo",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 277,
            "signature": "getStorageInfo() {",
            "calls": []
          },
          {
            "name": "for",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 283,
            "signature": "for (let i = 0; i < localStorage.length; i++) {",
            "calls": []
          },
          {
            "name": "getStorageQuota",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 308,
            "signature": "getStorageQuota() {",
            "calls": []
          },
          {
            "name": "for",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 317,
            "signature": "for (let i = 0; i < 1000; i++) {",
            "calls": []
          },
          {
            "name": "while",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 321,
            "signature": "while (true) {",
            "calls": []
          },
          {
            "name": "cleanupOldData",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 343,
            "signature": "cleanupOldData() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 352,
            "signature": "if (progression.lastUsed && progression.lastUsed < cutoffTime) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 358,
            "signature": "if (cleanedProgressions) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 364,
            "signature": "if (history.length > 50) {",
            "calls": []
          },
          {
            "name": "migrateFromOldVersion",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 375,
            "signature": "migrateFromOldVersion(oldData) {",
            "calls": []
          }
        ],
        "eventHandlers": [],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 387
      },
      "simple-duplicate-check.js": {
        "path": "simple-duplicate-check.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\simple-duplicate-check.js",
        "classes": [],
        "functions": [
          {
            "name": "findJavaScriptFiles",
            "file": "simple-duplicate-check.js",
            "line": 11,
            "signature": "function findJavaScriptFiles(dir) {",
            "calls": []
          },
          {
            "name": "extractMethods",
            "file": "simple-duplicate-check.js",
            "line": 28,
            "signature": "function extractMethods(filePath) {",
            "calls": []
          },
          {
            "name": "checkForDuplicates",
            "file": "simple-duplicate-check.js",
            "line": 77,
            "signature": "function checkForDuplicates() {",
            "calls": []
          }
        ],
        "methods": [],
        "eventHandlers": [],
        "imports": [
          "fs",
          "path"
        ],
        "exports": [],
        "dependencies": [
          "fs",
          "path"
        ],
        "lineCount": 186
      },
      "tests\\test-chord-logic-specialist.js": {
        "path": "tests\\test-chord-logic-specialist.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\tests\\test-chord-logic-specialist.js",
        "classes": [],
        "functions": [],
        "methods": [],
        "eventHandlers": [],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 256
      },
      "tests\\test-duplicate-chord-addition.js": {
        "path": "tests\\test-duplicate-chord-addition.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\tests\\test-duplicate-chord-addition.js",
        "classes": [],
        "functions": [
          {
            "name": "testDuplicateChordAddition",
            "file": "tests\\test-duplicate-chord-addition.js",
            "line": 9,
            "signature": "function testDuplicateChordAddition() {",
            "calls": []
          }
        ],
        "methods": [],
        "eventHandlers": [
          {
            "event": "DOMContentLoaded",
            "handler": "testDuplicateChordAddition",
            "file": "tests\\test-duplicate-chord-addition.js",
            "line": 76,
            "signature": "document.addEventListener('DOMContentLoaded', testDuplicateChordAddition);"
          }
        ],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 83
      },
      "tests\\test-duplicate-fixes.js": {
        "path": "tests\\test-duplicate-fixes.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\tests\\test-duplicate-fixes.js",
        "classes": [],
        "functions": [
          {
            "name": "testDuplicateFixes",
            "file": "tests\\test-duplicate-fixes.js",
            "line": 9,
            "signature": "function testDuplicateFixes() {",
            "calls": []
          },
          {
            "name": "runTestWhenAppReady",
            "file": "tests\\test-duplicate-fixes.js",
            "line": 207,
            "signature": "function runTestWhenAppReady() {",
            "calls": []
          }
        ],
        "methods": [],
        "eventHandlers": [
          {
            "event": "DOMContentLoaded",
            "handler": "(",
            "file": "tests\\test-duplicate-fixes.js",
            "line": 221,
            "signature": "document.addEventListener('DOMContentLoaded', () => {"
          }
        ],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 229
      },
      "tests\\test-duplicate-interaction.js": {
        "path": "tests\\test-duplicate-interaction.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\tests\\test-duplicate-interaction.js",
        "classes": [],
        "functions": [
          {
            "name": "testDuplicateChordInteraction",
            "file": "tests\\test-duplicate-interaction.js",
            "line": 9,
            "signature": "function testDuplicateChordInteraction() {",
            "calls": []
          },
          {
            "name": "getCurrentChordCount",
            "file": "tests\\test-duplicate-interaction.js",
            "line": 29,
            "signature": "function getCurrentChordCount() {",
            "calls": []
          },
          {
            "name": "getCurrentChords",
            "file": "tests\\test-duplicate-interaction.js",
            "line": 35,
            "signature": "function getCurrentChords() {",
            "calls": []
          }
        ],
        "methods": [],
        "eventHandlers": [],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 126
      },
      "tests\\test-event-audit-integration.js": {
        "path": "tests\\test-event-audit-integration.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\tests\\test-event-audit-integration.js",
        "classes": [],
        "functions": [
          {
            "name": "testEventAuditIntegration",
            "file": "tests\\test-event-audit-integration.js",
            "line": 10,
            "signature": "function testEventAuditIntegration() {",
            "calls": []
          },
          {
            "name": "runTest2",
            "file": "tests\\test-event-audit-integration.js",
            "line": 86,
            "signature": "function runTest2() {",
            "calls": []
          },
          {
            "name": "runTest3",
            "file": "tests\\test-event-audit-integration.js",
            "line": 138,
            "signature": "function runTest3() {",
            "calls": []
          },
          {
            "name": "runTest4",
            "file": "tests\\test-event-audit-integration.js",
            "line": 184,
            "signature": "function runTest4() {",
            "calls": []
          },
          {
            "name": "runTest5",
            "file": "tests\\test-event-audit-integration.js",
            "line": 226,
            "signature": "function runTest5() {",
            "calls": []
          },
          {
            "name": "finishTests",
            "file": "tests\\test-event-audit-integration.js",
            "line": 265,
            "signature": "function finishTests() {",
            "calls": []
          },
          {
            "name": "testSpecificWorkflow",
            "file": "tests\\test-event-audit-integration.js",
            "line": 283,
            "signature": "function testSpecificWorkflow(workflowName) {",
            "calls": []
          },
          {
            "name": "testChordInputWorkflow",
            "file": "tests\\test-event-audit-integration.js",
            "line": 301,
            "signature": "function testChordInputWorkflow() {",
            "calls": []
          },
          {
            "name": "runEventAuditTestWhenReady",
            "file": "tests\\test-event-audit-integration.js",
            "line": 335,
            "signature": "function runEventAuditTestWhenReady() {",
            "calls": []
          }
        ],
        "methods": [],
        "eventHandlers": [
          {
            "event": "DOMContentLoaded",
            "handler": "(",
            "file": "tests\\test-event-audit-integration.js",
            "line": 351,
            "signature": "document.addEventListener('DOMContentLoaded', () => {"
          }
        ],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 363
      },
      "tests\\test-fuzzy-matching.js": {
        "path": "tests\\test-fuzzy-matching.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\tests\\test-fuzzy-matching.js",
        "classes": [],
        "functions": [
          {
            "name": "testFuzzyChordMatching",
            "file": "tests\\test-fuzzy-matching.js",
            "line": 9,
            "signature": "function testFuzzyChordMatching() {",
            "calls": []
          },
          {
            "name": "testNormalizationOnly",
            "file": "tests\\test-fuzzy-matching.js",
            "line": 90,
            "signature": "function testNormalizationOnly() {",
            "calls": []
          },
          {
            "name": "testChordInput",
            "file": "tests\\test-fuzzy-matching.js",
            "line": 120,
            "signature": "function testChordInput(input) {",
            "calls": []
          },
          {
            "name": "runFuzzyTestWhenReady",
            "file": "tests\\test-fuzzy-matching.js",
            "line": 145,
            "signature": "function runFuzzyTestWhenReady() {",
            "calls": []
          }
        ],
        "methods": [],
        "eventHandlers": [
          {
            "event": "DOMContentLoaded",
            "handler": "(",
            "file": "tests\\test-fuzzy-matching.js",
            "line": 161,
            "signature": "document.addEventListener('DOMContentLoaded', () => {"
          }
        ],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 173
      },
      "tests\\test-input-flow-debug.js": {
        "path": "tests\\test-input-flow-debug.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\tests\\test-input-flow-debug.js",
        "classes": [],
        "functions": [
          {
            "name": "addInputFlowDebugging",
            "file": "tests\\test-input-flow-debug.js",
            "line": 8,
            "signature": "function addInputFlowDebugging() {",
            "calls": []
          }
        ],
        "methods": [],
        "eventHandlers": [
          {
            "event": "input",
            "handler": "(e",
            "file": "tests\\test-input-flow-debug.js",
            "line": 22,
            "signature": "textInput.addEventListener('input', (e) => {"
          },
          {
            "event": "keydown",
            "handler": "(e",
            "file": "tests\\test-input-flow-debug.js",
            "line": 26,
            "signature": "textInput.addEventListener('keydown', (e) => {"
          },
          {
            "event": "keyup",
            "handler": "(e",
            "file": "tests\\test-input-flow-debug.js",
            "line": 30,
            "signature": "textInput.addEventListener('keyup', (e) => {"
          },
          {
            "event": "focus",
            "handler": "(e",
            "file": "tests\\test-input-flow-debug.js",
            "line": 34,
            "signature": "textInput.addEventListener('focus', (e) => {"
          },
          {
            "event": "blur",
            "handler": "(e",
            "file": "tests\\test-input-flow-debug.js",
            "line": 38,
            "signature": "textInput.addEventListener('blur', (e) => {"
          },
          {
            "event": "DOMContentLoaded",
            "handler": "(",
            "file": "tests\\test-input-flow-debug.js",
            "line": 132,
            "signature": "document.addEventListener('DOMContentLoaded', () => {"
          }
        ],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 138
      },
      "tests\\test-integration.js": {
        "path": "tests\\test-integration.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\tests\\test-integration.js",
        "classes": [],
        "functions": [
          {
            "name": "testIntegration",
            "file": "tests\\test-integration.js",
            "line": 6,
            "signature": "function testIntegration() {",
            "calls": []
          },
          {
            "name": "runTestWhenReady",
            "file": "tests\\test-integration.js",
            "line": 104,
            "signature": "function runTestWhenReady(attempts = 0, maxAttempts = 20) {",
            "calls": []
          }
        ],
        "methods": [],
        "eventHandlers": [
          {
            "event": "DOMContentLoaded",
            "handler": "(",
            "file": "tests\\test-integration.js",
            "line": 117,
            "signature": "document.addEventListener('DOMContentLoaded', () => {"
          }
        ],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 126
      },
      "tests\\test-normalization-fix.js": {
        "path": "tests\\test-normalization-fix.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\tests\\test-normalization-fix.js",
        "classes": [],
        "functions": [
          {
            "name": "testChordNormalizationFix",
            "file": "tests\\test-normalization-fix.js",
            "line": 9,
            "signature": "function testChordNormalizationFix() {",
            "calls": []
          },
          {
            "name": "testSpecificInput",
            "file": "tests\\test-normalization-fix.js",
            "line": 153,
            "signature": "function testSpecificInput(input) {",
            "calls": []
          },
          {
            "name": "runNormalizationTestWhenReady",
            "file": "tests\\test-normalization-fix.js",
            "line": 192,
            "signature": "function runNormalizationTestWhenReady() {",
            "calls": []
          }
        ],
        "methods": [],
        "eventHandlers": [
          {
            "event": "DOMContentLoaded",
            "handler": "(",
            "file": "tests\\test-normalization-fix.js",
            "line": 207,
            "signature": "document.addEventListener('DOMContentLoaded', () => {"
          }
        ],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 218
      },
      "tests\\test-suggestion-panel-fix.js": {
        "path": "tests\\test-suggestion-panel-fix.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\tests\\test-suggestion-panel-fix.js",
        "classes": [],
        "functions": [],
        "methods": [],
        "eventHandlers": [],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 91
      },
      "tests\\test-transcription-debug.js": {
        "path": "tests\\test-transcription-debug.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\tests\\test-transcription-debug.js",
        "classes": [],
        "functions": [
          {
            "name": "runTranscriptionDebugTest",
            "file": "tests\\test-transcription-debug.js",
            "line": 9,
            "signature": "function runTranscriptionDebugTest() {",
            "calls": []
          }
        ],
        "methods": [],
        "eventHandlers": [
          {
            "event": "DOMContentLoaded",
            "handler": "(",
            "file": "tests\\test-transcription-debug.js",
            "line": 131,
            "signature": "document.addEventListener('DOMContentLoaded', () => {"
          }
        ],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 137
      },
      "tests\\test-transcription-end-to-end.js": {
        "path": "tests\\test-transcription-end-to-end.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\tests\\test-transcription-end-to-end.js",
        "classes": [],
        "functions": [
          {
            "name": "runEndToEndTest",
            "file": "tests\\test-transcription-end-to-end.js",
            "line": 8,
            "signature": "function runEndToEndTest() {",
            "calls": []
          }
        ],
        "methods": [],
        "eventHandlers": [
          {
            "event": "DOMContentLoaded",
            "handler": "(",
            "file": "tests\\test-transcription-end-to-end.js",
            "line": 143,
            "signature": "document.addEventListener('DOMContentLoaded', () => {"
          }
        ],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 149
      },
      "webapp.js": {
        "path": "webapp.js",
        "fullPath": "C:\\Users\\hayle\\OneDrive\\Documentos\\GitHub\\Resume Website\\projects\\autoharp-transposer\\webapp.js",
        "classes": [],
        "functions": [
          {
            "name": "parseChordString",
            "file": "webapp.js",
            "line": 37,
            "signature": "function parseChordString(chordString) {",
            "calls": []
          },
          {
            "name": "initializeAutoharpTypeListeners",
            "file": "webapp.js",
            "line": 81,
            "signature": "function initializeAutoharpTypeListeners() {",
            "calls": []
          },
          {
            "name": "onAutoharpTypeChanged",
            "file": "webapp.js",
            "line": 88,
            "signature": "function onAutoharpTypeChanged(event) {",
            "calls": []
          },
          {
            "name": "renderAvailableChords",
            "file": "webapp.js",
            "line": 120,
            "signature": "function renderAvailableChords(chordList) {",
            "calls": []
          },
          {
            "name": "initializeDOMReferences",
            "file": "webapp.js",
            "line": 145,
            "signature": "function initializeDOMReferences() {",
            "calls": []
          },
          {
            "name": "initializeChordInputListener",
            "file": "webapp.js",
            "line": 155,
            "signature": "function initializeChordInputListener() {",
            "calls": []
          },
          {
            "name": "selectChordName",
            "file": "webapp.js",
            "line": 164,
            "signature": "function selectChordName(chordName) {",
            "calls": []
          },
          {
            "name": "selectChordType",
            "file": "webapp.js",
            "line": 198,
            "signature": "function selectChordType(chordType) {",
            "calls": []
          },
          {
            "name": "tryAddChord",
            "file": "webapp.js",
            "line": 232,
            "signature": "function tryAddChord() {",
            "calls": []
          },
          {
            "name": "resetChordSelection",
            "file": "webapp.js",
            "line": 243,
            "signature": "function resetChordSelection() {",
            "calls": []
          },
          {
            "name": "formatChordName",
            "file": "webapp.js",
            "line": 261,
            "signature": "function formatChordName(chordName, chordType) {",
            "calls": []
          },
          {
            "name": "addChordFromButton",
            "file": "webapp.js",
            "line": 283,
            "signature": "function addChordFromButton(chordValue) {",
            "calls": []
          },
          {
            "name": "appendChord",
            "file": "webapp.js",
            "line": 290,
            "signature": "function appendChord(chord) {",
            "calls": []
          },
          {
            "name": "removeChord",
            "file": "webapp.js",
            "line": 309,
            "signature": "function removeChord(button) {",
            "calls": []
          },
          {
            "name": "getInputChords",
            "file": "webapp.js",
            "line": 319,
            "signature": "function getInputChords() {",
            "calls": []
          },
          {
            "name": "initializeDragAndDrop",
            "file": "webapp.js",
            "line": 334,
            "signature": "function initializeDragAndDrop() {",
            "calls": []
          },
          {
            "name": "addDragListeners",
            "file": "webapp.js",
            "line": 340,
            "signature": "function addDragListeners(draggable) {",
            "calls": []
          },
          {
            "name": "handleDragStart",
            "file": "webapp.js",
            "line": 353,
            "signature": "function handleDragStart(e) {",
            "calls": []
          },
          {
            "name": "handleDragOver",
            "file": "webapp.js",
            "line": 360,
            "signature": "function handleDragOver(e) {",
            "calls": []
          },
          {
            "name": "handleDrop",
            "file": "webapp.js",
            "line": 374,
            "signature": "function handleDrop() {",
            "calls": []
          },
          {
            "name": "handleDragEnd",
            "file": "webapp.js",
            "line": 378,
            "signature": "function handleDragEnd() {",
            "calls": []
          },
          {
            "name": "getDragAfterElement",
            "file": "webapp.js",
            "line": 387,
            "signature": "function getDragAfterElement(container, x) {",
            "calls": []
          },
          {
            "name": "handleTouchStart",
            "file": "webapp.js",
            "line": 413,
            "signature": "function handleTouchStart(e) {",
            "calls": []
          },
          {
            "name": "handleTouchMove",
            "file": "webapp.js",
            "line": 427,
            "signature": "function handleTouchMove(e) {",
            "calls": []
          },
          {
            "name": "handleTouchEnd",
            "file": "webapp.js",
            "line": 457,
            "signature": "function handleTouchEnd(e) {",
            "calls": []
          },
          {
            "name": "calculateResultingChords",
            "file": "webapp.js",
            "line": 476,
            "signature": "function calculateResultingChords(inputChords) {",
            "calls": []
          },
          {
            "name": "onInputChordsChanged",
            "file": "webapp.js",
            "line": 579,
            "signature": "function onInputChordsChanged() {",
            "calls": []
          }
        ],
        "methods": [],
        "eventHandlers": [
          {
            "event": "change",
            "handler": "onAutoharpTypeChanged",
            "file": "webapp.js",
            "line": 84,
            "signature": "inputType.addEventListener(\"change\", onAutoharpTypeChanged);"
          },
          {
            "event": "animationend",
            "handler": "(",
            "file": "webapp.js",
            "line": 313,
            "signature": "newChord.addEventListener(\"animationend\", () => {"
          },
          {
            "event": "dragstart",
            "handler": "handleDragStart",
            "file": "webapp.js",
            "line": 342,
            "signature": "draggable.addEventListener(\"dragstart\", handleDragStart);"
          },
          {
            "event": "dragover",
            "handler": "handleDragOver",
            "file": "webapp.js",
            "line": 343,
            "signature": "draggable.addEventListener(\"dragover\", handleDragOver);"
          },
          {
            "event": "drop",
            "handler": "handleDrop",
            "file": "webapp.js",
            "line": 344,
            "signature": "draggable.addEventListener(\"drop\", handleDrop);"
          },
          {
            "event": "dragend",
            "handler": "handleDragEnd",
            "file": "webapp.js",
            "line": 345,
            "signature": "draggable.addEventListener(\"dragend\", handleDragEnd);"
          },
          {
            "event": "touchstart",
            "handler": "handleTouchStart",
            "file": "webapp.js",
            "line": 348,
            "signature": "draggable.addEventListener(\"touchstart\", handleTouchStart, { passive: false });"
          },
          {
            "event": "touchmove",
            "handler": "handleTouchMove",
            "file": "webapp.js",
            "line": 349,
            "signature": "draggable.addEventListener(\"touchmove\", handleTouchMove, { passive: false });"
          },
          {
            "event": "touchend",
            "handler": "handleTouchEnd",
            "file": "webapp.js",
            "line": 350,
            "signature": "draggable.addEventListener(\"touchend\", handleTouchEnd);"
          },
          {
            "event": "DOMContentLoaded",
            "handler": "function (",
            "file": "webapp.js",
            "line": 640,
            "signature": "document.addEventListener('DOMContentLoaded', function () {"
          }
        ],
        "imports": [],
        "exports": [],
        "dependencies": [],
        "lineCount": 665
      }
    },
    "classes": {
      "CodebaseMapper": {
        "name": "CodebaseMapper",
        "file": "codebase-mapper.js",
        "line": 11,
        "methods": [
          {
            "name": "constructor",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 12,
            "signature": "constructor(projectPath) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 33,
            "signature": "for (const file of jsFiles) {",
            "calls": []
          },
          {
            "name": "findJavaScriptFiles",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 47,
            "signature": "findJavaScriptFiles(dir) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 51,
            "signature": "for (const entry of entries) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 95,
            "signature": "if (classMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 114,
            "signature": "if (methodMatch && currentClass) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 130,
            "signature": "if (functionMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 144,
            "signature": "if (arrowFunctionMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 159,
            "signature": "if (eventHandlerMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 173,
            "signature": "if (importMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 181,
            "signature": "if (callMatches) {",
            "calls": []
          },
          {
            "name": "buildRelationships",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 199,
            "signature": "buildRelationships() {",
            "calls": []
          },
          {
            "name": "generateReport",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 217,
            "signature": "generateReport() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 230,
            "signature": "if (this.knowledgeGraph.classes.size > 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 234,
            "signature": "if (classInfo.constructor) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 244,
            "signature": "if (this.knowledgeGraph.functions.size > 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 253,
            "signature": "if (this.knowledgeGraph.eventHandlers.size > 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 263,
            "signature": "if (moduleInfo.dependencies.length > 0) {",
            "calls": []
          },
          {
            "name": "exportKnowledgeGraph",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 272,
            "signature": "exportKnowledgeGraph() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "CodebaseMapper",
            "file": "codebase-mapper.js",
            "line": 307,
            "signature": "if (require.main === module) {",
            "calls": []
          }
        ],
        "constructor": {
          "line": 108,
          "signature": "if (currentClass && trimmedLine.includes('constructor(')) {"
        }
      },
      "RobustDuplicateDetector": {
        "name": "RobustDuplicateDetector",
        "file": "detect-duplicates.js",
        "line": 11,
        "methods": [
          {
            "name": "constructor",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 12,
            "signature": "constructor(projectPath) {",
            "calls": []
          },
          {
            "name": "scanProject",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 24,
            "signature": "scanProject() {",
            "calls": []
          },
          {
            "name": "findJavaScriptFiles",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 50,
            "signature": "findJavaScriptFiles(dir) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 56,
            "signature": "for (const entry of entries) {",
            "calls": []
          },
          {
            "name": "scanFile",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 75,
            "signature": "scanFile(filePath) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 118,
            "signature": "if (match) {",
            "calls": []
          },
          {
            "name": "analyzeResults",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 151,
            "signature": "analyzeResults() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 156,
            "signature": "if (definitions.length > 1) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 168,
            "signature": "if (fileDefs.length > 1) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 178,
            "signature": "if (fileGroups.size > 1) {",
            "calls": []
          },
          {
            "name": "findSimilarMethodNames",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 191,
            "signature": "findSimilarMethodNames() {",
            "calls": []
          },
          {
            "name": "for",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 194,
            "signature": "for (let i = 0; i < methodNames.length; i++) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 195,
            "signature": "for (let j = i + 1; j < methodNames.length; j++) {",
            "calls": []
          },
          {
            "name": "areMethodNamesSimilar",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 211,
            "signature": "areMethodNamesSimilar(name1, name2) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 228,
            "signature": "for (const prefix of commonPrefixes) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 231,
            "signature": "if (base1 === base2 && base1 !== lower1 && base2 !== lower2) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 236,
            "signature": "for (const suffix of commonSuffixes) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 239,
            "signature": "if (base1 === base2 && base1 !== lower1 && base2 !== lower2) {",
            "calls": []
          },
          {
            "name": "generateReport",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 247,
            "signature": "generateReport() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 265,
            "signature": "if (this.results.criticalDuplicates.length > 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 278,
            "signature": "if (this.results.crossFileDuplicates.length > 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 291,
            "signature": "if (this.results.similarNames.length > 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 299,
            "signature": "if (this.results.similarNames.length > 10) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 306,
            "signature": "if (this.results.criticalDuplicates.length === 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 308,
            "signature": "if (this.results.crossFileDuplicates.length === 0) {",
            "calls": []
          },
          {
            "name": "outputReport",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 324,
            "signature": "outputReport(reportLines) {",
            "calls": []
          },
          {
            "name": "getResults",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 344,
            "signature": "getResults() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "RobustDuplicateDetector",
            "file": "detect-duplicates.js",
            "line": 350,
            "signature": "if (require.main === module) {",
            "calls": []
          }
        ],
        "constructor": {
          "line": 12,
          "signature": "constructor(projectPath) {"
        }
      },
      "ImprovedCodebaseMapper": {
        "name": "ImprovedCodebaseMapper",
        "file": "improved-codebase-mapper.js",
        "line": 11,
        "methods": [
          {
            "name": "constructor",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 12,
            "signature": "constructor(projectPath) {",
            "calls": []
          },
          {
            "name": "generateKnowledgeGraph",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 32,
            "signature": "generateKnowledgeGraph() {",
            "calls": []
          },
          {
            "name": "findJavaScriptFiles",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 60,
            "signature": "findJavaScriptFiles(dir) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 66,
            "signature": "for (const entry of entries) {",
            "calls": []
          },
          {
            "name": "analyzeFile",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 84,
            "signature": "analyzeFile(filePath) {",
            "calls": []
          },
          {
            "name": "extractClasses",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 104,
            "signature": "extractClasses(lines, fileInfo) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 113,
            "signature": "if (classMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 126,
            "signature": "if (currentClass) {",
            "calls": []
          },
          {
            "name": "extractFunctions",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 146,
            "signature": "extractFunctions(lines, fileInfo) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 153,
            "signature": "if (funcMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 168,
            "signature": "if (arrowMatch) {",
            "calls": []
          },
          {
            "name": "buildMethodIndex",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 183,
            "signature": "buildMethodIndex() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 189,
            "signature": "if (!this.results.methodIndex[methodName]) {",
            "calls": []
          },
          {
            "name": "findDuplicates",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 202,
            "signature": "findDuplicates() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 204,
            "signature": "if (locations.length > 1) {",
            "calls": []
          },
          {
            "name": "updateMetadata",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 213,
            "signature": "updateMetadata() {",
            "calls": []
          },
          {
            "name": "saveResults",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 222,
            "signature": "saveResults() {",
            "calls": []
          },
          {
            "name": "generateSummary",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 232,
            "signature": "generateSummary() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 243,
            "signature": "if (meta.totalClasses > 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 250,
            "signature": "if (meta.duplicatesFound > 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ImprovedCodebaseMapper",
            "file": "improved-codebase-mapper.js",
            "line": 265,
            "signature": "if (require.main === module) {",
            "calls": []
          }
        ],
        "constructor": {
          "line": 12,
          "signature": "constructor(projectPath) {"
        }
      },
      "AutoharpTransposerApp": {
        "name": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 14,
        "methods": [
          {
            "name": "constructor",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 15,
            "signature": "constructor() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 64,
            "signature": "if (window.CHORD_LISTS && integrationBridge.legacyDataReady) {",
            "calls": []
          },
          {
            "name": "connectModules",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 113,
            "signature": "connectModules() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 125,
            "signature": "if (data.source === 'text') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 134,
            "signature": "if (data.current) {",
            "calls": []
          },
          {
            "name": "loadSavedState",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 142,
            "signature": "loadSavedState() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 155,
            "signature": "if (session && session.selectedChords) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 160,
            "signature": "if (preferences.audioEnabled) {",
            "calls": []
          },
          {
            "name": "initializeUI",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 170,
            "signature": "initializeUI() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 172,
            "signature": "if (window.initializeDOMReferences && typeof window.initializeDOMReferences === 'function') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 181,
            "signature": "if (window.chordGroup) {",
            "calls": []
          },
          {
            "name": "updateAutoharpTypeUI",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 193,
            "signature": "updateAutoharpTypeUI() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 196,
            "signature": "if (radio) {",
            "calls": []
          },
          {
            "name": "updateAudioToggleUI",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 204,
            "signature": "updateAudioToggleUI() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 207,
            "signature": "if (toggle) {",
            "calls": []
          },
          {
            "name": "updateSelectedChordsUI",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 213,
            "signature": "updateSelectedChordsUI() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 215,
            "signature": "if (window.initializeDOMReferences && typeof window.initializeDOMReferences === 'function') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 220,
            "signature": "if (window.chordGroup) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 226,
            "signature": "if (window.chordGroup) {",
            "calls": []
          },
          {
            "name": "setupAutoSave",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 233,
            "signature": "setupAutoSave() {",
            "calls": []
          },
          {
            "name": "saveCurrentSession",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 245,
            "signature": "saveCurrentSession() {",
            "calls": []
          },
          {
            "name": "addChord",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 267,
            "signature": "addChord(chord, source = 'api') {",
            "calls": []
          },
          {
            "name": "removeChord",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 276,
            "signature": "removeChord(chord) {",
            "calls": []
          },
          {
            "name": "clearAllChords",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 284,
            "signature": "clearAllChords() {",
            "calls": []
          },
          {
            "name": "getSelectedChords",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 292,
            "signature": "getSelectedChords() {",
            "calls": []
          },
          {
            "name": "setAutoharpType",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 296,
            "signature": "setAutoharpType(type) {",
            "calls": []
          },
          {
            "name": "toggleAudio",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 300,
            "signature": "toggleAudio() {",
            "calls": []
          },
          {
            "name": "getState",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 304,
            "signature": "getState() {",
            "calls": []
          },
          {
            "name": "on",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 309,
            "signature": "on(event, callback) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 310,
            "signature": "if (!this.eventListeners) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 313,
            "signature": "if (!this.eventListeners[event]) {",
            "calls": []
          },
          {
            "name": "emit",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 319,
            "signature": "emit(event, data) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 320,
            "signature": "if (this.eventListeners && this.eventListeners[event]) {",
            "calls": []
          },
          {
            "name": "exportData",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 332,
            "signature": "exportData() {",
            "calls": []
          },
          {
            "name": "importData",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 340,
            "signature": "importData(data) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 341,
            "signature": "if (data.state) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 344,
            "signature": "if (data.storage) {",
            "calls": []
          },
          {
            "name": "getDebugInfo",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 349,
            "signature": "getDebugInfo() {",
            "calls": []
          },
          {
            "name": "destroy",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 361,
            "signature": "destroy() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 367,
            "signature": "if (this.modules.audioManager) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 372,
            "signature": "if (this.autoSaveInterval) {",
            "calls": []
          },
          {
            "name": "handleInitializationError",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 382,
            "signature": "handleInitializationError(error) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 404,
            "signature": "if (appInstance) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTransposerApp",
            "file": "modules\\appIntegration.js",
            "line": 418,
            "signature": "if (document.readyState === 'loading') {",
            "calls": []
          }
        ],
        "constructor": {
          "line": 15,
          "signature": "constructor() {"
        }
      },
      "AutoharpTypes": {
        "name": "AutoharpTypes",
        "file": "modules\\autoharpTypes.js",
        "line": 11,
        "methods": [
          {
            "name": "constructor",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 12,
            "signature": "constructor() {",
            "calls": []
          },
          {
            "name": "getAvailableTypes",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 83,
            "signature": "getAvailableTypes() {",
            "calls": []
          },
          {
            "name": "getType",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 92,
            "signature": "getType(type) {",
            "calls": []
          },
          {
            "name": "getAllChords",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 101,
            "signature": "getAllChords(type) {",
            "calls": []
          },
          {
            "name": "getChordsByCategory",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 118,
            "signature": "getChordsByCategory(type, category) {",
            "calls": []
          },
          {
            "name": "getIntervals",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 131,
            "signature": "getIntervals(type, category) {",
            "calls": []
          },
          {
            "name": "isChordAvailable",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 144,
            "signature": "isChordAvailable(chord, type) {",
            "calls": []
          },
          {
            "name": "getTypeInfo",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 156,
            "signature": "getTypeInfo(type) {",
            "calls": []
          },
          {
            "name": "getCompatibilityMatrix",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 172,
            "signature": "getCompatibilityMatrix(chords) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 176,
            "signature": "for (const chord of chords) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 178,
            "signature": "for (const type of types) {",
            "calls": []
          },
          {
            "name": "findBestAutoharpType",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 191,
            "signature": "findBestAutoharpType(chords) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 201,
            "signature": "for (const type of types) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 205,
            "signature": "for (const chord of chords) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "AutoharpTypes",
            "file": "modules\\autoharpTypes.js",
            "line": 215,
            "signature": "if (coverage > bestMatch.coverage) {",
            "calls": []
          }
        ],
        "constructor": {
          "line": 12,
          "signature": "constructor() {"
        }
      },
      "ChordAudioManager": {
        "name": "ChordAudioManager",
        "file": "modules\\chordAudio.js",
        "line": 6,
        "methods": [
          {
            "name": "constructor",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 7,
            "signature": "constructor() {",
            "calls": []
          },
          {
            "name": "initializeAudioContext",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 15,
            "signature": "initializeAudioContext() {",
            "calls": []
          },
          {
            "name": "toggleSound",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 27,
            "signature": "toggleSound() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 30,
            "signature": "if (soundToggle) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 36,
            "signature": "if (this.soundEnabled && this.audioContext && this.audioContext.state === 'suspended') {",
            "calls": []
          },
          {
            "name": "playChord",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 43,
            "signature": "playChord(chordName) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 44,
            "signature": "if (!this.soundEnabled || !this.audioContext || !chordName) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 80,
            "signature": "if (index > -1) {",
            "calls": []
          },
          {
            "name": "stopAllSounds",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 90,
            "signature": "stopAllSounds() {",
            "calls": []
          },
          {
            "name": "getChordFrequencies",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 101,
            "signature": "getChordFrequencies(chordName) {",
            "calls": []
          },
          {
            "name": "switch",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 120,
            "signature": "switch (parsed.type) {",
            "calls": []
          },
          {
            "name": "parseChordName",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 140,
            "signature": "parseChordName(chordName) {",
            "calls": []
          },
          {
            "name": "destroy",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 160,
            "signature": "destroy() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordAudioManager",
            "file": "modules\\chordAudio.js",
            "line": 162,
            "signature": "if (this.audioContext) {",
            "calls": []
          }
        ],
        "constructor": {
          "line": 7,
          "signature": "constructor() {"
        }
      },
      "ChordParser": {
        "name": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 10,
        "methods": [
          {
            "name": "constructor",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 11,
            "signature": "constructor(availableChords = []) {",
            "calls": []
          },
          {
            "name": "generateAllValidChords",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 31,
            "signature": "generateAllValidChords() {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 62,
            "signature": "for (const root of roots) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 63,
            "signature": "for (const type of chordTypes) {",
            "calls": []
          },
          {
            "name": "updateAvailableChords",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 71,
            "signature": "updateAvailableChords(chords) {",
            "calls": []
          },
          {
            "name": "parseChord",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 82,
            "signature": "parseChord(input) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 92,
            "signature": "if (exactValidMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 97,
            "signature": "if (availableMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 106,
            "signature": "if (normalizedChord) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 111,
            "signature": "if (validNormalizedMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 116,
            "signature": "if (availableNormalizedMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 124,
            "signature": "if (validFuzzyMatches.length > 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 130,
            "signature": "if (availableFuzzyMatch) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 139,
            "signature": "if (originalFuzzyMatches.length > 0) {",
            "calls": []
          },
          {
            "name": "normalizeChordInput",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 151,
            "signature": "normalizeChordInput(input) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 243,
            "signature": "if (remainder) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 270,
            "signature": "if (score > bestScore && score > 0.6) { // Higher threshold for chord types",
            "calls": []
          },
          {
            "name": "getFuzzyMatches",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 286,
            "signature": "getFuzzyMatches(input, maxResults = 5, chordList = null) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 297,
            "signature": "if (score > 0.3) { // Minimum similarity threshold",
            "calls": []
          },
          {
            "name": "getSuggestions",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 308,
            "signature": "getSuggestions(input, maxSuggestions = 5) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 309,
            "signature": "if (!input || input.length < 1) {",
            "calls": []
          },
          {
            "name": "getRootNotePermutations",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 320,
            "signature": "getRootNotePermutations(input, maxSuggestions = 5) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 323,
            "signature": "if (!rootNote) {",
            "calls": []
          },
          {
            "name": "extractRootNote",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 338,
            "signature": "extractRootNote(input) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 356,
            "signature": "if (enharmonicMap[rootNote]) {",
            "calls": []
          },
          {
            "name": "generateChordVariations",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 363,
            "signature": "generateChordVariations(rootNote) {",
            "calls": []
          },
          {
            "name": "filterAndPrioritizeVariations",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 391,
            "signature": "filterAndPrioritizeVariations(variations, input, maxSuggestions) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 400,
            "signature": "if (variationLower === inputLower) {",
            "calls": []
          },
          {
            "name": "validateChord",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 426,
            "signature": "validateChord(chord) {",
            "calls": []
          },
          {
            "name": "calculateSimilarity",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 433,
            "signature": "calculateSimilarity(input, target) {",
            "calls": []
          },
          {
            "name": "levenshteinDistance",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 444,
            "signature": "levenshteinDistance(str1, str2) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 450,
            "signature": "for (let i = 0; i <= len2; i++) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 453,
            "signature": "for (let j = 0; j <= len1; j++) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 458,
            "signature": "for (let i = 1; i <= len2; i++) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 459,
            "signature": "for (let j = 1; j <= len1; j++) {",
            "calls": []
          },
          {
            "name": "soundexMatch",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 475,
            "signature": "soundexMatch(str1, str2) {",
            "calls": []
          },
          {
            "name": "normalizeChordName",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 492,
            "signature": "normalizeChordName(chordName) {",
            "calls": []
          },
          {
            "name": "addToHistory",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 512,
            "signature": "addToHistory(chord) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 517,
            "signature": "if (index > -1) {",
            "calls": []
          },
          {
            "name": "loadChordHistory",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 531,
            "signature": "loadChordHistory() {",
            "calls": []
          },
          {
            "name": "saveChordHistory",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 541,
            "signature": "saveChordHistory() {",
            "calls": []
          },
          {
            "name": "parseAdvancedChord",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 550,
            "signature": "parseAdvancedChord(input) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 563,
            "signature": "for (const variation of variations) {",
            "calls": []
          },
          {
            "name": "getContextualSuggestions",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 572,
            "signature": "getContextualSuggestions(input, recentChords = []) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 576,
            "signature": "if (recentChords.length > 0) {",
            "calls": []
          },
          {
            "name": "getHarmonicallyRelatedChords",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 589,
            "signature": "getHarmonicallyRelatedChords(chord) {",
            "calls": []
          },
          {
            "name": "switch",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 656,
            "signature": "switch (chordType) {",
            "calls": []
          },
          {
            "name": "setAutoharpType",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 685,
            "signature": "setAutoharpType(autoharpType) {",
            "calls": []
          },
          {
            "name": "getCurrentAutoharpType",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 697,
            "signature": "getCurrentAutoharpType() {",
            "calls": []
          },
          {
            "name": "transposeProgression",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 709,
            "signature": "transposeProgression(chords, fromKey, toKey, autoharpType = null) {",
            "calls": []
          },
          {
            "name": "validateChordForAutoharp",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 720,
            "signature": "validateChordForAutoharp(chord, autoharpType = null) {",
            "calls": []
          },
          {
            "name": "getCompatibleChords",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 730,
            "signature": "getCompatibleChords(autoharpType = null) {",
            "calls": []
          },
          {
            "name": "getAutoharpTypeInfo",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 740,
            "signature": "getAutoharpTypeInfo(autoharpType = null) {",
            "calls": []
          },
          {
            "name": "findBestAutoharpType",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 750,
            "signature": "findBestAutoharpType(chords) {",
            "calls": []
          },
          {
            "name": "findOptimalKeys",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 760,
            "signature": "findOptimalKeys(chords, autoharpType = null) {",
            "calls": []
          },
          {
            "name": "simulateCapo",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 772,
            "signature": "simulateCapo(chords, capoFret, autoharpType = null) {",
            "calls": []
          },
          {
            "name": "getCompatibilityMatrix",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 782,
            "signature": "getCompatibilityMatrix(chords) {",
            "calls": []
          },
          {
            "name": "analyzeProgression",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 791,
            "signature": "analyzeProgression(chords) {",
            "calls": []
          },
          {
            "name": "parseChordWithAutoharpInfo",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 801,
            "signature": "parseChordWithAutoharpInfo(input, autoharpType = null) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordParser",
            "file": "modules\\chordParser.js",
            "line": 805,
            "signature": "if (!parsedChord) {",
            "calls": []
          }
        ],
        "constructor": {
          "line": 11,
          "signature": "constructor(availableChords = []) {"
        }
      },
      "ChordTransposition": {
        "name": "ChordTransposition",
        "file": "modules\\chordTransposition.js",
        "line": 12,
        "methods": [
          {
            "name": "constructor",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 13,
            "signature": "constructor() {",
            "calls": []
          },
          {
            "name": "transposeChord",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 38,
            "signature": "transposeChord(chord, semitones) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 53,
            "signature": "if (rootIndex === -1 && this.enharmonicMap[rootNote]) {",
            "calls": []
          },
          {
            "name": "calculateSemitoneInterval",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 74,
            "signature": "calculateSemitoneInterval(fromKey, toKey) {",
            "calls": []
          },
          {
            "name": "transposeProgression",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 95,
            "signature": "transposeProgression(chords, fromKey, toKey, autoharpType = '21-chord') {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 111,
            "signature": "for (const originalChord of chords) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 114,
            "signature": "if (transposedChord) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 127,
            "signature": "if (isAvailable) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 131,
            "signature": "if (alternatives.length > 0) {",
            "calls": []
          },
          {
            "name": "findAlternativeChords",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 151,
            "signature": "findAlternativeChords(targetChord, autoharpType) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 162,
            "signature": "for (const chord of availableChords) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 185,
            "signature": "if (this.enharmonicMap[rootNote]) {",
            "calls": []
          },
          {
            "name": "simulateCapo",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 203,
            "signature": "simulateCapo(chords, capoFret, autoharpType = '21-chord') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 204,
            "signature": "if (capoFret < 1 || capoFret > 12) {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 218,
            "signature": "for (const chord of chords) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 230,
            "signature": "if (isPlayable) {",
            "calls": []
          },
          {
            "name": "findOptimalKeys",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 247,
            "signature": "findOptimalKeys(chords, autoharpType = '21-chord') {",
            "calls": []
          },
          {
            "name": "for",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 251,
            "signature": "for (let semitones = 0; semitones < 12; semitones++) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 267,
            "signature": "if (b.coverage !== a.coverage) {",
            "calls": []
          },
          {
            "name": "analyzeProgression",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 279,
            "signature": "analyzeProgression(chords) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "ChordTransposition",
            "file": "modules\\chordTransposition.js",
            "line": 311,
            "signature": "if (uniqueChordTypes.size > 3) {",
            "calls": []
          }
        ],
        "constructor": {
          "line": 13,
          "signature": "constructor() {"
        }
      },
      "EventCoordinator": {
        "name": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 6,
        "methods": [
          {
            "name": "constructor",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 7,
            "signature": "constructor(inputManager, stateManager, audioManager) {",
            "calls": []
          },
          {
            "name": "setupEventListeners",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 20,
            "signature": "setupEventListeners() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 22,
            "signature": "if (document.readyState === 'loading') {",
            "calls": []
          },
          {
            "name": "initializeEventListeners",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 29,
            "signature": "initializeEventListeners() {",
            "calls": []
          },
          {
            "name": "setupAutoharpTypeListeners",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 49,
            "signature": "setupAutoharpTypeListeners() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 53,
            "signature": "if (e.target.checked) {",
            "calls": []
          },
          {
            "name": "setupChordButtonListeners",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 60,
            "signature": "setupChordButtonListeners() {",
            "calls": []
          },
          {
            "name": "setupTextInputListeners",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 81,
            "signature": "setupTextInputListeners() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 85,
            "signature": "if (textInput) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 89,
            "signature": "if (this.justSubmitted) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 98,
            "signature": "if (e.key === 'Enter') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 121,
            "signature": "if (suggestionsContainer) {",
            "calls": []
          },
          {
            "name": "setupAudioControlListeners",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 130,
            "signature": "setupAudioControlListeners() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 133,
            "signature": "if (soundToggle) {",
            "calls": []
          },
          {
            "name": "setupUtilityButtonListeners",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 140,
            "signature": "setupUtilityButtonListeners() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 143,
            "signature": "if (addChordBtn) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 151,
            "signature": "if (clearAllBtn) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 159,
            "signature": "if (playAllBtn) {",
            "calls": []
          },
          {
            "name": "setupKeyboardShortcuts",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 166,
            "signature": "setupKeyboardShortcuts() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 169,
            "signature": "if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {",
            "calls": []
          },
          {
            "name": "switch",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 173,
            "signature": "switch (e.key) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 175,
            "signature": "if (e.ctrlKey || e.metaKey) {",
            "calls": []
          },
          {
            "name": "setupStateListeners",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 203,
            "signature": "setupStateListeners() {",
            "calls": []
          },
          {
            "name": "handleAutoharpTypeChange",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 233,
            "signature": "handleAutoharpTypeChange(type) {",
            "calls": []
          },
          {
            "name": "handleChordNameSelection",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 238,
            "signature": "handleChordNameSelection(chordName, button) {",
            "calls": []
          },
          {
            "name": "handleChordTypeSelection",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 248,
            "signature": "handleChordTypeSelection(chordType, button) {",
            "calls": []
          },
          {
            "name": "handleAddChordClick",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 258,
            "signature": "handleAddChordClick() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 267,
            "signature": "if (!inputValue) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 277,
            "signature": "if (success) {",
            "calls": []
          },
          {
            "name": "handleRemoveChordClick",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 289,
            "signature": "handleRemoveChordClick(button) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 291,
            "signature": "if (chord) {",
            "calls": []
          },
          {
            "name": "handlePlayAll",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 300,
            "signature": "handlePlayAll() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 304,
            "signature": "if (!selectedChords || selectedChords.length === 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 312,
            "signature": "if (!this.audioManager) {",
            "calls": []
          },
          {
            "name": "handleTextInputFocus",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 330,
            "signature": "handleTextInputFocus() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 332,
            "signature": "if (input && input.value) {",
            "calls": []
          },
          {
            "name": "handleSuggestionClick",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 337,
            "signature": "handleSuggestionClick(chord) {",
            "calls": []
          },
          {
            "name": "handleTextInput",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 348,
            "signature": "handleTextInput(inputValue) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 371,
            "signature": "if (validationResult) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 383,
            "signature": "if (suggestions.length > 0) {",
            "calls": []
          },
          {
            "name": "handleTextInputSubmit",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 390,
            "signature": "handleTextInputSubmit(inputValue) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 399,
            "signature": "if (selectedSuggestion) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 409,
            "signature": "if (result.success) {",
            "calls": []
          },
          {
            "name": "clearTextInput",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 424,
            "signature": "clearTextInput() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 427,
            "signature": "if (textInput) {",
            "calls": []
          },
          {
            "name": "showSuggestions",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 439,
            "signature": "showSuggestions(suggestions, inputValue) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 447,
            "signature": "if (suggestions.length === 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 470,
            "signature": "if (index === 0) {",
            "calls": []
          },
          {
            "name": "clearSuggestions",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 484,
            "signature": "clearSuggestions() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 486,
            "signature": "if (container) {",
            "calls": []
          },
          {
            "name": "highlightMatch",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 498,
            "signature": "highlightMatch(suggestion, input) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 499,
            "signature": "if (!input || input.length === 0) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 509,
            "signature": "if (matchIndex === -1) {",
            "calls": []
          },
          {
            "name": "handleSuggestionNavigation",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 522,
            "signature": "handleSuggestionNavigation(key) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 529,
            "signature": "if (currentSelected) {",
            "calls": []
          },
          {
            "name": "handleSoundToggle",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 540,
            "signature": "handleSoundToggle() {",
            "calls": []
          },
          {
            "name": "handleClearAll",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 546,
            "signature": "handleClearAll() {",
            "calls": []
          },
          {
            "name": "updateUI",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 552,
            "signature": "updateUI() {",
            "calls": []
          },
          {
            "name": "updateSelectedChordsDisplay",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 558,
            "signature": "updateSelectedChordsDisplay() {",
            "calls": []
          },
          {
            "name": "updateChordButtons",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 574,
            "signature": "updateChordButtons() {",
            "calls": []
          },
          {
            "name": "updateAvailableChordButtons",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 584,
            "signature": "updateAvailableChordButtons() {",
            "calls": []
          },
          {
            "name": "updateSuggestions",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 594,
            "signature": "updateSuggestions(input) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 595,
            "signature": "if (!input || input.length < 1) {",
            "calls": []
          },
          {
            "name": "updateProgressions",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 610,
            "signature": "updateProgressions() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 614,
            "signature": "if (window.initializeDOMReferences && typeof window.initializeDOMReferences === 'function') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 619,
            "signature": "if (typeof window.onInputChordsChanged === 'function' && window.chordGroup) {",
            "calls": []
          },
          {
            "name": "createChordElement",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 630,
            "signature": "createChordElement(chord, index) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 641,
            "signature": "if (removeBtn) {",
            "calls": []
          },
          {
            "name": "formatChordNameLegacy",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 652,
            "signature": "formatChordNameLegacy(chordName, chordType) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 654,
            "signature": "if (typeof window.formatChordName === 'function') {",
            "calls": []
          },
          {
            "name": "focusTextInput",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 663,
            "signature": "focusTextInput() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 665,
            "signature": "if (input) {",
            "calls": []
          },
          {
            "name": "showMessage",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 673,
            "signature": "showMessage(message, type = 'info') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 675,
            "signature": "if (!messageContainer) {",
            "calls": []
          },
          {
            "name": "removeLastChord",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 690,
            "signature": "removeLastChord() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 692,
            "signature": "if (selectedChords.length > 0) {",
            "calls": []
          },
          {
            "name": "showMessage",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 698,
            "signature": "showMessage(message, type = 'info') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 701,
            "signature": "if (!messageEl) {",
            "calls": []
          },
          {
            "name": "getDebugInfo",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 719,
            "signature": "getDebugInfo() {",
            "calls": []
          },
          {
            "name": "selectChordNameLegacy",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 738,
            "signature": "selectChordNameLegacy(chordName) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 751,
            "signature": "if (btn !== selectedButton) {",
            "calls": []
          },
          {
            "name": "selectChordTypeLegacy",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 766,
            "signature": "selectChordTypeLegacy(chordType) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 779,
            "signature": "if (btn !== selectedButton) {",
            "calls": []
          },
          {
            "name": "tryAddChordLegacy",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 793,
            "signature": "tryAddChordLegacy() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 794,
            "signature": "if (window.selectedChordName && window.selectedChordType) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 796,
            "signature": "if (typeof window.appendChord === 'function') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 799,
            "signature": "if (typeof window.onInputChordsChanged === 'function') {",
            "calls": []
          },
          {
            "name": "resetChordSelectionLegacy",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 810,
            "signature": "resetChordSelectionLegacy() {",
            "calls": []
          },
          {
            "name": "initializeChordInputListenerLegacy",
            "class": "EventCoordinator",
            "file": "modules\\eventCoordinator.js",
            "line": 824,
            "signature": "initializeChordInputListenerLegacy() {",
            "calls": []
          }
        ],
        "constructor": {
          "line": 7,
          "signature": "constructor(inputManager, stateManager, audioManager) {"
        }
      },
      "InputManager": {
        "name": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 6,
        "methods": [
          {
            "name": "constructor",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 7,
            "signature": "constructor(audioManager, chordParser) {",
            "calls": []
          },
          {
            "name": "on",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 19,
            "signature": "on(event, callback) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 20,
            "signature": "if (this.callbacks[event]) {",
            "calls": []
          },
          {
            "name": "emit",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 25,
            "signature": "emit(event, data) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 26,
            "signature": "if (this.callbacks[event]) {",
            "calls": []
          },
          {
            "name": "addChord",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 38,
            "signature": "addChord(chord, source = 'unknown') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 41,
            "signature": "if (!chord) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 48,
            "signature": "if (!normalizedChord) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 77,
            "signature": "if (this.audioManager && this.audioManager.soundEnabled) {",
            "calls": []
          },
          {
            "name": "removeChord",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 94,
            "signature": "removeChord(chord) {",
            "calls": []
          },
          {
            "name": "removeChordAt",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 107,
            "signature": "removeChordAt(index) {",
            "calls": []
          },
          {
            "name": "clearAll",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 120,
            "signature": "clearAll() {",
            "calls": []
          },
          {
            "name": "getSelectedChords",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 131,
            "signature": "getSelectedChords() {",
            "calls": []
          },
          {
            "name": "hasChord",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 135,
            "signature": "hasChord(chord) {",
            "calls": []
          },
          {
            "name": "getChordCount",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 139,
            "signature": "getChordCount() {",
            "calls": []
          },
          {
            "name": "isValidChordFormat",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 144,
            "signature": "isValidChordFormat(chord) {",
            "calls": []
          },
          {
            "name": "processTextInput",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 158,
            "signature": "processTextInput(input) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 167,
            "signature": "if (parsedChord) {",
            "calls": []
          },
          {
            "name": "getSuggestions",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 188,
            "signature": "getSuggestions(input, maxSuggestions = 5) {",
            "calls": []
          },
          {
            "name": "reorderChords",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 193,
            "signature": "reorderChords(fromIndex, toIndex) {",
            "calls": []
          },
          {
            "name": "updateAvailableChords",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 213,
            "signature": "updateAvailableChords(chords) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 221,
            "signature": "if (validChords.length !== this.selectedChords.length) {",
            "calls": []
          },
          {
            "name": "addChords",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 242,
            "signature": "addChords(chords, source = 'batch') {",
            "calls": []
          },
          {
            "name": "replaceChords",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 251,
            "signature": "replaceChords(chords, source = 'replace') {",
            "calls": []
          },
          {
            "name": "exportState",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 257,
            "signature": "exportState() {",
            "calls": []
          },
          {
            "name": "importState",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 264,
            "signature": "importState(state) {",
            "calls": []
          },
          {
            "name": "validateAllSelected",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 274,
            "signature": "validateAllSelected() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 279,
            "signature": "if (invalidChords.length > 0) {",
            "calls": []
          },
          {
            "name": "getDebugInfo",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 288,
            "signature": "getDebugInfo() {",
            "calls": []
          },
          {
            "name": "getInputChordsLegacy",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 306,
            "signature": "getInputChordsLegacy() {",
            "calls": []
          },
          {
            "name": "appendChordLegacy",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 316,
            "signature": "appendChordLegacy(chord) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 332,
            "signature": "if (typeof window.addDragListeners === 'function') {",
            "calls": []
          },
          {
            "name": "removeChordLegacy",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 342,
            "signature": "removeChordLegacy(button) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 354,
            "signature": "if (typeof window.onInputChordsChanged === 'function') {",
            "calls": []
          },
          {
            "name": "addChordFromButtonLegacy",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 365,
            "signature": "addChordFromButtonLegacy(chordValue) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 366,
            "signature": "if (chordValue) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "InputManager",
            "file": "modules\\inputManager.js",
            "line": 369,
            "signature": "if (typeof window.onInputChordsChanged === 'function') {",
            "calls": []
          }
        ],
        "constructor": {
          "line": 7,
          "signature": "constructor(audioManager, chordParser) {"
        }
      },
      "IntegrationBridge": {
        "name": "IntegrationBridge",
        "file": "modules\\integrationBridge.js",
        "line": 6,
        "methods": [
          {
            "name": "constructor",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 7,
            "signature": "constructor() {",
            "calls": []
          },
          {
            "name": "setupLegacyDataWatcher",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 16,
            "signature": "setupLegacyDataWatcher() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 18,
            "signature": "if (window.CHORD_LISTS) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 25,
            "signature": "if (window.CHORD_LISTS) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 34,
            "signature": "if (!this.legacyDataReady) {",
            "calls": []
          },
          {
            "name": "onLegacyDataReady",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 41,
            "signature": "onLegacyDataReady() {",
            "calls": []
          },
          {
            "name": "checkReadiness",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 49,
            "signature": "checkReadiness() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 50,
            "signature": "if (this.legacyDataReady) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 52,
            "signature": "if (this.readyCallbacks && this.readyCallbacks.length > 0) {",
            "calls": []
          },
          {
            "name": "setModuleSystemReady",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 70,
            "signature": "setModuleSystemReady() {",
            "calls": []
          },
          {
            "name": "useFallbackChordData",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 75,
            "signature": "useFallbackChordData() {",
            "calls": []
          },
          {
            "name": "setModuleSystemReady",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 95,
            "signature": "setModuleSystemReady() {",
            "calls": []
          },
          {
            "name": "checkReadiness",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 100,
            "signature": "checkReadiness() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 101,
            "signature": "if (this.legacyDataReady && this.moduleSystemReady) {",
            "calls": []
          },
          {
            "name": "onReady",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 106,
            "signature": "onReady(callback) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 107,
            "signature": "if (this.legacyDataReady && this.moduleSystemReady) {",
            "calls": []
          },
          {
            "name": "executePendingCallbacks",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 114,
            "signature": "executePendingCallbacks() {",
            "calls": []
          },
          {
            "name": "getAvailableChordsForType",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 125,
            "signature": "getAvailableChordsForType(type) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 126,
            "signature": "if (!this.chordLists) {",
            "calls": []
          },
          {
            "name": "switch",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 131,
            "signature": "switch (type) {",
            "calls": []
          },
          {
            "name": "bridgeLegacyFunctions",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 158,
            "signature": "bridgeLegacyFunctions(app) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 162,
            "signature": "if (window.selectChordName) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 174,
            "signature": "if (window.selectChordType) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 187,
            "signature": "if (window.onChordTypeChanged) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 193,
            "signature": "if (selectedType) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 200,
            "signature": "if (window.onInputChordsChanged) {",
            "calls": []
          },
          {
            "name": "getCurrentAutoharpType",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 212,
            "signature": "getCurrentAutoharpType() {",
            "calls": []
          },
          {
            "name": "getCurrentSelectedChords",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 218,
            "signature": "getCurrentSelectedChords() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 220,
            "signature": "if (window.initializeDOMReferences && typeof window.initializeDOMReferences === 'function') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 225,
            "signature": "if (window.getInputChords && typeof window.getInputChords === 'function' && window.chordGroup) {",
            "calls": []
          },
          {
            "name": "syncLegacyToNewSystem",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 242,
            "signature": "syncLegacyToNewSystem(app) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 252,
            "signature": "if (currentChords.length > 0) {",
            "calls": []
          },
          {
            "name": "syncNewSystemToLegacy",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 263,
            "signature": "syncNewSystemToLegacy(app) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "IntegrationBridge",
            "file": "modules\\integrationBridge.js",
            "line": 270,
            "signature": "if (window.renderInputChords && typeof window.renderInputChords === 'function') {",
            "calls": []
          }
        ],
        "constructor": {
          "line": 7,
          "signature": "constructor() {"
        }
      },
      "StateManager": {
        "name": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 6,
        "methods": [
          {
            "name": "constructor",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 7,
            "signature": "constructor() {",
            "calls": []
          },
          {
            "name": "initializeAvailableChords",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 32,
            "signature": "initializeAvailableChords() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 35,
            "signature": "if (chords && chords.length > 0) {",
            "calls": []
          },
          {
            "name": "subscribe",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 48,
            "signature": "subscribe(event, callback) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 49,
            "signature": "if (!this.listeners[event]) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 57,
            "signature": "if (index > -1) {",
            "calls": []
          },
          {
            "name": "emit",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 63,
            "signature": "emit(event, data) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 64,
            "signature": "if (this.listeners[event]) {",
            "calls": []
          },
          {
            "name": "getState",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 76,
            "signature": "getState() {",
            "calls": []
          },
          {
            "name": "get",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 80,
            "signature": "get(key) {",
            "calls": []
          },
          {
            "name": "setState",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 85,
            "signature": "setState(updates) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 91,
            "signature": "if (previousState[key] !== this.state[key]) {",
            "calls": []
          },
          {
            "name": "set",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 109,
            "signature": "set(key, value) {",
            "calls": []
          },
          {
            "name": "updateAutoharpType",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 114,
            "signature": "updateAutoharpType(type) {",
            "calls": []
          },
          {
            "name": "updateSelectedChords",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 127,
            "signature": "updateSelectedChords(chords) {",
            "calls": []
          },
          {
            "name": "addSelectedChord",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 131,
            "signature": "addSelectedChord(chord) {",
            "calls": []
          },
          {
            "name": "removeSelectedChord",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 138,
            "signature": "removeSelectedChord(chord) {",
            "calls": []
          },
          {
            "name": "clearSelectedChords",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 143,
            "signature": "clearSelectedChords() {",
            "calls": []
          },
          {
            "name": "updateProgressions",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 152,
            "signature": "updateProgressions(progressions) {",
            "calls": []
          },
          {
            "name": "updateSuggestions",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 156,
            "signature": "updateSuggestions(suggestions) {",
            "calls": []
          },
          {
            "name": "toggleAudio",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 160,
            "signature": "toggleAudio() {",
            "calls": []
          },
          {
            "name": "setInputMode",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 165,
            "signature": "setInputMode(mode) {",
            "calls": []
          },
          {
            "name": "updateCurrentChord",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 171,
            "signature": "updateCurrentChord(chordName, chordType) {",
            "calls": []
          },
          {
            "name": "getAvailableChordsForType",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 179,
            "signature": "getAvailableChordsForType(type) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 181,
            "signature": "if (window.integrationBridge) {",
            "calls": []
          },
          {
            "name": "switch",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 188,
            "signature": "switch (type) {",
            "calls": []
          },
          {
            "name": "isChordAvailable",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 214,
            "signature": "isChordAvailable(chord) {",
            "calls": []
          },
          {
            "name": "isChordSelected",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 218,
            "signature": "isChordSelected(chord) {",
            "calls": []
          },
          {
            "name": "getSelectedChordCount",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 222,
            "signature": "getSelectedChordCount() {",
            "calls": []
          },
          {
            "name": "saveToStorage",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 227,
            "signature": "saveToStorage() {",
            "calls": []
          },
          {
            "name": "loadFromStorage",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 241,
            "signature": "loadFromStorage() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 244,
            "signature": "if (stored) {",
            "calls": []
          },
          {
            "name": "clearStorage",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 261,
            "signature": "clearStorage() {",
            "calls": []
          },
          {
            "name": "validateState",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 270,
            "signature": "validateState() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 273,
            "signature": "if (!this.state.autoharpType) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 290,
            "signature": "if (invalidChords.length > 0) {",
            "calls": []
          },
          {
            "name": "reset",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 301,
            "signature": "reset() {",
            "calls": []
          },
          {
            "name": "getDebugInfo",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 321,
            "signature": "getDebugInfo() {",
            "calls": []
          },
          {
            "name": "exportState",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 334,
            "signature": "exportState() {",
            "calls": []
          },
          {
            "name": "importState",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 342,
            "signature": "importState(exportedState) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 343,
            "signature": "if (!exportedState || typeof exportedState !== 'object') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StateManager",
            "file": "modules\\stateManager.js",
            "line": 348,
            "signature": "if (!exportedState.autoharpType) {",
            "calls": []
          }
        ],
        "constructor": {
          "line": 7,
          "signature": "constructor() {"
        }
      },
      "StorageManager": {
        "name": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 6,
        "methods": [
          {
            "name": "constructor",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 7,
            "signature": "constructor() {",
            "calls": []
          },
          {
            "name": "save",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 13,
            "signature": "save(key, data) {",
            "calls": []
          },
          {
            "name": "load",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 28,
            "signature": "load(key, defaultValue = null) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 36,
            "signature": "if (storageData.version !== this.version) {",
            "calls": []
          },
          {
            "name": "remove",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 48,
            "signature": "remove(key) {",
            "calls": []
          },
          {
            "name": "exists",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 58,
            "signature": "exists(key) {",
            "calls": []
          },
          {
            "name": "savePreferences",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 63,
            "signature": "savePreferences(preferences) {",
            "calls": []
          },
          {
            "name": "loadPreferences",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 72,
            "signature": "loadPreferences() {",
            "calls": []
          },
          {
            "name": "saveChordHistory",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 84,
            "signature": "saveChordHistory(chords) {",
            "calls": []
          },
          {
            "name": "loadChordHistory",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 90,
            "signature": "loadChordHistory() {",
            "calls": []
          },
          {
            "name": "addToChordHistory",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 94,
            "signature": "addToChordHistory(chord) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 101,
            "signature": "if (index > -1) {",
            "calls": []
          },
          {
            "name": "saveChordProgression",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 111,
            "signature": "saveChordProgression(name, progression) {",
            "calls": []
          },
          {
            "name": "loadChordProgressions",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 124,
            "signature": "loadChordProgressions() {",
            "calls": []
          },
          {
            "name": "deleteChordProgression",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 128,
            "signature": "deleteChordProgression(name) {",
            "calls": []
          },
          {
            "name": "updateProgressionLastUsed",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 134,
            "signature": "updateProgressionLastUsed(name) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 136,
            "signature": "if (progressions[name]) {",
            "calls": []
          },
          {
            "name": "saveSession",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 144,
            "signature": "saveSession(sessionData) {",
            "calls": []
          },
          {
            "name": "loadSession",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 152,
            "signature": "loadSession() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 156,
            "signature": "if (session && session.timestamp) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 158,
            "signature": "if (hoursSinceSession > 24) {",
            "calls": []
          },
          {
            "name": "clearSession",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 167,
            "signature": "clearSession() {",
            "calls": []
          },
          {
            "name": "saveUsageStats",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 172,
            "signature": "saveUsageStats(stats) {",
            "calls": []
          },
          {
            "name": "loadUsageStats",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 182,
            "signature": "loadUsageStats() {",
            "calls": []
          },
          {
            "name": "incrementStat",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 195,
            "signature": "incrementStat(statName, value = 1) {",
            "calls": []
          },
          {
            "name": "incrementChordUsage",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 201,
            "signature": "incrementChordUsage(chord) {",
            "calls": []
          },
          {
            "name": "exportAllData",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 209,
            "signature": "exportAllData() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 220,
            "signature": "if (data !== null) {",
            "calls": []
          },
          {
            "name": "importAllData",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 232,
            "signature": "importAllData(importData) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 233,
            "signature": "if (!importData || typeof importData !== 'object') {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 238,
            "signature": "if (importData.version && importData.version !== this.version) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 251,
            "signature": "if (importData[key]) {",
            "calls": []
          },
          {
            "name": "clearAllData",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 260,
            "signature": "clearAllData() {",
            "calls": []
          },
          {
            "name": "getStorageInfo",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 277,
            "signature": "getStorageInfo() {",
            "calls": []
          },
          {
            "name": "for",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 283,
            "signature": "for (let i = 0; i < localStorage.length; i++) {",
            "calls": []
          },
          {
            "name": "getStorageQuota",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 308,
            "signature": "getStorageQuota() {",
            "calls": []
          },
          {
            "name": "for",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 317,
            "signature": "for (let i = 0; i < 1000; i++) {",
            "calls": []
          },
          {
            "name": "while",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 321,
            "signature": "while (true) {",
            "calls": []
          },
          {
            "name": "cleanupOldData",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 343,
            "signature": "cleanupOldData() {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 352,
            "signature": "if (progression.lastUsed && progression.lastUsed < cutoffTime) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 358,
            "signature": "if (cleanedProgressions) {",
            "calls": []
          },
          {
            "name": "if",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 364,
            "signature": "if (history.length > 50) {",
            "calls": []
          },
          {
            "name": "migrateFromOldVersion",
            "class": "StorageManager",
            "file": "modules\\storageManager.js",
            "line": 375,
            "signature": "migrateFromOldVersion(oldData) {",
            "calls": []
          }
        ],
        "constructor": {
          "line": 7,
          "signature": "constructor() {"
        }
      }
    },
    "functions": {
      "initializeApp": {
        "name": "initializeApp",
        "file": "modules\\appIntegration.js",
        "line": 403,
        "signature": "function initializeApp() {",
        "calls": []
      },
      "normalize": {
        "name": "normalize",
        "file": "modules\\chordParser.js",
        "line": 477,
        "signature": "const normalize = (str) => {",
        "type": "arrow/assigned",
        "calls": []
      },
      "findJavaScriptFiles": {
        "name": "findJavaScriptFiles",
        "file": "simple-duplicate-check.js",
        "line": 11,
        "signature": "function findJavaScriptFiles(dir) {",
        "calls": []
      },
      "extractMethods": {
        "name": "extractMethods",
        "file": "simple-duplicate-check.js",
        "line": 28,
        "signature": "function extractMethods(filePath) {",
        "calls": []
      },
      "checkForDuplicates": {
        "name": "checkForDuplicates",
        "file": "simple-duplicate-check.js",
        "line": 77,
        "signature": "function checkForDuplicates() {",
        "calls": []
      },
      "testDuplicateChordAddition": {
        "name": "testDuplicateChordAddition",
        "file": "tests\\test-duplicate-chord-addition.js",
        "line": 9,
        "signature": "function testDuplicateChordAddition() {",
        "calls": []
      },
      "testDuplicateFixes": {
        "name": "testDuplicateFixes",
        "file": "tests\\test-duplicate-fixes.js",
        "line": 9,
        "signature": "function testDuplicateFixes() {",
        "calls": []
      },
      "runTestWhenAppReady": {
        "name": "runTestWhenAppReady",
        "file": "tests\\test-duplicate-fixes.js",
        "line": 207,
        "signature": "function runTestWhenAppReady() {",
        "calls": []
      },
      "testDuplicateChordInteraction": {
        "name": "testDuplicateChordInteraction",
        "file": "tests\\test-duplicate-interaction.js",
        "line": 9,
        "signature": "function testDuplicateChordInteraction() {",
        "calls": []
      },
      "getCurrentChordCount": {
        "name": "getCurrentChordCount",
        "file": "tests\\test-duplicate-interaction.js",
        "line": 29,
        "signature": "function getCurrentChordCount() {",
        "calls": []
      },
      "getCurrentChords": {
        "name": "getCurrentChords",
        "file": "tests\\test-duplicate-interaction.js",
        "line": 35,
        "signature": "function getCurrentChords() {",
        "calls": []
      },
      "testEventAuditIntegration": {
        "name": "testEventAuditIntegration",
        "file": "tests\\test-event-audit-integration.js",
        "line": 10,
        "signature": "function testEventAuditIntegration() {",
        "calls": []
      },
      "runTest2": {
        "name": "runTest2",
        "file": "tests\\test-event-audit-integration.js",
        "line": 86,
        "signature": "function runTest2() {",
        "calls": []
      },
      "runTest3": {
        "name": "runTest3",
        "file": "tests\\test-event-audit-integration.js",
        "line": 138,
        "signature": "function runTest3() {",
        "calls": []
      },
      "runTest4": {
        "name": "runTest4",
        "file": "tests\\test-event-audit-integration.js",
        "line": 184,
        "signature": "function runTest4() {",
        "calls": []
      },
      "runTest5": {
        "name": "runTest5",
        "file": "tests\\test-event-audit-integration.js",
        "line": 226,
        "signature": "function runTest5() {",
        "calls": []
      },
      "finishTests": {
        "name": "finishTests",
        "file": "tests\\test-event-audit-integration.js",
        "line": 265,
        "signature": "function finishTests() {",
        "calls": []
      },
      "testSpecificWorkflow": {
        "name": "testSpecificWorkflow",
        "file": "tests\\test-event-audit-integration.js",
        "line": 283,
        "signature": "function testSpecificWorkflow(workflowName) {",
        "calls": []
      },
      "testChordInputWorkflow": {
        "name": "testChordInputWorkflow",
        "file": "tests\\test-event-audit-integration.js",
        "line": 301,
        "signature": "function testChordInputWorkflow() {",
        "calls": []
      },
      "runEventAuditTestWhenReady": {
        "name": "runEventAuditTestWhenReady",
        "file": "tests\\test-event-audit-integration.js",
        "line": 335,
        "signature": "function runEventAuditTestWhenReady() {",
        "calls": []
      },
      "testFuzzyChordMatching": {
        "name": "testFuzzyChordMatching",
        "file": "tests\\test-fuzzy-matching.js",
        "line": 9,
        "signature": "function testFuzzyChordMatching() {",
        "calls": []
      },
      "testNormalizationOnly": {
        "name": "testNormalizationOnly",
        "file": "tests\\test-fuzzy-matching.js",
        "line": 90,
        "signature": "function testNormalizationOnly() {",
        "calls": []
      },
      "testChordInput": {
        "name": "testChordInput",
        "file": "tests\\test-fuzzy-matching.js",
        "line": 120,
        "signature": "function testChordInput(input) {",
        "calls": []
      },
      "runFuzzyTestWhenReady": {
        "name": "runFuzzyTestWhenReady",
        "file": "tests\\test-fuzzy-matching.js",
        "line": 145,
        "signature": "function runFuzzyTestWhenReady() {",
        "calls": []
      },
      "addInputFlowDebugging": {
        "name": "addInputFlowDebugging",
        "file": "tests\\test-input-flow-debug.js",
        "line": 8,
        "signature": "function addInputFlowDebugging() {",
        "calls": []
      },
      "testIntegration": {
        "name": "testIntegration",
        "file": "tests\\test-integration.js",
        "line": 6,
        "signature": "function testIntegration() {",
        "calls": []
      },
      "runTestWhenReady": {
        "name": "runTestWhenReady",
        "file": "tests\\test-integration.js",
        "line": 104,
        "signature": "function runTestWhenReady(attempts = 0, maxAttempts = 20) {",
        "calls": []
      },
      "testChordNormalizationFix": {
        "name": "testChordNormalizationFix",
        "file": "tests\\test-normalization-fix.js",
        "line": 9,
        "signature": "function testChordNormalizationFix() {",
        "calls": []
      },
      "testSpecificInput": {
        "name": "testSpecificInput",
        "file": "tests\\test-normalization-fix.js",
        "line": 153,
        "signature": "function testSpecificInput(input) {",
        "calls": []
      },
      "runNormalizationTestWhenReady": {
        "name": "runNormalizationTestWhenReady",
        "file": "tests\\test-normalization-fix.js",
        "line": 192,
        "signature": "function runNormalizationTestWhenReady() {",
        "calls": []
      },
      "runTranscriptionDebugTest": {
        "name": "runTranscriptionDebugTest",
        "file": "tests\\test-transcription-debug.js",
        "line": 9,
        "signature": "function runTranscriptionDebugTest() {",
        "calls": []
      },
      "runEndToEndTest": {
        "name": "runEndToEndTest",
        "file": "tests\\test-transcription-end-to-end.js",
        "line": 8,
        "signature": "function runEndToEndTest() {",
        "calls": []
      },
      "parseChordString": {
        "name": "parseChordString",
        "file": "webapp.js",
        "line": 37,
        "signature": "function parseChordString(chordString) {",
        "calls": []
      },
      "initializeAutoharpTypeListeners": {
        "name": "initializeAutoharpTypeListeners",
        "file": "webapp.js",
        "line": 81,
        "signature": "function initializeAutoharpTypeListeners() {",
        "calls": []
      },
      "onAutoharpTypeChanged": {
        "name": "onAutoharpTypeChanged",
        "file": "webapp.js",
        "line": 88,
        "signature": "function onAutoharpTypeChanged(event) {",
        "calls": []
      },
      "renderAvailableChords": {
        "name": "renderAvailableChords",
        "file": "webapp.js",
        "line": 120,
        "signature": "function renderAvailableChords(chordList) {",
        "calls": []
      },
      "initializeDOMReferences": {
        "name": "initializeDOMReferences",
        "file": "webapp.js",
        "line": 145,
        "signature": "function initializeDOMReferences() {",
        "calls": []
      },
      "initializeChordInputListener": {
        "name": "initializeChordInputListener",
        "file": "webapp.js",
        "line": 155,
        "signature": "function initializeChordInputListener() {",
        "calls": []
      },
      "selectChordName": {
        "name": "selectChordName",
        "file": "webapp.js",
        "line": 164,
        "signature": "function selectChordName(chordName) {",
        "calls": []
      },
      "selectChordType": {
        "name": "selectChordType",
        "file": "webapp.js",
        "line": 198,
        "signature": "function selectChordType(chordType) {",
        "calls": []
      },
      "tryAddChord": {
        "name": "tryAddChord",
        "file": "webapp.js",
        "line": 232,
        "signature": "function tryAddChord() {",
        "calls": []
      },
      "resetChordSelection": {
        "name": "resetChordSelection",
        "file": "webapp.js",
        "line": 243,
        "signature": "function resetChordSelection() {",
        "calls": []
      },
      "formatChordName": {
        "name": "formatChordName",
        "file": "webapp.js",
        "line": 261,
        "signature": "function formatChordName(chordName, chordType) {",
        "calls": []
      },
      "addChordFromButton": {
        "name": "addChordFromButton",
        "file": "webapp.js",
        "line": 283,
        "signature": "function addChordFromButton(chordValue) {",
        "calls": []
      },
      "appendChord": {
        "name": "appendChord",
        "file": "webapp.js",
        "line": 290,
        "signature": "function appendChord(chord) {",
        "calls": []
      },
      "removeChord": {
        "name": "removeChord",
        "file": "webapp.js",
        "line": 309,
        "signature": "function removeChord(button) {",
        "calls": []
      },
      "getInputChords": {
        "name": "getInputChords",
        "file": "webapp.js",
        "line": 319,
        "signature": "function getInputChords() {",
        "calls": []
      },
      "initializeDragAndDrop": {
        "name": "initializeDragAndDrop",
        "file": "webapp.js",
        "line": 334,
        "signature": "function initializeDragAndDrop() {",
        "calls": []
      },
      "addDragListeners": {
        "name": "addDragListeners",
        "file": "webapp.js",
        "line": 340,
        "signature": "function addDragListeners(draggable) {",
        "calls": []
      },
      "handleDragStart": {
        "name": "handleDragStart",
        "file": "webapp.js",
        "line": 353,
        "signature": "function handleDragStart(e) {",
        "calls": []
      },
      "handleDragOver": {
        "name": "handleDragOver",
        "file": "webapp.js",
        "line": 360,
        "signature": "function handleDragOver(e) {",
        "calls": []
      },
      "handleDrop": {
        "name": "handleDrop",
        "file": "webapp.js",
        "line": 374,
        "signature": "function handleDrop() {",
        "calls": []
      },
      "handleDragEnd": {
        "name": "handleDragEnd",
        "file": "webapp.js",
        "line": 378,
        "signature": "function handleDragEnd() {",
        "calls": []
      },
      "getDragAfterElement": {
        "name": "getDragAfterElement",
        "file": "webapp.js",
        "line": 387,
        "signature": "function getDragAfterElement(container, x) {",
        "calls": []
      },
      "handleTouchStart": {
        "name": "handleTouchStart",
        "file": "webapp.js",
        "line": 413,
        "signature": "function handleTouchStart(e) {",
        "calls": []
      },
      "handleTouchMove": {
        "name": "handleTouchMove",
        "file": "webapp.js",
        "line": 427,
        "signature": "function handleTouchMove(e) {",
        "calls": []
      },
      "handleTouchEnd": {
        "name": "handleTouchEnd",
        "file": "webapp.js",
        "line": 457,
        "signature": "function handleTouchEnd(e) {",
        "calls": []
      },
      "calculateResultingChords": {
        "name": "calculateResultingChords",
        "file": "webapp.js",
        "line": 476,
        "signature": "function calculateResultingChords(inputChords) {",
        "calls": []
      },
      "onInputChordsChanged": {
        "name": "onInputChordsChanged",
        "file": "webapp.js",
        "line": 579,
        "signature": "function onInputChordsChanged() {",
        "calls": []
      }
    },
    "methods": {
      "CodebaseMapper.constructor": {
        "name": "constructor",
        "class": "CodebaseMapper",
        "file": "codebase-mapper.js",
        "line": 12,
        "signature": "constructor(projectPath) {",
        "calls": []
      },
      "CodebaseMapper.for": {
        "name": "for",
        "class": "CodebaseMapper",
        "file": "codebase-mapper.js",
        "line": 51,
        "signature": "for (const entry of entries) {",
        "calls": []
      },
      "CodebaseMapper.findJavaScriptFiles": {
        "name": "findJavaScriptFiles",
        "class": "CodebaseMapper",
        "file": "codebase-mapper.js",
        "line": 47,
        "signature": "findJavaScriptFiles(dir) {",
        "calls": []
      },
      "CodebaseMapper.if": {
        "name": "if",
        "class": "CodebaseMapper",
        "file": "codebase-mapper.js",
        "line": 307,
        "signature": "if (require.main === module) {",
        "calls": []
      },
      "CodebaseMapper.buildRelationships": {
        "name": "buildRelationships",
        "class": "CodebaseMapper",
        "file": "codebase-mapper.js",
        "line": 199,
        "signature": "buildRelationships() {",
        "calls": []
      },
      "CodebaseMapper.generateReport": {
        "name": "generateReport",
        "class": "CodebaseMapper",
        "file": "codebase-mapper.js",
        "line": 217,
        "signature": "generateReport() {",
        "calls": []
      },
      "CodebaseMapper.exportKnowledgeGraph": {
        "name": "exportKnowledgeGraph",
        "class": "CodebaseMapper",
        "file": "codebase-mapper.js",
        "line": 272,
        "signature": "exportKnowledgeGraph() {",
        "calls": []
      },
      "RobustDuplicateDetector.constructor": {
        "name": "constructor",
        "class": "RobustDuplicateDetector",
        "file": "detect-duplicates.js",
        "line": 12,
        "signature": "constructor(projectPath) {",
        "calls": []
      },
      "RobustDuplicateDetector.scanProject": {
        "name": "scanProject",
        "class": "RobustDuplicateDetector",
        "file": "detect-duplicates.js",
        "line": 24,
        "signature": "scanProject() {",
        "calls": []
      },
      "RobustDuplicateDetector.findJavaScriptFiles": {
        "name": "findJavaScriptFiles",
        "class": "RobustDuplicateDetector",
        "file": "detect-duplicates.js",
        "line": 50,
        "signature": "findJavaScriptFiles(dir) {",
        "calls": []
      },
      "RobustDuplicateDetector.for": {
        "name": "for",
        "class": "RobustDuplicateDetector",
        "file": "detect-duplicates.js",
        "line": 236,
        "signature": "for (const suffix of commonSuffixes) {",
        "calls": []
      },
      "RobustDuplicateDetector.scanFile": {
        "name": "scanFile",
        "class": "RobustDuplicateDetector",
        "file": "detect-duplicates.js",
        "line": 75,
        "signature": "scanFile(filePath) {",
        "calls": []
      },
      "RobustDuplicateDetector.if": {
        "name": "if",
        "class": "RobustDuplicateDetector",
        "file": "detect-duplicates.js",
        "line": 350,
        "signature": "if (require.main === module) {",
        "calls": []
      },
      "RobustDuplicateDetector.analyzeResults": {
        "name": "analyzeResults",
        "class": "RobustDuplicateDetector",
        "file": "detect-duplicates.js",
        "line": 151,
        "signature": "analyzeResults() {",
        "calls": []
      },
      "RobustDuplicateDetector.findSimilarMethodNames": {
        "name": "findSimilarMethodNames",
        "class": "RobustDuplicateDetector",
        "file": "detect-duplicates.js",
        "line": 191,
        "signature": "findSimilarMethodNames() {",
        "calls": []
      },
      "RobustDuplicateDetector.areMethodNamesSimilar": {
        "name": "areMethodNamesSimilar",
        "class": "RobustDuplicateDetector",
        "file": "detect-duplicates.js",
        "line": 211,
        "signature": "areMethodNamesSimilar(name1, name2) {",
        "calls": []
      },
      "RobustDuplicateDetector.generateReport": {
        "name": "generateReport",
        "class": "RobustDuplicateDetector",
        "file": "detect-duplicates.js",
        "line": 247,
        "signature": "generateReport() {",
        "calls": []
      },
      "RobustDuplicateDetector.outputReport": {
        "name": "outputReport",
        "class": "RobustDuplicateDetector",
        "file": "detect-duplicates.js",
        "line": 324,
        "signature": "outputReport(reportLines) {",
        "calls": []
      },
      "RobustDuplicateDetector.getResults": {
        "name": "getResults",
        "class": "RobustDuplicateDetector",
        "file": "detect-duplicates.js",
        "line": 344,
        "signature": "getResults() {",
        "calls": []
      },
      "ImprovedCodebaseMapper.constructor": {
        "name": "constructor",
        "class": "ImprovedCodebaseMapper",
        "file": "improved-codebase-mapper.js",
        "line": 12,
        "signature": "constructor(projectPath) {",
        "calls": []
      },
      "ImprovedCodebaseMapper.generateKnowledgeGraph": {
        "name": "generateKnowledgeGraph",
        "class": "ImprovedCodebaseMapper",
        "file": "improved-codebase-mapper.js",
        "line": 32,
        "signature": "generateKnowledgeGraph() {",
        "calls": []
      },
      "ImprovedCodebaseMapper.findJavaScriptFiles": {
        "name": "findJavaScriptFiles",
        "class": "ImprovedCodebaseMapper",
        "file": "improved-codebase-mapper.js",
        "line": 60,
        "signature": "findJavaScriptFiles(dir) {",
        "calls": []
      },
      "ImprovedCodebaseMapper.for": {
        "name": "for",
        "class": "ImprovedCodebaseMapper",
        "file": "improved-codebase-mapper.js",
        "line": 66,
        "signature": "for (const entry of entries) {",
        "calls": []
      },
      "ImprovedCodebaseMapper.analyzeFile": {
        "name": "analyzeFile",
        "class": "ImprovedCodebaseMapper",
        "file": "improved-codebase-mapper.js",
        "line": 84,
        "signature": "analyzeFile(filePath) {",
        "calls": []
      },
      "ImprovedCodebaseMapper.extractClasses": {
        "name": "extractClasses",
        "class": "ImprovedCodebaseMapper",
        "file": "improved-codebase-mapper.js",
        "line": 104,
        "signature": "extractClasses(lines, fileInfo) {",
        "calls": []
      },
      "ImprovedCodebaseMapper.if": {
        "name": "if",
        "class": "ImprovedCodebaseMapper",
        "file": "improved-codebase-mapper.js",
        "line": 265,
        "signature": "if (require.main === module) {",
        "calls": []
      },
      "ImprovedCodebaseMapper.extractFunctions": {
        "name": "extractFunctions",
        "class": "ImprovedCodebaseMapper",
        "file": "improved-codebase-mapper.js",
        "line": 146,
        "signature": "extractFunctions(lines, fileInfo) {",
        "calls": []
      },
      "ImprovedCodebaseMapper.buildMethodIndex": {
        "name": "buildMethodIndex",
        "class": "ImprovedCodebaseMapper",
        "file": "improved-codebase-mapper.js",
        "line": 183,
        "signature": "buildMethodIndex() {",
        "calls": []
      },
      "ImprovedCodebaseMapper.findDuplicates": {
        "name": "findDuplicates",
        "class": "ImprovedCodebaseMapper",
        "file": "improved-codebase-mapper.js",
        "line": 202,
        "signature": "findDuplicates() {",
        "calls": []
      },
      "ImprovedCodebaseMapper.updateMetadata": {
        "name": "updateMetadata",
        "class": "ImprovedCodebaseMapper",
        "file": "improved-codebase-mapper.js",
        "line": 213,
        "signature": "updateMetadata() {",
        "calls": []
      },
      "ImprovedCodebaseMapper.saveResults": {
        "name": "saveResults",
        "class": "ImprovedCodebaseMapper",
        "file": "improved-codebase-mapper.js",
        "line": 222,
        "signature": "saveResults() {",
        "calls": []
      },
      "ImprovedCodebaseMapper.generateSummary": {
        "name": "generateSummary",
        "class": "ImprovedCodebaseMapper",
        "file": "improved-codebase-mapper.js",
        "line": 232,
        "signature": "generateSummary() {",
        "calls": []
      },
      "AutoharpTransposerApp.constructor": {
        "name": "constructor",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 15,
        "signature": "constructor() {",
        "calls": []
      },
      "AutoharpTransposerApp.if": {
        "name": "if",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 418,
        "signature": "if (document.readyState === 'loading') {",
        "calls": []
      },
      "AutoharpTransposerApp.connectModules": {
        "name": "connectModules",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 113,
        "signature": "connectModules() {",
        "calls": []
      },
      "AutoharpTransposerApp.loadSavedState": {
        "name": "loadSavedState",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 142,
        "signature": "loadSavedState() {",
        "calls": []
      },
      "AutoharpTransposerApp.initializeUI": {
        "name": "initializeUI",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 170,
        "signature": "initializeUI() {",
        "calls": []
      },
      "AutoharpTransposerApp.updateAutoharpTypeUI": {
        "name": "updateAutoharpTypeUI",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 193,
        "signature": "updateAutoharpTypeUI() {",
        "calls": []
      },
      "AutoharpTransposerApp.updateAudioToggleUI": {
        "name": "updateAudioToggleUI",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 204,
        "signature": "updateAudioToggleUI() {",
        "calls": []
      },
      "AutoharpTransposerApp.updateSelectedChordsUI": {
        "name": "updateSelectedChordsUI",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 213,
        "signature": "updateSelectedChordsUI() {",
        "calls": []
      },
      "AutoharpTransposerApp.setupAutoSave": {
        "name": "setupAutoSave",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 233,
        "signature": "setupAutoSave() {",
        "calls": []
      },
      "AutoharpTransposerApp.saveCurrentSession": {
        "name": "saveCurrentSession",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 245,
        "signature": "saveCurrentSession() {",
        "calls": []
      },
      "AutoharpTransposerApp.addChord": {
        "name": "addChord",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 267,
        "signature": "addChord(chord, source = 'api') {",
        "calls": []
      },
      "AutoharpTransposerApp.removeChord": {
        "name": "removeChord",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 276,
        "signature": "removeChord(chord) {",
        "calls": []
      },
      "AutoharpTransposerApp.clearAllChords": {
        "name": "clearAllChords",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 284,
        "signature": "clearAllChords() {",
        "calls": []
      },
      "AutoharpTransposerApp.getSelectedChords": {
        "name": "getSelectedChords",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 292,
        "signature": "getSelectedChords() {",
        "calls": []
      },
      "AutoharpTransposerApp.setAutoharpType": {
        "name": "setAutoharpType",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 296,
        "signature": "setAutoharpType(type) {",
        "calls": []
      },
      "AutoharpTransposerApp.toggleAudio": {
        "name": "toggleAudio",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 300,
        "signature": "toggleAudio() {",
        "calls": []
      },
      "AutoharpTransposerApp.getState": {
        "name": "getState",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 304,
        "signature": "getState() {",
        "calls": []
      },
      "AutoharpTransposerApp.on": {
        "name": "on",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 309,
        "signature": "on(event, callback) {",
        "calls": []
      },
      "AutoharpTransposerApp.emit": {
        "name": "emit",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 319,
        "signature": "emit(event, data) {",
        "calls": []
      },
      "AutoharpTransposerApp.exportData": {
        "name": "exportData",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 332,
        "signature": "exportData() {",
        "calls": []
      },
      "AutoharpTransposerApp.importData": {
        "name": "importData",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 340,
        "signature": "importData(data) {",
        "calls": []
      },
      "AutoharpTransposerApp.getDebugInfo": {
        "name": "getDebugInfo",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 349,
        "signature": "getDebugInfo() {",
        "calls": []
      },
      "AutoharpTransposerApp.destroy": {
        "name": "destroy",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 361,
        "signature": "destroy() {",
        "calls": []
      },
      "AutoharpTransposerApp.handleInitializationError": {
        "name": "handleInitializationError",
        "class": "AutoharpTransposerApp",
        "file": "modules\\appIntegration.js",
        "line": 382,
        "signature": "handleInitializationError(error) {",
        "calls": []
      },
      "AutoharpTypes.constructor": {
        "name": "constructor",
        "class": "AutoharpTypes",
        "file": "modules\\autoharpTypes.js",
        "line": 12,
        "signature": "constructor() {",
        "calls": []
      },
      "AutoharpTypes.getAvailableTypes": {
        "name": "getAvailableTypes",
        "class": "AutoharpTypes",
        "file": "modules\\autoharpTypes.js",
        "line": 83,
        "signature": "getAvailableTypes() {",
        "calls": []
      },
      "AutoharpTypes.getType": {
        "name": "getType",
        "class": "AutoharpTypes",
        "file": "modules\\autoharpTypes.js",
        "line": 92,
        "signature": "getType(type) {",
        "calls": []
      },
      "AutoharpTypes.getAllChords": {
        "name": "getAllChords",
        "class": "AutoharpTypes",
        "file": "modules\\autoharpTypes.js",
        "line": 101,
        "signature": "getAllChords(type) {",
        "calls": []
      },
      "AutoharpTypes.getChordsByCategory": {
        "name": "getChordsByCategory",
        "class": "AutoharpTypes",
        "file": "modules\\autoharpTypes.js",
        "line": 118,
        "signature": "getChordsByCategory(type, category) {",
        "calls": []
      },
      "AutoharpTypes.getIntervals": {
        "name": "getIntervals",
        "class": "AutoharpTypes",
        "file": "modules\\autoharpTypes.js",
        "line": 131,
        "signature": "getIntervals(type, category) {",
        "calls": []
      },
      "AutoharpTypes.isChordAvailable": {
        "name": "isChordAvailable",
        "class": "AutoharpTypes",
        "file": "modules\\autoharpTypes.js",
        "line": 144,
        "signature": "isChordAvailable(chord, type) {",
        "calls": []
      },
      "AutoharpTypes.getTypeInfo": {
        "name": "getTypeInfo",
        "class": "AutoharpTypes",
        "file": "modules\\autoharpTypes.js",
        "line": 156,
        "signature": "getTypeInfo(type) {",
        "calls": []
      },
      "AutoharpTypes.getCompatibilityMatrix": {
        "name": "getCompatibilityMatrix",
        "class": "AutoharpTypes",
        "file": "modules\\autoharpTypes.js",
        "line": 172,
        "signature": "getCompatibilityMatrix(chords) {",
        "calls": []
      },
      "AutoharpTypes.for": {
        "name": "for",
        "class": "AutoharpTypes",
        "file": "modules\\autoharpTypes.js",
        "line": 205,
        "signature": "for (const chord of chords) {",
        "calls": []
      },
      "AutoharpTypes.findBestAutoharpType": {
        "name": "findBestAutoharpType",
        "class": "AutoharpTypes",
        "file": "modules\\autoharpTypes.js",
        "line": 191,
        "signature": "findBestAutoharpType(chords) {",
        "calls": []
      },
      "AutoharpTypes.if": {
        "name": "if",
        "class": "AutoharpTypes",
        "file": "modules\\autoharpTypes.js",
        "line": 215,
        "signature": "if (coverage > bestMatch.coverage) {",
        "calls": []
      },
      "ChordAudioManager.constructor": {
        "name": "constructor",
        "class": "ChordAudioManager",
        "file": "modules\\chordAudio.js",
        "line": 7,
        "signature": "constructor() {",
        "calls": []
      },
      "ChordAudioManager.initializeAudioContext": {
        "name": "initializeAudioContext",
        "class": "ChordAudioManager",
        "file": "modules\\chordAudio.js",
        "line": 15,
        "signature": "initializeAudioContext() {",
        "calls": []
      },
      "ChordAudioManager.toggleSound": {
        "name": "toggleSound",
        "class": "ChordAudioManager",
        "file": "modules\\chordAudio.js",
        "line": 27,
        "signature": "toggleSound() {",
        "calls": []
      },
      "ChordAudioManager.if": {
        "name": "if",
        "class": "ChordAudioManager",
        "file": "modules\\chordAudio.js",
        "line": 162,
        "signature": "if (this.audioContext) {",
        "calls": []
      },
      "ChordAudioManager.playChord": {
        "name": "playChord",
        "class": "ChordAudioManager",
        "file": "modules\\chordAudio.js",
        "line": 43,
        "signature": "playChord(chordName) {",
        "calls": []
      },
      "ChordAudioManager.stopAllSounds": {
        "name": "stopAllSounds",
        "class": "ChordAudioManager",
        "file": "modules\\chordAudio.js",
        "line": 90,
        "signature": "stopAllSounds() {",
        "calls": []
      },
      "ChordAudioManager.getChordFrequencies": {
        "name": "getChordFrequencies",
        "class": "ChordAudioManager",
        "file": "modules\\chordAudio.js",
        "line": 101,
        "signature": "getChordFrequencies(chordName) {",
        "calls": []
      },
      "ChordAudioManager.switch": {
        "name": "switch",
        "class": "ChordAudioManager",
        "file": "modules\\chordAudio.js",
        "line": 120,
        "signature": "switch (parsed.type) {",
        "calls": []
      },
      "ChordAudioManager.parseChordName": {
        "name": "parseChordName",
        "class": "ChordAudioManager",
        "file": "modules\\chordAudio.js",
        "line": 140,
        "signature": "parseChordName(chordName) {",
        "calls": []
      },
      "ChordAudioManager.destroy": {
        "name": "destroy",
        "class": "ChordAudioManager",
        "file": "modules\\chordAudio.js",
        "line": 160,
        "signature": "destroy() {",
        "calls": []
      },
      "ChordParser.constructor": {
        "name": "constructor",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 11,
        "signature": "constructor(availableChords = []) {",
        "calls": []
      },
      "ChordParser.generateAllValidChords": {
        "name": "generateAllValidChords",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 31,
        "signature": "generateAllValidChords() {",
        "calls": []
      },
      "ChordParser.for": {
        "name": "for",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 563,
        "signature": "for (const variation of variations) {",
        "calls": []
      },
      "ChordParser.updateAvailableChords": {
        "name": "updateAvailableChords",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 71,
        "signature": "updateAvailableChords(chords) {",
        "calls": []
      },
      "ChordParser.parseChord": {
        "name": "parseChord",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 82,
        "signature": "parseChord(input) {",
        "calls": []
      },
      "ChordParser.if": {
        "name": "if",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 805,
        "signature": "if (!parsedChord) {",
        "calls": []
      },
      "ChordParser.normalizeChordInput": {
        "name": "normalizeChordInput",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 151,
        "signature": "normalizeChordInput(input) {",
        "calls": []
      },
      "ChordParser.getFuzzyMatches": {
        "name": "getFuzzyMatches",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 286,
        "signature": "getFuzzyMatches(input, maxResults = 5, chordList = null) {",
        "calls": []
      },
      "ChordParser.getSuggestions": {
        "name": "getSuggestions",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 308,
        "signature": "getSuggestions(input, maxSuggestions = 5) {",
        "calls": []
      },
      "ChordParser.getRootNotePermutations": {
        "name": "getRootNotePermutations",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 320,
        "signature": "getRootNotePermutations(input, maxSuggestions = 5) {",
        "calls": []
      },
      "ChordParser.extractRootNote": {
        "name": "extractRootNote",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 338,
        "signature": "extractRootNote(input) {",
        "calls": []
      },
      "ChordParser.generateChordVariations": {
        "name": "generateChordVariations",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 363,
        "signature": "generateChordVariations(rootNote) {",
        "calls": []
      },
      "ChordParser.filterAndPrioritizeVariations": {
        "name": "filterAndPrioritizeVariations",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 391,
        "signature": "filterAndPrioritizeVariations(variations, input, maxSuggestions) {",
        "calls": []
      },
      "ChordParser.validateChord": {
        "name": "validateChord",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 426,
        "signature": "validateChord(chord) {",
        "calls": []
      },
      "ChordParser.calculateSimilarity": {
        "name": "calculateSimilarity",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 433,
        "signature": "calculateSimilarity(input, target) {",
        "calls": []
      },
      "ChordParser.levenshteinDistance": {
        "name": "levenshteinDistance",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 444,
        "signature": "levenshteinDistance(str1, str2) {",
        "calls": []
      },
      "ChordParser.soundexMatch": {
        "name": "soundexMatch",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 475,
        "signature": "soundexMatch(str1, str2) {",
        "calls": []
      },
      "ChordParser.normalizeChordName": {
        "name": "normalizeChordName",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 492,
        "signature": "normalizeChordName(chordName) {",
        "calls": []
      },
      "ChordParser.addToHistory": {
        "name": "addToHistory",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 512,
        "signature": "addToHistory(chord) {",
        "calls": []
      },
      "ChordParser.loadChordHistory": {
        "name": "loadChordHistory",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 531,
        "signature": "loadChordHistory() {",
        "calls": []
      },
      "ChordParser.saveChordHistory": {
        "name": "saveChordHistory",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 541,
        "signature": "saveChordHistory() {",
        "calls": []
      },
      "ChordParser.parseAdvancedChord": {
        "name": "parseAdvancedChord",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 550,
        "signature": "parseAdvancedChord(input) {",
        "calls": []
      },
      "ChordParser.getContextualSuggestions": {
        "name": "getContextualSuggestions",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 572,
        "signature": "getContextualSuggestions(input, recentChords = []) {",
        "calls": []
      },
      "ChordParser.getHarmonicallyRelatedChords": {
        "name": "getHarmonicallyRelatedChords",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 589,
        "signature": "getHarmonicallyRelatedChords(chord) {",
        "calls": []
      },
      "ChordParser.switch": {
        "name": "switch",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 656,
        "signature": "switch (chordType) {",
        "calls": []
      },
      "ChordParser.setAutoharpType": {
        "name": "setAutoharpType",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 685,
        "signature": "setAutoharpType(autoharpType) {",
        "calls": []
      },
      "ChordParser.getCurrentAutoharpType": {
        "name": "getCurrentAutoharpType",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 697,
        "signature": "getCurrentAutoharpType() {",
        "calls": []
      },
      "ChordParser.transposeProgression": {
        "name": "transposeProgression",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 709,
        "signature": "transposeProgression(chords, fromKey, toKey, autoharpType = null) {",
        "calls": []
      },
      "ChordParser.validateChordForAutoharp": {
        "name": "validateChordForAutoharp",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 720,
        "signature": "validateChordForAutoharp(chord, autoharpType = null) {",
        "calls": []
      },
      "ChordParser.getCompatibleChords": {
        "name": "getCompatibleChords",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 730,
        "signature": "getCompatibleChords(autoharpType = null) {",
        "calls": []
      },
      "ChordParser.getAutoharpTypeInfo": {
        "name": "getAutoharpTypeInfo",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 740,
        "signature": "getAutoharpTypeInfo(autoharpType = null) {",
        "calls": []
      },
      "ChordParser.findBestAutoharpType": {
        "name": "findBestAutoharpType",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 750,
        "signature": "findBestAutoharpType(chords) {",
        "calls": []
      },
      "ChordParser.findOptimalKeys": {
        "name": "findOptimalKeys",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 760,
        "signature": "findOptimalKeys(chords, autoharpType = null) {",
        "calls": []
      },
      "ChordParser.simulateCapo": {
        "name": "simulateCapo",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 772,
        "signature": "simulateCapo(chords, capoFret, autoharpType = null) {",
        "calls": []
      },
      "ChordParser.getCompatibilityMatrix": {
        "name": "getCompatibilityMatrix",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 782,
        "signature": "getCompatibilityMatrix(chords) {",
        "calls": []
      },
      "ChordParser.analyzeProgression": {
        "name": "analyzeProgression",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 791,
        "signature": "analyzeProgression(chords) {",
        "calls": []
      },
      "ChordParser.parseChordWithAutoharpInfo": {
        "name": "parseChordWithAutoharpInfo",
        "class": "ChordParser",
        "file": "modules\\chordParser.js",
        "line": 801,
        "signature": "parseChordWithAutoharpInfo(input, autoharpType = null) {",
        "calls": []
      },
      "ChordTransposition.constructor": {
        "name": "constructor",
        "class": "ChordTransposition",
        "file": "modules\\chordTransposition.js",
        "line": 13,
        "signature": "constructor() {",
        "calls": []
      },
      "ChordTransposition.transposeChord": {
        "name": "transposeChord",
        "class": "ChordTransposition",
        "file": "modules\\chordTransposition.js",
        "line": 38,
        "signature": "transposeChord(chord, semitones) {",
        "calls": []
      },
      "ChordTransposition.if": {
        "name": "if",
        "class": "ChordTransposition",
        "file": "modules\\chordTransposition.js",
        "line": 311,
        "signature": "if (uniqueChordTypes.size > 3) {",
        "calls": []
      },
      "ChordTransposition.calculateSemitoneInterval": {
        "name": "calculateSemitoneInterval",
        "class": "ChordTransposition",
        "file": "modules\\chordTransposition.js",
        "line": 74,
        "signature": "calculateSemitoneInterval(fromKey, toKey) {",
        "calls": []
      },
      "ChordTransposition.transposeProgression": {
        "name": "transposeProgression",
        "class": "ChordTransposition",
        "file": "modules\\chordTransposition.js",
        "line": 95,
        "signature": "transposeProgression(chords, fromKey, toKey, autoharpType = '21-chord') {",
        "calls": []
      },
      "ChordTransposition.for": {
        "name": "for",
        "class": "ChordTransposition",
        "file": "modules\\chordTransposition.js",
        "line": 251,
        "signature": "for (let semitones = 0; semitones < 12; semitones++) {",
        "calls": []
      },
      "ChordTransposition.findAlternativeChords": {
        "name": "findAlternativeChords",
        "class": "ChordTransposition",
        "file": "modules\\chordTransposition.js",
        "line": 151,
        "signature": "findAlternativeChords(targetChord, autoharpType) {",
        "calls": []
      },
      "ChordTransposition.simulateCapo": {
        "name": "simulateCapo",
        "class": "ChordTransposition",
        "file": "modules\\chordTransposition.js",
        "line": 203,
        "signature": "simulateCapo(chords, capoFret, autoharpType = '21-chord') {",
        "calls": []
      },
      "ChordTransposition.findOptimalKeys": {
        "name": "findOptimalKeys",
        "class": "ChordTransposition",
        "file": "modules\\chordTransposition.js",
        "line": 247,
        "signature": "findOptimalKeys(chords, autoharpType = '21-chord') {",
        "calls": []
      },
      "ChordTransposition.analyzeProgression": {
        "name": "analyzeProgression",
        "class": "ChordTransposition",
        "file": "modules\\chordTransposition.js",
        "line": 279,
        "signature": "analyzeProgression(chords) {",
        "calls": []
      },
      "EventCoordinator.constructor": {
        "name": "constructor",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 7,
        "signature": "constructor(inputManager, stateManager, audioManager) {",
        "calls": []
      },
      "EventCoordinator.setupEventListeners": {
        "name": "setupEventListeners",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 20,
        "signature": "setupEventListeners() {",
        "calls": []
      },
      "EventCoordinator.if": {
        "name": "if",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 799,
        "signature": "if (typeof window.onInputChordsChanged === 'function') {",
        "calls": []
      },
      "EventCoordinator.initializeEventListeners": {
        "name": "initializeEventListeners",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 29,
        "signature": "initializeEventListeners() {",
        "calls": []
      },
      "EventCoordinator.setupAutoharpTypeListeners": {
        "name": "setupAutoharpTypeListeners",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 49,
        "signature": "setupAutoharpTypeListeners() {",
        "calls": []
      },
      "EventCoordinator.setupChordButtonListeners": {
        "name": "setupChordButtonListeners",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 60,
        "signature": "setupChordButtonListeners() {",
        "calls": []
      },
      "EventCoordinator.setupTextInputListeners": {
        "name": "setupTextInputListeners",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 81,
        "signature": "setupTextInputListeners() {",
        "calls": []
      },
      "EventCoordinator.setupAudioControlListeners": {
        "name": "setupAudioControlListeners",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 130,
        "signature": "setupAudioControlListeners() {",
        "calls": []
      },
      "EventCoordinator.setupUtilityButtonListeners": {
        "name": "setupUtilityButtonListeners",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 140,
        "signature": "setupUtilityButtonListeners() {",
        "calls": []
      },
      "EventCoordinator.setupKeyboardShortcuts": {
        "name": "setupKeyboardShortcuts",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 166,
        "signature": "setupKeyboardShortcuts() {",
        "calls": []
      },
      "EventCoordinator.switch": {
        "name": "switch",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 173,
        "signature": "switch (e.key) {",
        "calls": []
      },
      "EventCoordinator.setupStateListeners": {
        "name": "setupStateListeners",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 203,
        "signature": "setupStateListeners() {",
        "calls": []
      },
      "EventCoordinator.handleAutoharpTypeChange": {
        "name": "handleAutoharpTypeChange",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 233,
        "signature": "handleAutoharpTypeChange(type) {",
        "calls": []
      },
      "EventCoordinator.handleChordNameSelection": {
        "name": "handleChordNameSelection",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 238,
        "signature": "handleChordNameSelection(chordName, button) {",
        "calls": []
      },
      "EventCoordinator.handleChordTypeSelection": {
        "name": "handleChordTypeSelection",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 248,
        "signature": "handleChordTypeSelection(chordType, button) {",
        "calls": []
      },
      "EventCoordinator.handleAddChordClick": {
        "name": "handleAddChordClick",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 258,
        "signature": "handleAddChordClick() {",
        "calls": []
      },
      "EventCoordinator.handleRemoveChordClick": {
        "name": "handleRemoveChordClick",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 289,
        "signature": "handleRemoveChordClick(button) {",
        "calls": []
      },
      "EventCoordinator.handlePlayAll": {
        "name": "handlePlayAll",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 300,
        "signature": "handlePlayAll() {",
        "calls": []
      },
      "EventCoordinator.handleTextInputFocus": {
        "name": "handleTextInputFocus",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 330,
        "signature": "handleTextInputFocus() {",
        "calls": []
      },
      "EventCoordinator.handleSuggestionClick": {
        "name": "handleSuggestionClick",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 337,
        "signature": "handleSuggestionClick(chord) {",
        "calls": []
      },
      "EventCoordinator.handleTextInput": {
        "name": "handleTextInput",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 348,
        "signature": "handleTextInput(inputValue) {",
        "calls": []
      },
      "EventCoordinator.handleTextInputSubmit": {
        "name": "handleTextInputSubmit",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 390,
        "signature": "handleTextInputSubmit(inputValue) {",
        "calls": []
      },
      "EventCoordinator.clearTextInput": {
        "name": "clearTextInput",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 424,
        "signature": "clearTextInput() {",
        "calls": []
      },
      "EventCoordinator.showSuggestions": {
        "name": "showSuggestions",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 439,
        "signature": "showSuggestions(suggestions, inputValue) {",
        "calls": []
      },
      "EventCoordinator.clearSuggestions": {
        "name": "clearSuggestions",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 484,
        "signature": "clearSuggestions() {",
        "calls": []
      },
      "EventCoordinator.highlightMatch": {
        "name": "highlightMatch",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 498,
        "signature": "highlightMatch(suggestion, input) {",
        "calls": []
      },
      "EventCoordinator.handleSuggestionNavigation": {
        "name": "handleSuggestionNavigation",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 522,
        "signature": "handleSuggestionNavigation(key) {",
        "calls": []
      },
      "EventCoordinator.handleSoundToggle": {
        "name": "handleSoundToggle",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 540,
        "signature": "handleSoundToggle() {",
        "calls": []
      },
      "EventCoordinator.handleClearAll": {
        "name": "handleClearAll",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 546,
        "signature": "handleClearAll() {",
        "calls": []
      },
      "EventCoordinator.updateUI": {
        "name": "updateUI",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 552,
        "signature": "updateUI() {",
        "calls": []
      },
      "EventCoordinator.updateSelectedChordsDisplay": {
        "name": "updateSelectedChordsDisplay",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 558,
        "signature": "updateSelectedChordsDisplay() {",
        "calls": []
      },
      "EventCoordinator.updateChordButtons": {
        "name": "updateChordButtons",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 574,
        "signature": "updateChordButtons() {",
        "calls": []
      },
      "EventCoordinator.updateAvailableChordButtons": {
        "name": "updateAvailableChordButtons",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 584,
        "signature": "updateAvailableChordButtons() {",
        "calls": []
      },
      "EventCoordinator.updateSuggestions": {
        "name": "updateSuggestions",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 594,
        "signature": "updateSuggestions(input) {",
        "calls": []
      },
      "EventCoordinator.updateProgressions": {
        "name": "updateProgressions",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 610,
        "signature": "updateProgressions() {",
        "calls": []
      },
      "EventCoordinator.createChordElement": {
        "name": "createChordElement",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 630,
        "signature": "createChordElement(chord, index) {",
        "calls": []
      },
      "EventCoordinator.formatChordNameLegacy": {
        "name": "formatChordNameLegacy",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 652,
        "signature": "formatChordNameLegacy(chordName, chordType) {",
        "calls": []
      },
      "EventCoordinator.focusTextInput": {
        "name": "focusTextInput",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 663,
        "signature": "focusTextInput() {",
        "calls": []
      },
      "EventCoordinator.showMessage": {
        "name": "showMessage",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 698,
        "signature": "showMessage(message, type = 'info') {",
        "calls": []
      },
      "EventCoordinator.removeLastChord": {
        "name": "removeLastChord",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 690,
        "signature": "removeLastChord() {",
        "calls": []
      },
      "EventCoordinator.getDebugInfo": {
        "name": "getDebugInfo",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 719,
        "signature": "getDebugInfo() {",
        "calls": []
      },
      "EventCoordinator.selectChordNameLegacy": {
        "name": "selectChordNameLegacy",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 738,
        "signature": "selectChordNameLegacy(chordName) {",
        "calls": []
      },
      "EventCoordinator.selectChordTypeLegacy": {
        "name": "selectChordTypeLegacy",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 766,
        "signature": "selectChordTypeLegacy(chordType) {",
        "calls": []
      },
      "EventCoordinator.tryAddChordLegacy": {
        "name": "tryAddChordLegacy",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 793,
        "signature": "tryAddChordLegacy() {",
        "calls": []
      },
      "EventCoordinator.resetChordSelectionLegacy": {
        "name": "resetChordSelectionLegacy",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 810,
        "signature": "resetChordSelectionLegacy() {",
        "calls": []
      },
      "EventCoordinator.initializeChordInputListenerLegacy": {
        "name": "initializeChordInputListenerLegacy",
        "class": "EventCoordinator",
        "file": "modules\\eventCoordinator.js",
        "line": 824,
        "signature": "initializeChordInputListenerLegacy() {",
        "calls": []
      },
      "InputManager.constructor": {
        "name": "constructor",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 7,
        "signature": "constructor(audioManager, chordParser) {",
        "calls": []
      },
      "InputManager.on": {
        "name": "on",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 19,
        "signature": "on(event, callback) {",
        "calls": []
      },
      "InputManager.if": {
        "name": "if",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 369,
        "signature": "if (typeof window.onInputChordsChanged === 'function') {",
        "calls": []
      },
      "InputManager.emit": {
        "name": "emit",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 25,
        "signature": "emit(event, data) {",
        "calls": []
      },
      "InputManager.addChord": {
        "name": "addChord",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 38,
        "signature": "addChord(chord, source = 'unknown') {",
        "calls": []
      },
      "InputManager.removeChord": {
        "name": "removeChord",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 94,
        "signature": "removeChord(chord) {",
        "calls": []
      },
      "InputManager.removeChordAt": {
        "name": "removeChordAt",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 107,
        "signature": "removeChordAt(index) {",
        "calls": []
      },
      "InputManager.clearAll": {
        "name": "clearAll",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 120,
        "signature": "clearAll() {",
        "calls": []
      },
      "InputManager.getSelectedChords": {
        "name": "getSelectedChords",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 131,
        "signature": "getSelectedChords() {",
        "calls": []
      },
      "InputManager.hasChord": {
        "name": "hasChord",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 135,
        "signature": "hasChord(chord) {",
        "calls": []
      },
      "InputManager.getChordCount": {
        "name": "getChordCount",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 139,
        "signature": "getChordCount() {",
        "calls": []
      },
      "InputManager.isValidChordFormat": {
        "name": "isValidChordFormat",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 144,
        "signature": "isValidChordFormat(chord) {",
        "calls": []
      },
      "InputManager.processTextInput": {
        "name": "processTextInput",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 158,
        "signature": "processTextInput(input) {",
        "calls": []
      },
      "InputManager.getSuggestions": {
        "name": "getSuggestions",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 188,
        "signature": "getSuggestions(input, maxSuggestions = 5) {",
        "calls": []
      },
      "InputManager.reorderChords": {
        "name": "reorderChords",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 193,
        "signature": "reorderChords(fromIndex, toIndex) {",
        "calls": []
      },
      "InputManager.updateAvailableChords": {
        "name": "updateAvailableChords",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 213,
        "signature": "updateAvailableChords(chords) {",
        "calls": []
      },
      "InputManager.addChords": {
        "name": "addChords",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 242,
        "signature": "addChords(chords, source = 'batch') {",
        "calls": []
      },
      "InputManager.replaceChords": {
        "name": "replaceChords",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 251,
        "signature": "replaceChords(chords, source = 'replace') {",
        "calls": []
      },
      "InputManager.exportState": {
        "name": "exportState",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 257,
        "signature": "exportState() {",
        "calls": []
      },
      "InputManager.importState": {
        "name": "importState",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 264,
        "signature": "importState(state) {",
        "calls": []
      },
      "InputManager.validateAllSelected": {
        "name": "validateAllSelected",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 274,
        "signature": "validateAllSelected() {",
        "calls": []
      },
      "InputManager.getDebugInfo": {
        "name": "getDebugInfo",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 288,
        "signature": "getDebugInfo() {",
        "calls": []
      },
      "InputManager.getInputChordsLegacy": {
        "name": "getInputChordsLegacy",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 306,
        "signature": "getInputChordsLegacy() {",
        "calls": []
      },
      "InputManager.appendChordLegacy": {
        "name": "appendChordLegacy",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 316,
        "signature": "appendChordLegacy(chord) {",
        "calls": []
      },
      "InputManager.removeChordLegacy": {
        "name": "removeChordLegacy",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 342,
        "signature": "removeChordLegacy(button) {",
        "calls": []
      },
      "InputManager.addChordFromButtonLegacy": {
        "name": "addChordFromButtonLegacy",
        "class": "InputManager",
        "file": "modules\\inputManager.js",
        "line": 365,
        "signature": "addChordFromButtonLegacy(chordValue) {",
        "calls": []
      },
      "IntegrationBridge.constructor": {
        "name": "constructor",
        "class": "IntegrationBridge",
        "file": "modules\\integrationBridge.js",
        "line": 7,
        "signature": "constructor() {",
        "calls": []
      },
      "IntegrationBridge.setupLegacyDataWatcher": {
        "name": "setupLegacyDataWatcher",
        "class": "IntegrationBridge",
        "file": "modules\\integrationBridge.js",
        "line": 16,
        "signature": "setupLegacyDataWatcher() {",
        "calls": []
      },
      "IntegrationBridge.if": {
        "name": "if",
        "class": "IntegrationBridge",
        "file": "modules\\integrationBridge.js",
        "line": 270,
        "signature": "if (window.renderInputChords && typeof window.renderInputChords === 'function') {",
        "calls": []
      },
      "IntegrationBridge.onLegacyDataReady": {
        "name": "onLegacyDataReady",
        "class": "IntegrationBridge",
        "file": "modules\\integrationBridge.js",
        "line": 41,
        "signature": "onLegacyDataReady() {",
        "calls": []
      },
      "IntegrationBridge.checkReadiness": {
        "name": "checkReadiness",
        "class": "IntegrationBridge",
        "file": "modules\\integrationBridge.js",
        "line": 100,
        "signature": "checkReadiness() {",
        "calls": []
      },
      "IntegrationBridge.setModuleSystemReady": {
        "name": "setModuleSystemReady",
        "class": "IntegrationBridge",
        "file": "modules\\integrationBridge.js",
        "line": 95,
        "signature": "setModuleSystemReady() {",
        "calls": []
      },
      "IntegrationBridge.useFallbackChordData": {
        "name": "useFallbackChordData",
        "class": "IntegrationBridge",
        "file": "modules\\integrationBridge.js",
        "line": 75,
        "signature": "useFallbackChordData() {",
        "calls": []
      },
      "IntegrationBridge.onReady": {
        "name": "onReady",
        "class": "IntegrationBridge",
        "file": "modules\\integrationBridge.js",
        "line": 106,
        "signature": "onReady(callback) {",
        "calls": []
      },
      "IntegrationBridge.executePendingCallbacks": {
        "name": "executePendingCallbacks",
        "class": "IntegrationBridge",
        "file": "modules\\integrationBridge.js",
        "line": 114,
        "signature": "executePendingCallbacks() {",
        "calls": []
      },
      "IntegrationBridge.getAvailableChordsForType": {
        "name": "getAvailableChordsForType",
        "class": "IntegrationBridge",
        "file": "modules\\integrationBridge.js",
        "line": 125,
        "signature": "getAvailableChordsForType(type) {",
        "calls": []
      },
      "IntegrationBridge.switch": {
        "name": "switch",
        "class": "IntegrationBridge",
        "file": "modules\\integrationBridge.js",
        "line": 131,
        "signature": "switch (type) {",
        "calls": []
      },
      "IntegrationBridge.bridgeLegacyFunctions": {
        "name": "bridgeLegacyFunctions",
        "class": "IntegrationBridge",
        "file": "modules\\integrationBridge.js",
        "line": 158,
        "signature": "bridgeLegacyFunctions(app) {",
        "calls": []
      },
      "IntegrationBridge.getCurrentAutoharpType": {
        "name": "getCurrentAutoharpType",
        "class": "IntegrationBridge",
        "file": "modules\\integrationBridge.js",
        "line": 212,
        "signature": "getCurrentAutoharpType() {",
        "calls": []
      },
      "IntegrationBridge.getCurrentSelectedChords": {
        "name": "getCurrentSelectedChords",
        "class": "IntegrationBridge",
        "file": "modules\\integrationBridge.js",
        "line": 218,
        "signature": "getCurrentSelectedChords() {",
        "calls": []
      },
      "IntegrationBridge.syncLegacyToNewSystem": {
        "name": "syncLegacyToNewSystem",
        "class": "IntegrationBridge",
        "file": "modules\\integrationBridge.js",
        "line": 242,
        "signature": "syncLegacyToNewSystem(app) {",
        "calls": []
      },
      "IntegrationBridge.syncNewSystemToLegacy": {
        "name": "syncNewSystemToLegacy",
        "class": "IntegrationBridge",
        "file": "modules\\integrationBridge.js",
        "line": 263,
        "signature": "syncNewSystemToLegacy(app) {",
        "calls": []
      },
      "StateManager.constructor": {
        "name": "constructor",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 7,
        "signature": "constructor() {",
        "calls": []
      },
      "StateManager.initializeAvailableChords": {
        "name": "initializeAvailableChords",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 32,
        "signature": "initializeAvailableChords() {",
        "calls": []
      },
      "StateManager.if": {
        "name": "if",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 348,
        "signature": "if (!exportedState.autoharpType) {",
        "calls": []
      },
      "StateManager.subscribe": {
        "name": "subscribe",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 48,
        "signature": "subscribe(event, callback) {",
        "calls": []
      },
      "StateManager.emit": {
        "name": "emit",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 63,
        "signature": "emit(event, data) {",
        "calls": []
      },
      "StateManager.getState": {
        "name": "getState",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 76,
        "signature": "getState() {",
        "calls": []
      },
      "StateManager.get": {
        "name": "get",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 80,
        "signature": "get(key) {",
        "calls": []
      },
      "StateManager.setState": {
        "name": "setState",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 85,
        "signature": "setState(updates) {",
        "calls": []
      },
      "StateManager.set": {
        "name": "set",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 109,
        "signature": "set(key, value) {",
        "calls": []
      },
      "StateManager.updateAutoharpType": {
        "name": "updateAutoharpType",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 114,
        "signature": "updateAutoharpType(type) {",
        "calls": []
      },
      "StateManager.updateSelectedChords": {
        "name": "updateSelectedChords",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 127,
        "signature": "updateSelectedChords(chords) {",
        "calls": []
      },
      "StateManager.addSelectedChord": {
        "name": "addSelectedChord",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 131,
        "signature": "addSelectedChord(chord) {",
        "calls": []
      },
      "StateManager.removeSelectedChord": {
        "name": "removeSelectedChord",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 138,
        "signature": "removeSelectedChord(chord) {",
        "calls": []
      },
      "StateManager.clearSelectedChords": {
        "name": "clearSelectedChords",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 143,
        "signature": "clearSelectedChords() {",
        "calls": []
      },
      "StateManager.updateProgressions": {
        "name": "updateProgressions",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 152,
        "signature": "updateProgressions(progressions) {",
        "calls": []
      },
      "StateManager.updateSuggestions": {
        "name": "updateSuggestions",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 156,
        "signature": "updateSuggestions(suggestions) {",
        "calls": []
      },
      "StateManager.toggleAudio": {
        "name": "toggleAudio",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 160,
        "signature": "toggleAudio() {",
        "calls": []
      },
      "StateManager.setInputMode": {
        "name": "setInputMode",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 165,
        "signature": "setInputMode(mode) {",
        "calls": []
      },
      "StateManager.updateCurrentChord": {
        "name": "updateCurrentChord",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 171,
        "signature": "updateCurrentChord(chordName, chordType) {",
        "calls": []
      },
      "StateManager.getAvailableChordsForType": {
        "name": "getAvailableChordsForType",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 179,
        "signature": "getAvailableChordsForType(type) {",
        "calls": []
      },
      "StateManager.switch": {
        "name": "switch",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 188,
        "signature": "switch (type) {",
        "calls": []
      },
      "StateManager.isChordAvailable": {
        "name": "isChordAvailable",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 214,
        "signature": "isChordAvailable(chord) {",
        "calls": []
      },
      "StateManager.isChordSelected": {
        "name": "isChordSelected",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 218,
        "signature": "isChordSelected(chord) {",
        "calls": []
      },
      "StateManager.getSelectedChordCount": {
        "name": "getSelectedChordCount",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 222,
        "signature": "getSelectedChordCount() {",
        "calls": []
      },
      "StateManager.saveToStorage": {
        "name": "saveToStorage",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 227,
        "signature": "saveToStorage() {",
        "calls": []
      },
      "StateManager.loadFromStorage": {
        "name": "loadFromStorage",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 241,
        "signature": "loadFromStorage() {",
        "calls": []
      },
      "StateManager.clearStorage": {
        "name": "clearStorage",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 261,
        "signature": "clearStorage() {",
        "calls": []
      },
      "StateManager.validateState": {
        "name": "validateState",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 270,
        "signature": "validateState() {",
        "calls": []
      },
      "StateManager.reset": {
        "name": "reset",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 301,
        "signature": "reset() {",
        "calls": []
      },
      "StateManager.getDebugInfo": {
        "name": "getDebugInfo",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 321,
        "signature": "getDebugInfo() {",
        "calls": []
      },
      "StateManager.exportState": {
        "name": "exportState",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 334,
        "signature": "exportState() {",
        "calls": []
      },
      "StateManager.importState": {
        "name": "importState",
        "class": "StateManager",
        "file": "modules\\stateManager.js",
        "line": 342,
        "signature": "importState(exportedState) {",
        "calls": []
      },
      "StorageManager.constructor": {
        "name": "constructor",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 7,
        "signature": "constructor() {",
        "calls": []
      },
      "StorageManager.save": {
        "name": "save",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 13,
        "signature": "save(key, data) {",
        "calls": []
      },
      "StorageManager.load": {
        "name": "load",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 28,
        "signature": "load(key, defaultValue = null) {",
        "calls": []
      },
      "StorageManager.if": {
        "name": "if",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 364,
        "signature": "if (history.length > 50) {",
        "calls": []
      },
      "StorageManager.remove": {
        "name": "remove",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 48,
        "signature": "remove(key) {",
        "calls": []
      },
      "StorageManager.exists": {
        "name": "exists",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 58,
        "signature": "exists(key) {",
        "calls": []
      },
      "StorageManager.savePreferences": {
        "name": "savePreferences",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 63,
        "signature": "savePreferences(preferences) {",
        "calls": []
      },
      "StorageManager.loadPreferences": {
        "name": "loadPreferences",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 72,
        "signature": "loadPreferences() {",
        "calls": []
      },
      "StorageManager.saveChordHistory": {
        "name": "saveChordHistory",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 84,
        "signature": "saveChordHistory(chords) {",
        "calls": []
      },
      "StorageManager.loadChordHistory": {
        "name": "loadChordHistory",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 90,
        "signature": "loadChordHistory() {",
        "calls": []
      },
      "StorageManager.addToChordHistory": {
        "name": "addToChordHistory",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 94,
        "signature": "addToChordHistory(chord) {",
        "calls": []
      },
      "StorageManager.saveChordProgression": {
        "name": "saveChordProgression",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 111,
        "signature": "saveChordProgression(name, progression) {",
        "calls": []
      },
      "StorageManager.loadChordProgressions": {
        "name": "loadChordProgressions",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 124,
        "signature": "loadChordProgressions() {",
        "calls": []
      },
      "StorageManager.deleteChordProgression": {
        "name": "deleteChordProgression",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 128,
        "signature": "deleteChordProgression(name) {",
        "calls": []
      },
      "StorageManager.updateProgressionLastUsed": {
        "name": "updateProgressionLastUsed",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 134,
        "signature": "updateProgressionLastUsed(name) {",
        "calls": []
      },
      "StorageManager.saveSession": {
        "name": "saveSession",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 144,
        "signature": "saveSession(sessionData) {",
        "calls": []
      },
      "StorageManager.loadSession": {
        "name": "loadSession",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 152,
        "signature": "loadSession() {",
        "calls": []
      },
      "StorageManager.clearSession": {
        "name": "clearSession",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 167,
        "signature": "clearSession() {",
        "calls": []
      },
      "StorageManager.saveUsageStats": {
        "name": "saveUsageStats",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 172,
        "signature": "saveUsageStats(stats) {",
        "calls": []
      },
      "StorageManager.loadUsageStats": {
        "name": "loadUsageStats",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 182,
        "signature": "loadUsageStats() {",
        "calls": []
      },
      "StorageManager.incrementStat": {
        "name": "incrementStat",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 195,
        "signature": "incrementStat(statName, value = 1) {",
        "calls": []
      },
      "StorageManager.incrementChordUsage": {
        "name": "incrementChordUsage",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 201,
        "signature": "incrementChordUsage(chord) {",
        "calls": []
      },
      "StorageManager.exportAllData": {
        "name": "exportAllData",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 209,
        "signature": "exportAllData() {",
        "calls": []
      },
      "StorageManager.importAllData": {
        "name": "importAllData",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 232,
        "signature": "importAllData(importData) {",
        "calls": []
      },
      "StorageManager.clearAllData": {
        "name": "clearAllData",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 260,
        "signature": "clearAllData() {",
        "calls": []
      },
      "StorageManager.getStorageInfo": {
        "name": "getStorageInfo",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 277,
        "signature": "getStorageInfo() {",
        "calls": []
      },
      "StorageManager.for": {
        "name": "for",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 317,
        "signature": "for (let i = 0; i < 1000; i++) {",
        "calls": []
      },
      "StorageManager.getStorageQuota": {
        "name": "getStorageQuota",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 308,
        "signature": "getStorageQuota() {",
        "calls": []
      },
      "StorageManager.while": {
        "name": "while",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 321,
        "signature": "while (true) {",
        "calls": []
      },
      "StorageManager.cleanupOldData": {
        "name": "cleanupOldData",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 343,
        "signature": "cleanupOldData() {",
        "calls": []
      },
      "StorageManager.migrateFromOldVersion": {
        "name": "migrateFromOldVersion",
        "class": "StorageManager",
        "file": "modules\\storageManager.js",
        "line": 375,
        "signature": "migrateFromOldVersion(oldData) {",
        "calls": []
      }
    },
    "eventHandlers": {
      "modules\\appIntegration.js:240": {
        "event": "beforeunload",
        "handler": "(",
        "file": "modules\\appIntegration.js",
        "line": 240,
        "signature": "window.addEventListener('beforeunload', () => {"
      },
      "modules\\appIntegration.js:419": {
        "event": "DOMContentLoaded",
        "handler": "(",
        "file": "modules\\appIntegration.js",
        "line": 419,
        "signature": "document.addEventListener('DOMContentLoaded', () => {"
      },
      "modules\\eventCoordinator.js:23": {
        "event": "DOMContentLoaded",
        "handler": "(",
        "file": "modules\\eventCoordinator.js",
        "line": 23,
        "signature": "document.addEventListener('DOMContentLoaded', () => this.initializeEventListeners());"
      },
      "modules\\eventCoordinator.js:52": {
        "event": "change",
        "handler": "(e",
        "file": "modules\\eventCoordinator.js",
        "line": 52,
        "signature": "radio.addEventListener('change', (e) => {"
      },
      "modules\\eventCoordinator.js:62": {
        "event": "click",
        "handler": "(e",
        "file": "modules\\eventCoordinator.js",
        "line": 62,
        "signature": "document.addEventListener('click', (e) => {"
      },
      "modules\\eventCoordinator.js:87": {
        "event": "input",
        "handler": "(e",
        "file": "modules\\eventCoordinator.js",
        "line": 87,
        "signature": "textInput.addEventListener('input', (e) => {"
      },
      "modules\\eventCoordinator.js:97": {
        "event": "keydown",
        "handler": "(e",
        "file": "modules\\eventCoordinator.js",
        "line": 97,
        "signature": "textInput.addEventListener('keydown', (e) => {"
      },
      "modules\\eventCoordinator.js:110": {
        "event": "focus",
        "handler": "(",
        "file": "modules\\eventCoordinator.js",
        "line": 110,
        "signature": "textInput.addEventListener('focus', () => {"
      },
      "modules\\eventCoordinator.js:114": {
        "event": "blur",
        "handler": "(",
        "file": "modules\\eventCoordinator.js",
        "line": 114,
        "signature": "textInput.addEventListener('blur', () => {"
      },
      "modules\\eventCoordinator.js:122": {
        "event": "click",
        "handler": "(e",
        "file": "modules\\eventCoordinator.js",
        "line": 122,
        "signature": "suggestionsContainer.addEventListener('click', (e) => {"
      },
      "modules\\eventCoordinator.js:134": {
        "event": "click",
        "handler": "(",
        "file": "modules\\eventCoordinator.js",
        "line": 134,
        "signature": "soundToggle.addEventListener('click', () => {"
      },
      "modules\\eventCoordinator.js:144": {
        "event": "click",
        "handler": "(",
        "file": "modules\\eventCoordinator.js",
        "line": 144,
        "signature": "addChordBtn.addEventListener('click', () => {"
      },
      "modules\\eventCoordinator.js:152": {
        "event": "click",
        "handler": "(",
        "file": "modules\\eventCoordinator.js",
        "line": 152,
        "signature": "clearAllBtn.addEventListener('click', () => {"
      },
      "modules\\eventCoordinator.js:160": {
        "event": "click",
        "handler": "(",
        "file": "modules\\eventCoordinator.js",
        "line": 160,
        "signature": "playAllBtn.addEventListener('click', () => {"
      },
      "modules\\eventCoordinator.js:167": {
        "event": "keydown",
        "handler": "(e",
        "file": "modules\\eventCoordinator.js",
        "line": 167,
        "signature": "document.addEventListener('keydown', (e) => {"
      },
      "modules\\eventCoordinator.js:463": {
        "event": "click",
        "handler": "(",
        "file": "modules\\eventCoordinator.js",
        "line": 463,
        "signature": "item.addEventListener('click', () => {"
      },
      "modules\\eventCoordinator.js:642": {
        "event": "click",
        "handler": "(e",
        "file": "modules\\eventCoordinator.js",
        "line": 642,
        "signature": "removeBtn.addEventListener('click', (e) => {"
      },
      "modules\\inputManager.js:351": {
        "event": "animationend",
        "handler": "(",
        "file": "modules\\inputManager.js",
        "line": 351,
        "signature": "newChord.addEventListener(\"animationend\", () => {"
      },
      "tests\\test-duplicate-chord-addition.js:76": {
        "event": "DOMContentLoaded",
        "handler": "testDuplicateChordAddition",
        "file": "tests\\test-duplicate-chord-addition.js",
        "line": 76,
        "signature": "document.addEventListener('DOMContentLoaded', testDuplicateChordAddition);"
      },
      "tests\\test-duplicate-fixes.js:221": {
        "event": "DOMContentLoaded",
        "handler": "(",
        "file": "tests\\test-duplicate-fixes.js",
        "line": 221,
        "signature": "document.addEventListener('DOMContentLoaded', () => {"
      },
      "tests\\test-event-audit-integration.js:351": {
        "event": "DOMContentLoaded",
        "handler": "(",
        "file": "tests\\test-event-audit-integration.js",
        "line": 351,
        "signature": "document.addEventListener('DOMContentLoaded', () => {"
      },
      "tests\\test-fuzzy-matching.js:161": {
        "event": "DOMContentLoaded",
        "handler": "(",
        "file": "tests\\test-fuzzy-matching.js",
        "line": 161,
        "signature": "document.addEventListener('DOMContentLoaded', () => {"
      },
      "tests\\test-input-flow-debug.js:22": {
        "event": "input",
        "handler": "(e",
        "file": "tests\\test-input-flow-debug.js",
        "line": 22,
        "signature": "textInput.addEventListener('input', (e) => {"
      },
      "tests\\test-input-flow-debug.js:26": {
        "event": "keydown",
        "handler": "(e",
        "file": "tests\\test-input-flow-debug.js",
        "line": 26,
        "signature": "textInput.addEventListener('keydown', (e) => {"
      },
      "tests\\test-input-flow-debug.js:30": {
        "event": "keyup",
        "handler": "(e",
        "file": "tests\\test-input-flow-debug.js",
        "line": 30,
        "signature": "textInput.addEventListener('keyup', (e) => {"
      },
      "tests\\test-input-flow-debug.js:34": {
        "event": "focus",
        "handler": "(e",
        "file": "tests\\test-input-flow-debug.js",
        "line": 34,
        "signature": "textInput.addEventListener('focus', (e) => {"
      },
      "tests\\test-input-flow-debug.js:38": {
        "event": "blur",
        "handler": "(e",
        "file": "tests\\test-input-flow-debug.js",
        "line": 38,
        "signature": "textInput.addEventListener('blur', (e) => {"
      },
      "tests\\test-input-flow-debug.js:132": {
        "event": "DOMContentLoaded",
        "handler": "(",
        "file": "tests\\test-input-flow-debug.js",
        "line": 132,
        "signature": "document.addEventListener('DOMContentLoaded', () => {"
      },
      "tests\\test-integration.js:117": {
        "event": "DOMContentLoaded",
        "handler": "(",
        "file": "tests\\test-integration.js",
        "line": 117,
        "signature": "document.addEventListener('DOMContentLoaded', () => {"
      },
      "tests\\test-normalization-fix.js:207": {
        "event": "DOMContentLoaded",
        "handler": "(",
        "file": "tests\\test-normalization-fix.js",
        "line": 207,
        "signature": "document.addEventListener('DOMContentLoaded', () => {"
      },
      "tests\\test-transcription-debug.js:131": {
        "event": "DOMContentLoaded",
        "handler": "(",
        "file": "tests\\test-transcription-debug.js",
        "line": 131,
        "signature": "document.addEventListener('DOMContentLoaded', () => {"
      },
      "tests\\test-transcription-end-to-end.js:143": {
        "event": "DOMContentLoaded",
        "handler": "(",
        "file": "tests\\test-transcription-end-to-end.js",
        "line": 143,
        "signature": "document.addEventListener('DOMContentLoaded', () => {"
      },
      "webapp.js:84": {
        "event": "change",
        "handler": "onAutoharpTypeChanged",
        "file": "webapp.js",
        "line": 84,
        "signature": "inputType.addEventListener(\"change\", onAutoharpTypeChanged);"
      },
      "webapp.js:313": {
        "event": "animationend",
        "handler": "(",
        "file": "webapp.js",
        "line": 313,
        "signature": "newChord.addEventListener(\"animationend\", () => {"
      },
      "webapp.js:342": {
        "event": "dragstart",
        "handler": "handleDragStart",
        "file": "webapp.js",
        "line": 342,
        "signature": "draggable.addEventListener(\"dragstart\", handleDragStart);"
      },
      "webapp.js:343": {
        "event": "dragover",
        "handler": "handleDragOver",
        "file": "webapp.js",
        "line": 343,
        "signature": "draggable.addEventListener(\"dragover\", handleDragOver);"
      },
      "webapp.js:344": {
        "event": "drop",
        "handler": "handleDrop",
        "file": "webapp.js",
        "line": 344,
        "signature": "draggable.addEventListener(\"drop\", handleDrop);"
      },
      "webapp.js:345": {
        "event": "dragend",
        "handler": "handleDragEnd",
        "file": "webapp.js",
        "line": 345,
        "signature": "draggable.addEventListener(\"dragend\", handleDragEnd);"
      },
      "webapp.js:348": {
        "event": "touchstart",
        "handler": "handleTouchStart",
        "file": "webapp.js",
        "line": 348,
        "signature": "draggable.addEventListener(\"touchstart\", handleTouchStart, { passive: false });"
      },
      "webapp.js:349": {
        "event": "touchmove",
        "handler": "handleTouchMove",
        "file": "webapp.js",
        "line": 349,
        "signature": "draggable.addEventListener(\"touchmove\", handleTouchMove, { passive: false });"
      },
      "webapp.js:350": {
        "event": "touchend",
        "handler": "handleTouchEnd",
        "file": "webapp.js",
        "line": 350,
        "signature": "draggable.addEventListener(\"touchend\", handleTouchEnd);"
      },
      "webapp.js:640": {
        "event": "DOMContentLoaded",
        "handler": "function (",
        "file": "webapp.js",
        "line": 640,
        "signature": "document.addEventListener('DOMContentLoaded', function () {"
      }
    },
    "modules": {
      "codebase-mapper": {
        "file": "codebase-mapper.js",
        "exports": [],
        "dependencies": [
          "fs",
          "path"
        ],
        "provides": [
          "CodebaseMapper"
        ]
      },
      "detect-duplicates": {
        "file": "detect-duplicates.js",
        "exports": [],
        "dependencies": [
          "fs",
          "path"
        ],
        "provides": [
          "RobustDuplicateDetector"
        ]
      },
      "improved-codebase-mapper": {
        "file": "improved-codebase-mapper.js",
        "exports": [],
        "dependencies": [
          "fs",
          "path"
        ],
        "provides": [
          "ImprovedCodebaseMapper"
        ]
      },
      "appIntegration": {
        "file": "modules\\appIntegration.js",
        "exports": [],
        "dependencies": [
          "./chordAudio.js",
          "./chordParser.js",
          "./inputManager.js",
          "./stateManager.js",
          "./eventCoordinator.js",
          "./storageManager.js",
          "./integrationBridge.js"
        ],
        "provides": [
          "AutoharpTransposerApp",
          "initializeApp"
        ]
      },
      "autoharpTypes": {
        "file": "modules\\autoharpTypes.js",
        "exports": [],
        "dependencies": [],
        "provides": [
          "AutoharpTypes"
        ]
      },
      "chordAudio": {
        "file": "modules\\chordAudio.js",
        "exports": [],
        "dependencies": [],
        "provides": [
          "ChordAudioManager"
        ]
      },
      "chordParser": {
        "file": "modules\\chordParser.js",
        "exports": [],
        "dependencies": [
          "./autoharpTypes.js",
          "./chordTransposition.js"
        ],
        "provides": [
          "ChordParser",
          "normalize"
        ]
      },
      "chordTransposition": {
        "file": "modules\\chordTransposition.js",
        "exports": [],
        "dependencies": [
          "./autoharpTypes.js"
        ],
        "provides": [
          "ChordTransposition"
        ]
      },
      "eventCoordinator": {
        "file": "modules\\eventCoordinator.js",
        "exports": [],
        "dependencies": [],
        "provides": [
          "EventCoordinator"
        ]
      },
      "inputManager": {
        "file": "modules\\inputManager.js",
        "exports": [],
        "dependencies": [],
        "provides": [
          "InputManager"
        ]
      },
      "integrationBridge": {
        "file": "modules\\integrationBridge.js",
        "exports": [],
        "dependencies": [],
        "provides": [
          "IntegrationBridge"
        ]
      },
      "stateManager": {
        "file": "modules\\stateManager.js",
        "exports": [],
        "dependencies": [],
        "provides": [
          "StateManager"
        ]
      },
      "storageManager": {
        "file": "modules\\storageManager.js",
        "exports": [],
        "dependencies": [],
        "provides": [
          "StorageManager"
        ]
      },
      "simple-duplicate-check": {
        "file": "simple-duplicate-check.js",
        "exports": [],
        "dependencies": [
          "fs",
          "path"
        ],
        "provides": [
          "findJavaScriptFiles",
          "extractMethods",
          "checkForDuplicates"
        ]
      },
      "test-chord-logic-specialist": {
        "file": "tests\\test-chord-logic-specialist.js",
        "exports": [],
        "dependencies": [],
        "provides": []
      },
      "test-duplicate-chord-addition": {
        "file": "tests\\test-duplicate-chord-addition.js",
        "exports": [],
        "dependencies": [],
        "provides": [
          "testDuplicateChordAddition"
        ]
      },
      "test-duplicate-fixes": {
        "file": "tests\\test-duplicate-fixes.js",
        "exports": [],
        "dependencies": [],
        "provides": [
          "testDuplicateFixes",
          "runTestWhenAppReady"
        ]
      },
      "test-duplicate-interaction": {
        "file": "tests\\test-duplicate-interaction.js",
        "exports": [],
        "dependencies": [],
        "provides": [
          "testDuplicateChordInteraction",
          "getCurrentChordCount",
          "getCurrentChords"
        ]
      },
      "test-event-audit-integration": {
        "file": "tests\\test-event-audit-integration.js",
        "exports": [],
        "dependencies": [],
        "provides": [
          "testEventAuditIntegration",
          "runTest2",
          "runTest3",
          "runTest4",
          "runTest5",
          "finishTests",
          "testSpecificWorkflow",
          "testChordInputWorkflow",
          "runEventAuditTestWhenReady"
        ]
      },
      "test-fuzzy-matching": {
        "file": "tests\\test-fuzzy-matching.js",
        "exports": [],
        "dependencies": [],
        "provides": [
          "testFuzzyChordMatching",
          "testNormalizationOnly",
          "testChordInput",
          "runFuzzyTestWhenReady"
        ]
      },
      "test-input-flow-debug": {
        "file": "tests\\test-input-flow-debug.js",
        "exports": [],
        "dependencies": [],
        "provides": [
          "addInputFlowDebugging"
        ]
      },
      "test-integration": {
        "file": "tests\\test-integration.js",
        "exports": [],
        "dependencies": [],
        "provides": [
          "testIntegration",
          "runTestWhenReady"
        ]
      },
      "test-normalization-fix": {
        "file": "tests\\test-normalization-fix.js",
        "exports": [],
        "dependencies": [],
        "provides": [
          "testChordNormalizationFix",
          "testSpecificInput",
          "runNormalizationTestWhenReady"
        ]
      },
      "test-suggestion-panel-fix": {
        "file": "tests\\test-suggestion-panel-fix.js",
        "exports": [],
        "dependencies": [],
        "provides": []
      },
      "test-transcription-debug": {
        "file": "tests\\test-transcription-debug.js",
        "exports": [],
        "dependencies": [],
        "provides": [
          "runTranscriptionDebugTest"
        ]
      },
      "test-transcription-end-to-end": {
        "file": "tests\\test-transcription-end-to-end.js",
        "exports": [],
        "dependencies": [],
        "provides": [
          "runEndToEndTest"
        ]
      },
      "webapp": {
        "file": "webapp.js",
        "exports": [],
        "dependencies": [],
        "provides": [
          "parseChordString",
          "initializeAutoharpTypeListeners",
          "onAutoharpTypeChanged",
          "renderAvailableChords",
          "initializeDOMReferences",
          "initializeChordInputListener",
          "selectChordName",
          "selectChordType",
          "tryAddChord",
          "resetChordSelection",
          "formatChordName",
          "addChordFromButton",
          "appendChord",
          "removeChord",
          "getInputChords",
          "initializeDragAndDrop",
          "addDragListeners",
          "handleDragStart",
          "handleDragOver",
          "handleDrop",
          "handleDragEnd",
          "getDragAfterElement",
          "handleTouchStart",
          "handleTouchMove",
          "handleTouchEnd",
          "calculateResultingChords",
          "onInputChordsChanged"
        ]
      }
    },
    "callGraph": {
      "codebase-mapper.js": [
        {
          "caller": "codebase-mapper.js",
          "callee": "require",
          "line": 8
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "require",
          "line": 9
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "constructor",
          "line": 12
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "Map",
          "line": 15
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "Map",
          "line": 16
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "Map",
          "line": 17
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "Map",
          "line": 18
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "Map",
          "line": 19
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "Map",
          "line": 20
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "Map",
          "line": 21
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "Map",
          "line": 22
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "generateMap",
          "line": 26
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 27
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.findJavaScriptFiles",
          "line": 29
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 30
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "for ",
          "line": 33
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.analyzeFile",
          "line": 34
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.buildRelationships",
          "line": 38
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.generateReport",
          "line": 41
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.exportKnowledgeGraph",
          "line": 44
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "findJavaScriptFiles",
          "line": 47
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "fs.readdirSync",
          "line": 49
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "for ",
          "line": 51
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "path.join",
          "line": 52
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "if ",
          "line": 54
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "entry.isDirectory",
          "line": 54
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "entry.name.startsWith",
          "line": 54
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "files.push",
          "line": 55
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.findJavaScriptFiles",
          "line": 55
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "if ",
          "line": 56
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "entry.isFile",
          "line": 56
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "entry.name.endsWith",
          "line": 56
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "files.push",
          "line": 57
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "analyzeFile",
          "line": 64
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "fs.readFileSync",
          "line": 65
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "content.split",
          "line": 66
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "path.relative",
          "line": 67
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "lines.forEach",
          "line": 84
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "line.trim",
          "line": 86
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "if ",
          "line": 89
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "trimmedLine.startsWith",
          "line": 89
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "trimmedLine.startsWith",
          "line": 89
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "trimmedLine.match",
          "line": 94
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "if ",
          "line": 95
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "fileInfo.classes.push",
          "line": 103
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.knowledgeGraph.classes.set",
          "line": 104
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "if ",
          "line": 108
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "trimmedLine.includes",
          "line": 108
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "constructor",
          "line": 108
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "trimmedLine.match",
          "line": 113
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "if ",
          "line": 114
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "currentClass.methods.push",
          "line": 123
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "fileInfo.methods.push",
          "line": 124
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.knowledgeGraph.methods.set",
          "line": 125
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "trimmedLine.match",
          "line": 129
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "if ",
          "line": 130
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "fileInfo.functions.push",
          "line": 138
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.knowledgeGraph.functions.set",
          "line": 139
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "trimmedLine.match",
          "line": 143
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "if ",
          "line": 144
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "fileInfo.functions.push",
          "line": 153
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.knowledgeGraph.functions.set",
          "line": 154
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "trimmedLine.match",
          "line": 158
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "if ",
          "line": 159
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "fileInfo.eventHandlers.push",
          "line": 167
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.knowledgeGraph.eventHandlers.set",
          "line": 168
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "trimmedLine.match",
          "line": 172
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "if ",
          "line": 173
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "fileInfo.imports.push",
          "line": 175
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "fileInfo.dependencies.push",
          "line": 176
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "trimmedLine.match",
          "line": 180
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "if ",
          "line": 181
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "callMatches.forEach",
          "line": 182
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "call.replace",
          "line": 183
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "if ",
          "line": 184
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.knowledgeGraph.callGraph.has",
          "line": 184
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.knowledgeGraph.callGraph.set",
          "line": 185
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.knowledgeGraph.callGraph.get",
          "line": 187
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "push",
          "line": 187
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.knowledgeGraph.files.set",
          "line": 196
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "buildRelationships",
          "line": 199
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 200
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "for ",
          "line": 203
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.knowledgeGraph.files.entries",
          "line": 203
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "path.basename",
          "line": 204
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.knowledgeGraph.modules.set",
          "line": 205
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "fileInfo.classes.map",
          "line": 210
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "fileInfo.functions.map",
          "line": 211
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "generateReport",
          "line": 217
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 218
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 219
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 222
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 223
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 224
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 225
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 226
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 227
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "if ",
          "line": 230
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 231
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "for ",
          "line": 232
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.knowledgeGraph.classes.entries",
          "line": 232
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 233
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "if ",
          "line": 234
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 235
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "constructor ",
          "line": 235
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "classInfo.methods.forEach",
          "line": 237
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 238
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "if ",
          "line": 244
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 245
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "for ",
          "line": 246
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.knowledgeGraph.functions.entries",
          "line": 246
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 248
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "if ",
          "line": 253
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 254
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "for ",
          "line": 255
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.knowledgeGraph.eventHandlers.entries",
          "line": 255
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 256
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 261
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "for ",
          "line": 262
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "this.knowledgeGraph.modules.entries",
          "line": 262
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "if ",
          "line": 263
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 264
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "moduleInfo.dependencies.forEach",
          "line": 265
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 266
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "exportKnowledgeGraph",
          "line": 272
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "Date",
          "line": 274
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "toISOString",
          "line": 274
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "path.basename",
          "line": 275
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "Object.fromEntries",
          "line": 284
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "Object.fromEntries",
          "line": 285
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "Object.fromEntries",
          "line": 286
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "Object.fromEntries",
          "line": 287
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "Object.fromEntries",
          "line": 288
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "Object.fromEntries",
          "line": 289
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "Object.fromEntries",
          "line": 290
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "path.join",
          "line": 294
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "fs.writeFileSync",
          "line": 295
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "JSON.stringify",
          "line": 295
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 297
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "path.basename",
          "line": 297
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 298
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 299
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 300
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 301
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "console.log",
          "line": 302
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "if ",
          "line": 307
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "CodebaseMapper",
          "line": 309
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "mapper.generateMap",
          "line": 310
        },
        {
          "caller": "codebase-mapper.js",
          "callee": "catch",
          "line": 310
        }
      ],
      "detect-duplicates.js": [
        {
          "caller": "detect-duplicates.js",
          "callee": "require",
          "line": 8
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "require",
          "line": 9
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "constructor",
          "line": 12
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "Map",
          "line": 14
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "scanProject",
          "line": 24
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "console.log",
          "line": 26
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "console.log",
          "line": 27
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.findJavaScriptFiles",
          "line": 29
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "console.log",
          "line": 30
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "jsFiles.forEach",
          "line": 33
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.scanFile",
          "line": 35
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "catch ",
          "line": 36
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "console.warn",
          "line": 37
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.analyzeResults",
          "line": 41
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.generateReport",
          "line": 42
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "catch ",
          "line": 44
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "console.error",
          "line": 45
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "process.exit",
          "line": 46
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "findJavaScriptFiles",
          "line": 50
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "fs.readdirSync",
          "line": 54
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "for ",
          "line": 56
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "path.join",
          "line": 57
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 59
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "entry.isDirectory",
          "line": 59
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 61
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "entry.name.startsWith",
          "line": 61
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "files.push",
          "line": 62
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.findJavaScriptFiles",
          "line": 62
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 64
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "entry.isFile",
          "line": 64
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "entry.name.endsWith",
          "line": 64
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "files.push",
          "line": 65
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "catch ",
          "line": 68
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "console.warn",
          "line": 69
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "scanFile",
          "line": 75
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "fs.readFileSync",
          "line": 76
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "content.split",
          "line": 77
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "path.relative",
          "line": 78
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "lines.forEach",
          "line": 104
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "line.trim",
          "line": 106
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 109
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "trimmedLine.startsWith",
          "line": 109
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "trimmedLine.startsWith",
          "line": 110
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "trimmedLine.startsWith",
          "line": 111
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "methodPatterns.forEach",
          "line": 116
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "trimmedLine.match",
          "line": 117
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 118
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 128
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "skipKeywords.includes",
          "line": 128
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 133
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.methodDefinitions.has",
          "line": 133
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.methodDefinitions.set",
          "line": 134
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.methodDefinitions.get",
          "line": 137
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "push",
          "line": 137
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "analyzeResults",
          "line": 151
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "for ",
          "line": 155
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.methodDefinitions.entries",
          "line": 155
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 156
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "Map",
          "line": 158
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "definitions.forEach",
          "line": 159
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 160
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "fileGroups.has",
          "line": 160
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "fileGroups.set",
          "line": 161
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "fileGroups.get",
          "line": 163
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "push",
          "line": 163
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "for ",
          "line": 167
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "fileGroups.entries",
          "line": 167
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 168
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.results.criticalDuplicates.push",
          "line": 169
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 178
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.results.crossFileDuplicates.push",
          "line": 179
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.findSimilarMethodNames",
          "line": 188
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "findSimilarMethodNames",
          "line": 191
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "Array.from",
          "line": 192
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.methodDefinitions.keys",
          "line": 192
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "for ",
          "line": 194
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "for ",
          "line": 195
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 199
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.areMethodNamesSimilar",
          "line": 199
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.results.similarNames.push",
          "line": 200
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.methodDefinitions.get",
          "line": 203
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.methodDefinitions.get",
          "line": 204
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "areMethodNamesSimilar",
          "line": 211
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 213
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "name1.toLowerCase",
          "line": 216
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "name2.toLowerCase",
          "line": 217
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 220
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "lower1.includes",
          "line": 220
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "lower2.includes",
          "line": 220
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "for ",
          "line": 228
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "lower1.replace",
          "line": 229
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "RegExp",
          "line": 229
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "lower2.replace",
          "line": 230
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "RegExp",
          "line": 230
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 231
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "for ",
          "line": 236
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "lower1.replace",
          "line": 237
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "RegExp",
          "line": 237
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "lower2.replace",
          "line": 238
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "RegExp",
          "line": 238
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 239
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "generateReport",
          "line": 247
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 251
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 252
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 253
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 256
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 257
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 258
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 259
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 260
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 261
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 262
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 265
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 266
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "duplicates ",
          "line": 266
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.results.criticalDuplicates.forEach",
          "line": 267
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 268
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 269
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "dup.definitions.forEach",
          "line": 270
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 271
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 274
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 278
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 279
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "duplicates ",
          "line": 279
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.results.crossFileDuplicates.forEach",
          "line": 280
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 281
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 282
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "dup.definitions.forEach",
          "line": 283
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 284
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 287
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 291
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 292
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "names ",
          "line": 292
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.results.similarNames.slice",
          "line": 293
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "forEach",
          "line": 293
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 294
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 295
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 296
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 297
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 299
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 300
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 302
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 306
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 307
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 308
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 309
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 310
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 311
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 313
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "intentional ",
          "line": 313
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 316
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.push",
          "line": 317
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "this.outputReport",
          "line": 321
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "outputReport",
          "line": 324
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "path.join",
          "line": 326
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "fs.writeFileSync",
          "line": 329
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.join",
          "line": 329
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "console.log",
          "line": 332
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "catch ",
          "line": 334
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "console.error",
          "line": 335
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "reportLines.forEach",
          "line": 337
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "console.log",
          "line": 338
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "getResults",
          "line": 344
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "if ",
          "line": 350
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "RobustDuplicateDetector",
          "line": 352
        },
        {
          "caller": "detect-duplicates.js",
          "callee": "detector.scanProject",
          "line": 353
        }
      ],
      "improved-codebase-mapper.js": [
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "require",
          "line": 8
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "require",
          "line": 9
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "constructor",
          "line": 12
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "Date",
          "line": 16
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "toISOString",
          "line": 16
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "generateKnowledgeGraph",
          "line": 32
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.log",
          "line": 34
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.log",
          "line": 35
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "this.findJavaScriptFiles",
          "line": 37
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.log",
          "line": 38
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "jsFiles.forEach",
          "line": 40
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "this.analyzeFile",
          "line": 42
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "catch ",
          "line": 43
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.warn",
          "line": 44
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "path.relative",
          "line": 44
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "this.buildMethodIndex",
          "line": 48
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "this.findDuplicates",
          "line": 49
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "this.updateMetadata",
          "line": 50
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "this.saveResults",
          "line": 51
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "this.generateSummary",
          "line": 52
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "catch ",
          "line": 54
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.error",
          "line": 55
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "process.exit",
          "line": 56
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "findJavaScriptFiles",
          "line": 60
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "fs.readdirSync",
          "line": 64
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "for ",
          "line": 66
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "path.join",
          "line": 67
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "if ",
          "line": 69
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "entry.isDirectory",
          "line": 69
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "if ",
          "line": 70
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "entry.name.startsWith",
          "line": 70
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "files.push",
          "line": 71
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "this.findJavaScriptFiles",
          "line": 71
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "if ",
          "line": 73
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "entry.isFile",
          "line": 73
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "entry.name.endsWith",
          "line": 73
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "files.push",
          "line": 74
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "catch ",
          "line": 77
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.warn",
          "line": 78
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "analyzeFile",
          "line": 84
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "fs.readFileSync",
          "line": 85
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "content.split",
          "line": 86
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "path.relative",
          "line": 87
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "this.extractClasses",
          "line": 98
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "this.extractFunctions",
          "line": 99
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "extractClasses",
          "line": 104
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "lines.forEach",
          "line": 107
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "line.trim",
          "line": 108
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "trimmed.match",
          "line": 112
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "if ",
          "line": 113
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "fileInfo.classes.push",
          "line": 121
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "if ",
          "line": 126
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "trimmed.match",
          "line": 127
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "if ",
          "line": 128
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "trimmed.startsWith",
          "line": 128
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "currentClass.methods.push",
          "line": 138
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "fileInfo.methods.push",
          "line": 139
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "extractFunctions",
          "line": 146
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "lines.forEach",
          "line": 147
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "line.trim",
          "line": 148
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "trimmed.match",
          "line": 152
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "if ",
          "line": 153
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "fileInfo.functions.push",
          "line": 162
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "trimmed.match",
          "line": 167
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "if ",
          "line": 168
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "fileInfo.functions.push",
          "line": 177
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "buildMethodIndex",
          "line": 183
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "Object.entries",
          "line": 186
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "forEach",
          "line": 186
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "if ",
          "line": 189
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "push",
          "line": 193
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "findDuplicates",
          "line": 202
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "Object.entries",
          "line": 203
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "forEach",
          "line": 203
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "if ",
          "line": 204
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "updateMetadata",
          "line": 213
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "Object.keys",
          "line": 215
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "Object.keys",
          "line": 216
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "Object.keys",
          "line": 217
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "Object.keys",
          "line": 218
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "Object.keys",
          "line": 219
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "saveResults",
          "line": 222
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "path.join",
          "line": 224
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "fs.writeFileSync",
          "line": 225
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "JSON.stringify",
          "line": 225
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.log",
          "line": 226
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "path.relative",
          "line": 226
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "catch ",
          "line": 227
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.error",
          "line": 228
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "generateSummary",
          "line": 232
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.log",
          "line": 235
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.log",
          "line": 236
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.log",
          "line": 237
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.log",
          "line": 238
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.log",
          "line": 239
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.log",
          "line": 240
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.log",
          "line": 241
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "if ",
          "line": 243
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.log",
          "line": 244
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "Object.values",
          "line": 245
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "forEach",
          "line": 245
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.log",
          "line": 246
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "if ",
          "line": 250
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.log",
          "line": 251
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "Object.entries",
          "line": 252
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "forEach",
          "line": 252
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.log",
          "line": 253
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "info.locations.forEach",
          "line": 254
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.log",
          "line": 255
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "console.log",
          "line": 260
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "if ",
          "line": 265
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "ImprovedCodebaseMapper",
          "line": 267
        },
        {
          "caller": "improved-codebase-mapper.js",
          "callee": "mapper.generateKnowledgeGraph",
          "line": 268
        }
      ],
      "modules\\appIntegration.js": [
        {
          "caller": "modules\\appIntegration.js",
          "callee": "constructor",
          "line": 15
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.initializeModules",
          "line": 18
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "initializeModules",
          "line": 21
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.log",
          "line": 23
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.waitForChordData",
          "line": 29
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.initializeCoreModules",
          "line": 32
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.connectModules",
          "line": 35
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "integrationBridge.bridgeLegacyFunctions",
          "line": 38
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.loadSavedState",
          "line": 41
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "integrationBridge.syncLegacyToNewSystem",
          "line": 44
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.initializeUI",
          "line": 47
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.log",
          "line": 50
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.emit",
          "line": 53
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "catch ",
          "line": 55
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.error",
          "line": 56
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.handleInitializationError",
          "line": 57
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "waitForChordData",
          "line": 61
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "Promise",
          "line": 62
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 64
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.log",
          "line": 65
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "integrationBridge.setModuleSystemReady",
          "line": 66
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "resolve",
          "line": 67
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "integrationBridge.onReady",
          "line": 72
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.log",
          "line": 73
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "integrationBridge.setModuleSystemReady",
          "line": 74
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "resolve",
          "line": 75
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "setTimeout",
          "line": 79
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.warn",
          "line": 80
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "integrationBridge.setModuleSystemReady",
          "line": 81
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "resolve",
          "line": 82
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "initializeCoreModules",
          "line": 87
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "StateManager",
          "line": 89
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "ChordAudioManager",
          "line": 92
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.stateManager.get",
          "line": 95
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "ChordParser",
          "line": 96
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "InputManager",
          "line": 99
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "EventCoordinator",
          "line": 105
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.log",
          "line": 110
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "connectModules",
          "line": 113
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.stateManager.subscribe",
          "line": 115
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.inputManager.updateAvailableChords",
          "line": 116
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.inputManager.on",
          "line": 120
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "storageManager.incrementChordUsage",
          "line": 122
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "storageManager.incrementStat",
          "line": 123
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 125
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "storageManager.incrementStat",
          "line": 126
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 127
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "storageManager.incrementStat",
          "line": 128
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.stateManager.subscribe",
          "line": 133
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 134
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "storageManager.incrementStat",
          "line": 135
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.log",
          "line": 139
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "loadSavedState",
          "line": 142
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "storageManager.loadPreferences",
          "line": 145
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.stateManager.setState",
          "line": 146
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "storageManager.loadSession",
          "line": 154
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 155
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.inputManager.addChords",
          "line": 156
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 160
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.log",
          "line": 164
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "catch ",
          "line": 165
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.warn",
          "line": 166
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "initializeUI",
          "line": 170
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 172
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "window.initializeDOMReferences",
          "line": 173
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.updateAutoharpTypeUI",
          "line": 177
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.updateAudioToggleUI",
          "line": 178
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 181
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.updateSelectedChordsUI",
          "line": 182
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.warn",
          "line": 184
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.setupAutoSave",
          "line": 188
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.log",
          "line": 190
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "updateAutoharpTypeUI",
          "line": 193
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.stateManager.get",
          "line": 194
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "document.getElementById",
          "line": 195
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 196
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.log",
          "line": 198
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.warn",
          "line": 200
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "updateAudioToggleUI",
          "line": 204
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.stateManager.get",
          "line": 205
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "document.getElementById",
          "line": 206
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 207
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "toggle.setAttribute",
          "line": 209
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "updateSelectedChordsUI",
          "line": 213
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 215
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "window.initializeDOMReferences",
          "line": 216
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 220
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.eventCoordinator.updateUI",
          "line": 221
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.warn",
          "line": 223
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "setTimeout",
          "line": 225
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 226
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.eventCoordinator.updateUI",
          "line": 227
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "setupAutoSave",
          "line": 233
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "setInterval",
          "line": 235
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.saveCurrentSession",
          "line": 236
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "window.addEventListener",
          "line": 240
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.saveCurrentSession",
          "line": 241
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "saveCurrentSession",
          "line": 245
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.stateManager.get",
          "line": 248
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.stateManager.get",
          "line": 249
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "storageManager.saveSession",
          "line": 251
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "catch ",
          "line": 252
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.warn",
          "line": 253
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "addition ",
          "line": 264
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "addChord",
          "line": 267
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.inputManager.addChord",
          "line": 268
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "removeChord",
          "line": 276
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.inputManager.removeChord",
          "line": 277
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "clearAllChords",
          "line": 284
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.inputManager.clearAll",
          "line": 285
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "getSelectedChords",
          "line": 292
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.inputManager.getSelectedChords",
          "line": 293
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "setAutoharpType",
          "line": 296
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.stateManager.updateAutoharpType",
          "line": 297
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "toggleAudio",
          "line": 300
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.audioManager.toggleSound",
          "line": 301
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "getState",
          "line": 304
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.stateManager.getState",
          "line": 305
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "on",
          "line": 309
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 310
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 313
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "push",
          "line": 316
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "emit",
          "line": 319
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 320
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "forEach",
          "line": 321
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "callback",
          "line": 323
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "catch ",
          "line": 324
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.error",
          "line": 325
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "exportData",
          "line": 332
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.stateManager.exportState",
          "line": 334
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "storageManager.exportAllData",
          "line": 335
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "Date.now",
          "line": 336
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "importData",
          "line": 340
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 341
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.stateManager.importState",
          "line": 342
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 344
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "storageManager.importAllData",
          "line": 345
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "getDebugInfo",
          "line": 349
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "Object.keys",
          "line": 352
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "getDebugInfo",
          "line": 353
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "getDebugInfo",
          "line": 354
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "getDebugInfo",
          "line": 355
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "storageManager.getStorageInfo",
          "line": 356
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "destroy",
          "line": 361
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.saveCurrentSession",
          "line": 364
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 367
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "this.modules.audioManager.destroy",
          "line": 368
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 372
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "clearInterval",
          "line": 373
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.log",
          "line": 376
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "catch ",
          "line": 377
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.error",
          "line": 378
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "handleInitializationError",
          "line": 382
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "document.createElement",
          "line": 384
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "document.body.insertBefore",
          "line": 395
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "initializeApp",
          "line": 403
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 404
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "console.warn",
          "line": 405
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "AutoharpTransposerApp",
          "line": 409
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "if ",
          "line": 418
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "document.addEventListener",
          "line": 419
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "setTimeout",
          "line": 421
        },
        {
          "caller": "modules\\appIntegration.js",
          "callee": "setTimeout",
          "line": 425
        }
      ],
      "modules\\autoharpTypes.js": [
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "constructor",
          "line": 12
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "Chromatic ",
          "line": 60
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "getAvailableTypes",
          "line": 83
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "Object.keys",
          "line": 84
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "type ",
          "line": 89
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "getType",
          "line": 92
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "getAllChords",
          "line": 101
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "this.getType",
          "line": 102
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "if ",
          "line": 103
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "category ",
          "line": 115
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "getChordsByCategory",
          "line": 118
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "this.getType",
          "line": 119
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "if ",
          "line": 120
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "category ",
          "line": 128
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "getIntervals",
          "line": 131
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "this.getType",
          "line": 132
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "if ",
          "line": 133
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "isChordAvailable",
          "line": 144
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "this.getAllChords",
          "line": 145
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "allChords.some",
          "line": 146
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "availableChord.toLowerCase",
          "line": 147
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "chord.toLowerCase",
          "line": 147
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "getTypeInfo",
          "line": 156
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "this.getType",
          "line": 157
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "if ",
          "line": 158
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "this.getAllChords",
          "line": 163
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "getCompatibilityMatrix",
          "line": 172
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "this.getAvailableTypes",
          "line": 174
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "for ",
          "line": 176
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "for ",
          "line": 178
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "this.isChordAvailable",
          "line": 179
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "findBestAutoharpType",
          "line": 191
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "this.getAvailableTypes",
          "line": 192
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "for ",
          "line": 201
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "for ",
          "line": 205
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "if ",
          "line": 206
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "this.isChordAvailable",
          "line": 206
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "availableChords.push",
          "line": 207
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "missingChords.push",
          "line": 209
        },
        {
          "caller": "modules\\autoharpTypes.js",
          "callee": "if ",
          "line": 215
        }
      ],
      "modules\\chordAudio.js": [
        {
          "caller": "modules\\chordAudio.js",
          "callee": "constructor",
          "line": 7
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "this.initializeAudioContext",
          "line": 12
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "initializeAudioContext",
          "line": 15
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "new ",
          "line": 18
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "this.audioContext.createGain",
          "line": 19
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "this.gainNode.connect",
          "line": 20
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "this.gainNode.gain.setValueAtTime",
          "line": 21
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "catch ",
          "line": 22
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "console.warn",
          "line": 23
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "toggleSound",
          "line": 27
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "document.getElementById",
          "line": 29
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "if ",
          "line": 30
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "soundToggle.setAttribute",
          "line": 32
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "if ",
          "line": 36
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "this.audioContext.resume",
          "line": 37
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "playChord",
          "line": 43
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "if ",
          "line": 44
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "this.stopAllSounds",
          "line": 49
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "this.getChordFrequencies",
          "line": 52
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "frequencies.forEach",
          "line": 56
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "this.audioContext.createOscillator",
          "line": 57
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "this.audioContext.createGain",
          "line": 58
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "oscillator.connect",
          "line": 60
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "noteGain.connect",
          "line": 61
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "oscillator.frequency.setValueAtTime",
          "line": 63
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "noteGain.gain.setValueAtTime",
          "line": 67
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "noteGain.gain.linearRampToValueAtTime",
          "line": 68
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "noteGain.gain.setValueAtTime",
          "line": 69
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "noteGain.gain.exponentialRampToValueAtTime",
          "line": 70
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "oscillator.start",
          "line": 72
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "oscillator.stop",
          "line": 73
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "this.oscillators.push",
          "line": 75
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "this.oscillators.indexOf",
          "line": 79
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "if ",
          "line": 80
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "this.oscillators.splice",
          "line": 81
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "catch ",
          "line": 85
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "console.warn",
          "line": 86
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "stopAllSounds",
          "line": 90
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "this.oscillators.forEach",
          "line": 91
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "oscillator.stop",
          "line": 93
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "catch ",
          "line": 94
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "getChordFrequencies",
          "line": 101
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "this.parseChordName",
          "line": 113
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "if ",
          "line": 114
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "if ",
          "line": 117
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "switch ",
          "line": 120
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "parseChordName",
          "line": 140
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "chordName.match",
          "line": 142
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "if ",
          "line": 143
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "toLowerCase",
          "line": 146
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "if ",
          "line": 149
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "suffix.includes",
          "line": 149
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "if ",
          "line": 150
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "suffix.includes",
          "line": 150
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "if ",
          "line": 151
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "suffix.includes",
          "line": 151
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "if ",
          "line": 152
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "suffix.includes",
          "line": 152
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "if ",
          "line": 153
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "suffix.includes",
          "line": 153
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "if ",
          "line": 154
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "suffix.includes",
          "line": 154
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "destroy",
          "line": 160
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "this.stopAllSounds",
          "line": 161
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "if ",
          "line": 162
        },
        {
          "caller": "modules\\chordAudio.js",
          "callee": "this.audioContext.close",
          "line": 163
        }
      ],
      "modules\\chordParser.js": [
        {
          "caller": "modules\\chordParser.js",
          "callee": "constructor",
          "line": 11
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.loadChordHistory",
          "line": 13
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "AutoharpTypes",
          "line": 16
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "ChordTransposition",
          "line": 17
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.generateAllValidChords",
          "line": 24
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "generateAllValidChords",
          "line": 31
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "chord ",
          "line": 56
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "for ",
          "line": 62
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "for ",
          "line": 63
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "allChords.push",
          "line": 64
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "updateAvailableChords",
          "line": 71
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "parseChordString",
          "line": 77
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "for ",
          "line": 79
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "parseChord",
          "line": 82
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 83
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "input.trim",
          "line": 85
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 86
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.allValidChords.find",
          "line": 89
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "chord.toLowerCase",
          "line": 90
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "cleanInput.toLowerCase",
          "line": 90
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 92
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.availableChords.find",
          "line": 94
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "chord.toLowerCase",
          "line": 95
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "exactValidMatch.toLowerCase",
          "line": 95
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 97
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.normalizeChordInput",
          "line": 105
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 106
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.allValidChords.find",
          "line": 108
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "chord.toLowerCase",
          "line": 109
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "normalizedChord.toLowerCase",
          "line": 109
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 111
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.availableChords.find",
          "line": 113
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "chord.toLowerCase",
          "line": 114
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "validNormalizedMatch.toLowerCase",
          "line": 114
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 116
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.getFuzzyMatches",
          "line": 123
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 124
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.availableChords.find",
          "line": 127
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "chord.toLowerCase",
          "line": 128
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "validFuzzyMatch.toLowerCase",
          "line": 128
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 130
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.getFuzzyMatches",
          "line": 138
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 139
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "normalizeChordInput",
          "line": 151
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 152
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "input.trim",
          "line": 155
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "toLowerCase",
          "line": 155
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "normalized.replace",
          "line": 158
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "normalized.match",
          "line": 161
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 162
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "toUpperCase",
          "line": 164
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "normalized.slice",
          "line": 165
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "trim",
          "line": 165
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 177
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "root.toLowerCase",
          "line": 177
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "root.toLowerCase",
          "line": 178
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "letter ",
          "line": 224
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 243
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 245
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "remainder.match",
          "line": 245
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "test",
          "line": 245
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 251
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "remainder.match",
          "line": 251
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 259
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "chordTypeMappings.hasOwnProperty",
          "line": 259
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "for ",
          "line": 266
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "Object.entries",
          "line": 266
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 267
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.calculateSimilarity",
          "line": 269
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 270
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "getFuzzyMatches",
          "line": 286
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 287
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "input.toLowerCase",
          "line": 289
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "trim",
          "line": 289
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "chordsToSearch.forEach",
          "line": 295
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.calculateSimilarity",
          "line": 296
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "chord.toLowerCase",
          "line": 296
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 297
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "matches.push",
          "line": 298
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "sort",
          "line": 304
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "slice",
          "line": 305
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "getSuggestions",
          "line": 308
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 309
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "filter",
          "line": 312
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.availableChords.includes",
          "line": 312
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "slice",
          "line": 313
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.getRootNotePermutations",
          "line": 317
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "getRootNotePermutations",
          "line": 320
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.extractRootNote",
          "line": 322
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 323
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.getFuzzyMatches",
          "line": 325
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "fuzzyMatches.map",
          "line": 326
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.generateChordVariations",
          "line": 330
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.filterAndPrioritizeVariations",
          "line": 333
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "extractRootNote",
          "line": 338
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "input.match",
          "line": 341
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 342
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "toUpperCase",
          "line": 345
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 356
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "generateChordVariations",
          "line": 363
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "Major ",
          "line": 366
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "chordTypes.map",
          "line": 388
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "filterAndPrioritizeVariations",
          "line": 391
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "input.toLowerCase",
          "line": 392
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "variations.map",
          "line": 395
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "variation.toLowerCase",
          "line": 396
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 400
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 404
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "variationLower.startsWith",
          "line": 404
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 408
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "variationLower.includes",
          "line": 408
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "sort",
          "line": 421
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "slice",
          "line": 422
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "map",
          "line": 423
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "validateChord",
          "line": 426
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 427
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.availableChords.some",
          "line": 428
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "availableChord.toLowerCase",
          "line": 429
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "chord.toLowerCase",
          "line": 429
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "calculateSimilarity",
          "line": 433
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.levenshteinDistance",
          "line": 435
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "Math.max",
          "line": 435
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "target.startsWith",
          "line": 436
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "target.includes",
          "line": 437
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.soundexMatch",
          "line": 438
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "Math.max",
          "line": 441
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "levenshteinDistance",
          "line": 444
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "for ",
          "line": 450
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "for ",
          "line": 453
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "for ",
          "line": 458
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "for ",
          "line": 459
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 460
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "str2.charAt",
          "line": 460
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "str1.charAt",
          "line": 460
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "Math.min",
          "line": 463
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "soundexMatch",
          "line": 475
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "replace",
          "line": 479
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "replace",
          "line": 480
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "replace",
          "line": 481
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "replace",
          "line": 482
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "replace",
          "line": 483
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "replace",
          "line": 484
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "toLowerCase",
          "line": 485
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "normalize",
          "line": 488
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "normalize",
          "line": 488
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "normalizeChordName",
          "line": 492
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 493
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "replace",
          "line": 497
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "replace",
          "line": 498
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "replace",
          "line": 499
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "replace",
          "line": 500
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "replace",
          "line": 501
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "replace",
          "line": 503
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "replace",
          "line": 504
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "replace",
          "line": 505
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "replace",
          "line": 506
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "replace",
          "line": 507
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "trim",
          "line": 508
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "addToHistory",
          "line": 512
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 513
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.validateChord",
          "line": 513
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.chordHistory.indexOf",
          "line": 516
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 517
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.chordHistory.splice",
          "line": 518
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.chordHistory.unshift",
          "line": 522
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.chordHistory.slice",
          "line": 525
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.saveChordHistory",
          "line": 528
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "loadChordHistory",
          "line": 531
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "localStorage.getItem",
          "line": 533
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "JSON.parse",
          "line": 534
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "catch ",
          "line": 535
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "console.warn",
          "line": 536
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "saveChordHistory",
          "line": 541
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "localStorage.setItem",
          "line": 543
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "JSON.stringify",
          "line": 543
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "catch ",
          "line": 544
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "console.warn",
          "line": 545
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "parseAdvancedChord",
          "line": 550
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "input.trim",
          "line": 551
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "cleanInput.replace",
          "line": 556
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "cleanInput.replace",
          "line": 557
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "cleanInput.replace",
          "line": 558
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "cleanInput.replace",
          "line": 559
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.normalizeChordName",
          "line": 560
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "for ",
          "line": 563
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.parseChord",
          "line": 564
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 565
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "getContextualSuggestions",
          "line": 572
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.getSuggestions",
          "line": 573
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 576
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.getHarmonicallyRelatedChords",
          "line": 577
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "relatedChords.filter",
          "line": 578
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.availableChords.includes",
          "line": 579
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "baseSuggestions.includes",
          "line": 580
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "contextualSuggestions.slice",
          "line": 583
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "getHarmonicallyRelatedChords",
          "line": 589
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "chord.replace",
          "line": 601
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "parseChord",
          "line": 612
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "notation ",
          "line": 613
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "parseChordStringLegacy",
          "line": 616
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "chordString.match",
          "line": 618
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 619
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "chordString.slice",
          "line": 622
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 627
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "remainder.includes",
          "line": 627
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 629
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "remainder.includes",
          "line": 629
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 631
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "remainder.includes",
          "line": 631
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 633
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "remainder.includes",
          "line": 633
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 635
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "remainder.includes",
          "line": 635
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 637
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "remainder.includes",
          "line": 637
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "name ",
          "line": 651
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "type ",
          "line": 652
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "formatChordNameLegacy",
          "line": 655
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "switch ",
          "line": 656
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "type ",
          "line": 683
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "setAutoharpType",
          "line": 685
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 686
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.autoharpTypes.getType",
          "line": 686
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.updateAvailableChords",
          "line": 689
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.autoharpTypes.getAllChords",
          "line": 689
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "getCurrentAutoharpType",
          "line": 697
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "type ",
          "line": 706
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "transposeProgression",
          "line": 709
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.transposition.transposeProgression",
          "line": 711
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "against ",
          "line": 717
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "validateChordForAutoharp",
          "line": 720
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.autoharpTypes.isChordAvailable",
          "line": 722
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "type ",
          "line": 727
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "getCompatibleChords",
          "line": 730
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.autoharpTypes.getAllChords",
          "line": 732
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "type ",
          "line": 737
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "getAutoharpTypeInfo",
          "line": 740
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.autoharpTypes.getTypeInfo",
          "line": 742
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "findBestAutoharpType",
          "line": 750
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.autoharpTypes.findBestAutoharpType",
          "line": 751
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "type ",
          "line": 757
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "findOptimalKeys",
          "line": 760
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.transposition.findOptimalKeys",
          "line": 762
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "position ",
          "line": 768
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "type ",
          "line": 769
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "simulateCapo",
          "line": 772
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.transposition.simulateCapo",
          "line": 774
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "getCompatibilityMatrix",
          "line": 782
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.autoharpTypes.getCompatibilityMatrix",
          "line": 783
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "analyzeProgression",
          "line": 791
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.transposition.analyzeProgression",
          "line": 792
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "validation ",
          "line": 798
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "parseChordWithAutoharpInfo",
          "line": 801
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.parseChord",
          "line": 803
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "if ",
          "line": 805
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.validateChordForAutoharp",
          "line": 816
        },
        {
          "caller": "modules\\chordParser.js",
          "callee": "this.transposition.findAlternativeChords",
          "line": 817
        }
      ],
      "modules\\chordTransposition.js": [
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "constructor",
          "line": 13
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "AutoharpTypes",
          "line": 14
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "chord ",
          "line": 34
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "transpose ",
          "line": 35
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "transposeChord",
          "line": 38
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 39
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "chord.match",
          "line": 42
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 43
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "this.chromaticScale.findIndex",
          "line": 48
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "note.toLowerCase",
          "line": 49
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "rootNote.toLowerCase",
          "line": 49
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 53
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "this.chromaticScale.findIndex",
          "line": 54
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "note.toLowerCase",
          "line": 55
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "toLowerCase",
          "line": 55
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 59
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "calculateSemitoneInterval",
          "line": 74
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "this.chromaticScale.findIndex",
          "line": 75
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "note.toLowerCase",
          "line": 76
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "fromKey.toLowerCase",
          "line": 76
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "this.chromaticScale.findIndex",
          "line": 78
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "note.toLowerCase",
          "line": 79
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "toKey.toLowerCase",
          "line": 79
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 82
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "return ",
          "line": 84
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "transposeProgression",
          "line": 95
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "this.calculateSemitoneInterval",
          "line": 96
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "for ",
          "line": 111
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "this.transposeChord",
          "line": 112
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 114
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "this.autoharpTypes.isChordAvailable",
          "line": 115
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "this.findAlternativeChords",
          "line": 116
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "result.chordMappings.push",
          "line": 125
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 127
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "result.availableChords.push",
          "line": 128
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "result.missingChords.push",
          "line": 130
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 131
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "result.alternativeChords.push",
          "line": 132
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "findAlternativeChords",
          "line": 151
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "this.autoharpTypes.getAllChords",
          "line": 153
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "targetChord.match",
          "line": 156
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 157
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "for ",
          "line": 162
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "chord.match",
          "line": 163
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 164
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "toLowerCase",
          "line": 164
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "rootNote.toLowerCase",
          "line": 164
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "alternatives.push",
          "line": 165
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 170
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "chordType.includes",
          "line": 170
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "chordType.includes",
          "line": 170
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "this.transposeChord",
          "line": 172
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 173
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "this.autoharpTypes.isChordAvailable",
          "line": 173
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "alternatives.push",
          "line": 174
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 176
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "chordType.includes",
          "line": 176
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "this.transposeChord",
          "line": 178
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 179
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "this.autoharpTypes.isChordAvailable",
          "line": 179
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "alternatives.push",
          "line": 180
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 185
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 187
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "this.autoharpTypes.isChordAvailable",
          "line": 187
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "alternatives.push",
          "line": 188
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "Set",
          "line": 193
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "position ",
          "line": 199
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "simulateCapo",
          "line": 203
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 204
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "for ",
          "line": 218
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "this.transposeChord",
          "line": 219
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "this.autoharpTypes.isChordAvailable",
          "line": 220
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "result.chordMappings.push",
          "line": 228
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 230
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "result.playableChords.push",
          "line": 231
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "result.unplayableChords.push",
          "line": 233
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "findOptimalKeys",
          "line": 247
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "for ",
          "line": 251
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "this.transposeProgression",
          "line": 253
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "keyOptions.push",
          "line": 255
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "keyOptions.sort",
          "line": 266
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 267
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "analyzeProgression",
          "line": 279
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "chords.map",
          "line": 288
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "chord.match",
          "line": 289
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "filter",
          "line": 291
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "rootNotes.forEach",
          "line": 295
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "Object.entries",
          "line": 300
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "sort",
          "line": 301
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "map",
          "line": 302
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "slice",
          "line": 303
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "Set",
          "line": 306
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "chords.map",
          "line": 306
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "chord.match",
          "line": 307
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 311
        },
        {
          "caller": "modules\\chordTransposition.js",
          "callee": "if ",
          "line": 313
        }
      ],
      "modules\\eventCoordinator.js": [
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "constructor",
          "line": 7
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.setupEventListeners",
          "line": 16
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.setupStateListeners",
          "line": 17
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "setupEventListeners",
          "line": 20
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 22
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.addEventListener",
          "line": 23
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.initializeEventListeners",
          "line": 23
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.initializeEventListeners",
          "line": 25
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "initializeEventListeners",
          "line": 29
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.setupAutoharpTypeListeners",
          "line": 31
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.setupChordButtonListeners",
          "line": 34
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.setupTextInputListeners",
          "line": 37
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.setupAudioControlListeners",
          "line": 40
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.setupUtilityButtonListeners",
          "line": 43
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.setupKeyboardShortcuts",
          "line": 46
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "setupAutoharpTypeListeners",
          "line": 49
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.querySelectorAll",
          "line": 50
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "radioButtons.forEach",
          "line": 51
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "radio.addEventListener",
          "line": 52
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 53
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.handleAutoharpTypeChange",
          "line": 54
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "setupChordButtonListeners",
          "line": 60
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.addEventListener",
          "line": 62
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 63
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "e.target.classList.contains",
          "line": 63
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.handleChordNameSelection",
          "line": 64
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 67
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "e.target.classList.contains",
          "line": 67
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.handleChordTypeSelection",
          "line": 68
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 71
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "e.target.classList.contains",
          "line": 71
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.handleAddChordClick",
          "line": 72
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 75
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "e.target.classList.contains",
          "line": 75
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.handleRemoveChordClick",
          "line": 76
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "setupTextInputListeners",
          "line": 81
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.getElementById",
          "line": 82
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.getElementById",
          "line": 83
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 85
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "textInput.addEventListener",
          "line": 87
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 89
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.handleTextInput",
          "line": 93
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "textInput.addEventListener",
          "line": 97
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 98
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "e.preventDefault",
          "line": 99
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.handleTextInputSubmit",
          "line": 100
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 101
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.clearSuggestions",
          "line": 102
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "e.target.blur",
          "line": 103
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 104
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.handleSuggestionNavigation",
          "line": 105
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "textInput.addEventListener",
          "line": 110
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.handleTextInputFocus",
          "line": 111
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "textInput.addEventListener",
          "line": 114
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "setTimeout",
          "line": 116
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.clearSuggestions",
          "line": 116
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 121
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "suggestionsContainer.addEventListener",
          "line": 122
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 123
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "e.target.classList.contains",
          "line": 123
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.handleSuggestionClick",
          "line": 124
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "setupAudioControlListeners",
          "line": 130
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.getElementById",
          "line": 132
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 133
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "soundToggle.addEventListener",
          "line": 134
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.handleSoundToggle",
          "line": 135
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "setupUtilityButtonListeners",
          "line": 140
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.getElementById",
          "line": 142
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 143
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "addChordBtn.addEventListener",
          "line": 144
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.handleAddChordClick",
          "line": 145
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.getElementById",
          "line": 150
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 151
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "clearAllBtn.addEventListener",
          "line": 152
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.handleClearAll",
          "line": 153
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.getElementById",
          "line": 158
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 159
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "playAllBtn.addEventListener",
          "line": 160
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.handlePlayAll",
          "line": 161
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "setupKeyboardShortcuts",
          "line": 166
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.addEventListener",
          "line": 167
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 169
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "switch ",
          "line": 173
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 175
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.focusTextInput",
          "line": 179
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "e.preventDefault",
          "line": 180
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.clearSuggestions",
          "line": 183
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.clearTextInput",
          "line": 184
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.handleSoundToggle",
          "line": 187
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "e.preventDefault",
          "line": 188
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.removeLastChord",
          "line": 192
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "e.preventDefault",
          "line": 193
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "setupStateListeners",
          "line": 203
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.on",
          "line": 205
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.stateManager.addSelectedChord",
          "line": 206
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.updateUI",
          "line": 207
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.clearTextInput",
          "line": 208
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.on",
          "line": 211
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.stateManager.removeSelectedChord",
          "line": 212
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.updateUI",
          "line": 213
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.on",
          "line": 216
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.stateManager.clearSelectedChords",
          "line": 217
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.updateUI",
          "line": 218
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.stateManager.subscribe",
          "line": 222
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.updateProgressions",
          "line": 223
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.stateManager.subscribe",
          "line": 226
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.updateAvailableChords",
          "line": 227
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.updateAvailableChordButtons",
          "line": 228
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "handleAutoharpTypeChange",
          "line": 233
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.stateManager.updateAutoharpType",
          "line": 234
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.log",
          "line": 235
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "handleChordNameSelection",
          "line": 238
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.querySelectorAll",
          "line": 240
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "forEach",
          "line": 240
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "btn.classList.remove",
          "line": 241
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "button.classList.add",
          "line": 242
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.stateManager.updateCurrentChord",
          "line": 244
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.stateManager.get",
          "line": 244
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.log",
          "line": 245
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "handleChordTypeSelection",
          "line": 248
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.querySelectorAll",
          "line": 250
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "forEach",
          "line": 250
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "btn.classList.remove",
          "line": 251
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "button.classList.add",
          "line": 252
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.stateManager.updateCurrentChord",
          "line": 254
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.stateManager.get",
          "line": 254
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.log",
          "line": 255
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "handleAddChordClick",
          "line": 258
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.log",
          "line": 259
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.getElementById",
          "line": 260
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 261
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "textInput.value.trim",
          "line": 263
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.log",
          "line": 264
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.log",
          "line": 265
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 267
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.showMessage",
          "line": 268
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.log",
          "line": 274
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.addChord",
          "line": 275
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 277
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.log",
          "line": 280
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.warn",
          "line": 282
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.showMessage",
          "line": 283
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "handleRemoveChordClick",
          "line": 289
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 291
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.removeChord",
          "line": 292
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "handlePlayAll",
          "line": 300
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.log",
          "line": 301
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.getSelectedChords",
          "line": 303
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 304
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.showMessage",
          "line": 305
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.log",
          "line": 309
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 312
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.showMessage",
          "line": 313
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.audioManager.playChordSequence",
          "line": 318
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "then",
          "line": 319
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.log",
          "line": 320
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "catch",
          "line": 322
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.warn",
          "line": 323
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.showMessage",
          "line": 324
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "handleTextInputFocus",
          "line": 330
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.getElementById",
          "line": 331
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 332
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.updateSuggestions",
          "line": 333
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "handleSuggestionClick",
          "line": 337
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.addChord",
          "line": 338
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.clearSuggestions",
          "line": 339
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.clearTextInput",
          "line": 340
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "handleTextInput",
          "line": 348
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.log",
          "line": 349
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.getElementById",
          "line": 350
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 351
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "textInput.classList.remove",
          "line": 354
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 357
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "inputValue.trim",
          "line": 357
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.clearSuggestions",
          "line": 358
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "inputValue.trim",
          "line": 362
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.getSuggestions",
          "line": 365
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.chordParser.parseChord",
          "line": 368
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 371
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "textInput.classList.add",
          "line": 373
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 374
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "textInput.classList.add",
          "line": 376
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "textInput.classList.add",
          "line": 379
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 383
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.showSuggestions",
          "line": 384
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.clearSuggestions",
          "line": 386
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "handleTextInputSubmit",
          "line": 390
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.clearSuggestions",
          "line": 395
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.querySelector",
          "line": 398
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 399
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.addChord",
          "line": 401
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.clearTextInput",
          "line": 402
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 407
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "inputValue.trim",
          "line": 407
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.processTextInput",
          "line": 408
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "inputValue.trim",
          "line": 408
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 409
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.addChord",
          "line": 411
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.clearTextInput",
          "line": 412
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.showMessage",
          "line": 414
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "setTimeout",
          "line": 419
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "clearTextInput",
          "line": 424
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.log",
          "line": 425
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.getElementById",
          "line": 426
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 427
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "textInput.classList.remove",
          "line": 430
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "showSuggestions",
          "line": 439
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.log",
          "line": 440
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.getElementById",
          "line": 441
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 442
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 447
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "suggestions.forEach",
          "line": 453
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.createElement",
          "line": 454
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.highlightMatch",
          "line": 459
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "item.addEventListener",
          "line": 463
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.addChord",
          "line": 464
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.clearTextInput",
          "line": 465
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.clearSuggestions",
          "line": 466
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 470
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "item.classList.add",
          "line": 471
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "container.appendChild",
          "line": 474
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "clearSuggestions",
          "line": 484
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.getElementById",
          "line": 485
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 486
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "highlightMatch",
          "line": 498
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 499
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "input.toLowerCase",
          "line": 503
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "suggestion.toLowerCase",
          "line": 504
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "suggestionLower.indexOf",
          "line": 507
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 509
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "suggestion.substring",
          "line": 515
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "suggestion.substring",
          "line": 516
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "suggestion.substring",
          "line": 517
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "handleSuggestionNavigation",
          "line": 522
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.querySelectorAll",
          "line": 523
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 524
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.querySelector",
          "line": 526
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 529
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "Array.from",
          "line": 530
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "indexOf",
          "line": 530
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "Math.min",
          "line": 532
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "Math.max",
          "line": 533
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "currentSelected.classList.remove",
          "line": 534
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "classList.add",
          "line": 537
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "handleSoundToggle",
          "line": 540
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.audioManager.toggleSound",
          "line": 541
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.stateManager.set",
          "line": 542
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.showMessage",
          "line": 543
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "handleClearAll",
          "line": 546
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.clearAll",
          "line": 547
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.showMessage",
          "line": 548
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "updateUI",
          "line": 552
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.updateSelectedChordsDisplay",
          "line": 553
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.updateChordButtons",
          "line": 554
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.updateProgressions",
          "line": 555
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "updateSelectedChordsDisplay",
          "line": 558
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.getElementById",
          "line": 559
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 560
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.stateManager.get",
          "line": 562
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "selectedChords.forEach",
          "line": 568
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.createChordElement",
          "line": 569
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "container.appendChild",
          "line": 570
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "updateChordButtons",
          "line": 574
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.stateManager.get",
          "line": 575
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.querySelectorAll",
          "line": 578
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "forEach",
          "line": 578
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "button.classList.toggle",
          "line": 580
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "selectedChords.includes",
          "line": 580
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "updateAvailableChordButtons",
          "line": 584
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.stateManager.get",
          "line": 585
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.querySelectorAll",
          "line": 588
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "forEach",
          "line": 588
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "availableChords.includes",
          "line": 590
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "updateSuggestions",
          "line": 594
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 595
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.clearSuggestions",
          "line": 596
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.chordParser.normalizeChordInput",
          "line": 601
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.getSuggestions",
          "line": 604
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.showSuggestions",
          "line": 605
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "updateProgressions",
          "line": 610
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.stateManager.get",
          "line": 611
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 614
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "window.initializeDOMReferences",
          "line": 615
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 619
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "window.onInputChordsChanged",
          "line": 621
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "catch ",
          "line": 622
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.warn",
          "line": 623
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "createChordElement",
          "line": 630
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.createElement",
          "line": 631
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "element.querySelector",
          "line": 640
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 641
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "removeBtn.addEventListener",
          "line": 642
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "e.stopPropagation",
          "line": 643
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.stateManager.removeSelectedChord",
          "line": 644
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "formatChordNameLegacy",
          "line": 652
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 654
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "window.formatChordName",
          "line": 655
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 659
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "focusTextInput",
          "line": 663
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.getElementById",
          "line": 664
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 665
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "input.focus",
          "line": 666
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "showMessage",
          "line": 673
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.getElementById",
          "line": 674
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 675
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.log",
          "line": 676
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "type.toUpperCase",
          "line": 676
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "setTimeout",
          "line": 685
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "removeLastChord",
          "line": 690
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.stateManager.get",
          "line": 691
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 692
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.removeChord",
          "line": 694
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "showMessage",
          "line": 698
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.getElementById",
          "line": 700
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 701
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.createElement",
          "line": 702
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.body.appendChild",
          "line": 705
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "setTimeout",
          "line": 713
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "getDebugInfo",
          "line": 719
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.inputManager.getDebugInfo",
          "line": 721
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.stateManager.getDebugInfo",
          "line": 722
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "selectChordNameLegacy",
          "line": 738
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.querySelector",
          "line": 739
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 740
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 742
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "selectedButton.classList.contains",
          "line": 742
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "selectedButton.classList.remove",
          "line": 743
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.querySelectorAll",
          "line": 749
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "chordNameButtons.forEach",
          "line": 750
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 751
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "btn.classList.remove",
          "line": 752
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "selectedButton.classList.add",
          "line": 756
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.log",
          "line": 758
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "selectChordTypeLegacy",
          "line": 766
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.querySelector",
          "line": 767
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 768
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 770
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "selectedButton.classList.contains",
          "line": 770
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "selectedButton.classList.remove",
          "line": 771
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.querySelectorAll",
          "line": 777
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "chordTypeButtons.forEach",
          "line": 778
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 779
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "btn.classList.remove",
          "line": 780
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "selectedButton.classList.add",
          "line": 784
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.log",
          "line": 786
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "tryAddChordLegacy",
          "line": 793
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 794
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.formatChordNameLegacy",
          "line": 795
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 796
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "window.appendChord",
          "line": 797
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "if ",
          "line": 799
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "window.onInputChordsChanged",
          "line": 800
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "this.resetChordSelectionLegacy",
          "line": 802
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "resetChordSelectionLegacy",
          "line": 810
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "document.querySelectorAll",
          "line": 812
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "allButtons.forEach",
          "line": 813
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "btn.classList.remove",
          "line": 813
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "initializeChordInputListenerLegacy",
          "line": 824
        },
        {
          "caller": "modules\\eventCoordinator.js",
          "callee": "console.log",
          "line": 827
        }
      ],
      "modules\\inputManager.js": [
        {
          "caller": "modules\\inputManager.js",
          "callee": "constructor",
          "line": 7
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "on",
          "line": 19
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 20
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "push",
          "line": 21
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "emit",
          "line": 25
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 26
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "forEach",
          "line": 27
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "callback",
          "line": 27
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "addChord",
          "line": 38
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "console.log",
          "line": 39
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 41
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "console.log",
          "line": 42
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.chordParser.parseChord",
          "line": 47
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 48
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "console.warn",
          "line": 49
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "console.log",
          "line": 53
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 60
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.isValidChordFormat",
          "line": 60
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "console.warn",
          "line": 61
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "console.log",
          "line": 65
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.selectedChords.push",
          "line": 71
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.chordParser.addToHistory",
          "line": 74
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 77
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.audioManager.playChord",
          "line": 78
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.emit",
          "line": 82
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "console.log",
          "line": 84
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "removeChord",
          "line": 94
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.selectedChords.indexOf",
          "line": 95
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 96
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.selectedChords.splice",
          "line": 98
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.emit",
          "line": 101
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "console.log",
          "line": 103
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "removeChordAt",
          "line": 107
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 108
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.selectedChords.splice",
          "line": 111
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.emit",
          "line": 114
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "console.log",
          "line": 116
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "clearAll",
          "line": 120
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.emit",
          "line": 125
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "console.log",
          "line": 127
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "getSelectedChords",
          "line": 131
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "hasChord",
          "line": 135
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.selectedChords.includes",
          "line": 136
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "getChordCount",
          "line": 139
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "isValidChordFormat",
          "line": 144
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 145
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "chord.trim",
          "line": 147
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 148
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "chordPattern.test",
          "line": 154
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "processTextInput",
          "line": 158
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 159
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "input.trim",
          "line": 161
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 162
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.chordParser.parseAdvancedChord",
          "line": 165
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 167
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.chordParser.getSuggestions",
          "line": 175
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "suggestions.join",
          "line": 181
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "getSuggestions",
          "line": 188
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.chordParser.getSuggestions",
          "line": 189
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "reorderChords",
          "line": 193
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 194
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.selectedChords.splice",
          "line": 199
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.selectedChords.splice",
          "line": 200
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.emit",
          "line": 203
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "updateAvailableChords",
          "line": 213
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.chordParser.updateAvailableChords",
          "line": 214
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.selectedChords.filter",
          "line": 217
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.chordParser.validateChord",
          "line": 218
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 221
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.selectedChords.filter",
          "line": 222
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.chordParser.validateChord",
          "line": 223
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "removedChords.forEach",
          "line": 229
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.emit",
          "line": 230
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "console.log",
          "line": 237
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "addChords",
          "line": 242
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "chords.forEach",
          "line": 244
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.addChord",
          "line": 245
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "results.push",
          "line": 246
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "replaceChords",
          "line": 251
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.clearAll",
          "line": 252
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.addChords",
          "line": 253
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "exportState",
          "line": 257
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "Date.now",
          "line": 260
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "importState",
          "line": 264
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 265
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "Array.isArray",
          "line": 265
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.clearAll",
          "line": 269
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.addChords",
          "line": 270
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "validateAllSelected",
          "line": 274
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.selectedChords.filter",
          "line": 275
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.chordParser.validateChord",
          "line": 276
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 279
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "console.warn",
          "line": 280
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "getDebugInfo",
          "line": 288
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.chordParser.chordHistory.slice",
          "line": 293
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "getInputChordsLegacy",
          "line": 306
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "document.querySelectorAll",
          "line": 307
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "Array.from",
          "line": 308
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "map",
          "line": 308
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "element.textContent.trim",
          "line": 308
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "appendChordLegacy",
          "line": 316
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "document.getElementById",
          "line": 317
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 318
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "document.createElement",
          "line": 320
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "newChord.classList.add",
          "line": 321
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "newChord.setAttribute",
          "line": 322
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "document.createElement",
          "line": 324
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "content.classList.add",
          "line": 325
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "removeChord",
          "line": 326
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "newChord.appendChild",
          "line": 328
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "chordGroup.appendChild",
          "line": 329
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 332
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "window.addDragListeners",
          "line": 333
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "removeChordLegacy",
          "line": 342
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "button.closest",
          "line": 343
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 344
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "document.getElementById",
          "line": 346
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 347
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "newChord.setAttribute",
          "line": 349
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "newChord.addEventListener",
          "line": 351
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "chordGroup.removeChild",
          "line": 352
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 354
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "window.onInputChordsChanged",
          "line": 355
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "addChordFromButtonLegacy",
          "line": 365
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 366
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "this.appendChordLegacy",
          "line": 367
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "if ",
          "line": 369
        },
        {
          "caller": "modules\\inputManager.js",
          "callee": "window.onInputChordsChanged",
          "line": 370
        }
      ],
      "modules\\integrationBridge.js": [
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "constructor",
          "line": 7
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "this.setupLegacyDataWatcher",
          "line": 13
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "setupLegacyDataWatcher",
          "line": 16
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 18
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "this.onLegacyDataReady",
          "line": 19
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "setInterval",
          "line": 24
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 25
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "clearInterval",
          "line": 26
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "this.onLegacyDataReady",
          "line": 27
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "setTimeout",
          "line": 32
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "clearInterval",
          "line": 33
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 34
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "console.warn",
          "line": 35
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "this.useFallbackChordData",
          "line": 36
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "onLegacyDataReady",
          "line": 41
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "console.log",
          "line": 44
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "Object.keys",
          "line": 44
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "this.checkReadiness",
          "line": 45
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "checkReadiness",
          "line": 49
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 50
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "console.log",
          "line": 51
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 52
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "console.log",
          "line": 53
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "this.readyCallbacks.forEach",
          "line": 54
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "callback",
          "line": 56
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "catch ",
          "line": 57
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "console.error",
          "line": 58
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "console.log",
          "line": 63
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "setModuleSystemReady",
          "line": 70
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "console.log",
          "line": 72
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "useFallbackChordData",
          "line": 75
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "console.log",
          "line": 91
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "this.checkReadiness",
          "line": 92
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "setModuleSystemReady",
          "line": 95
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "this.checkReadiness",
          "line": 97
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "checkReadiness",
          "line": 100
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 101
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "this.executePendingCallbacks",
          "line": 102
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "onReady",
          "line": 106
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 107
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "callback",
          "line": 108
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "this.pendingCallbacks.push",
          "line": 110
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "executePendingCallbacks",
          "line": 114
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "this.pendingCallbacks.forEach",
          "line": 115
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "callback",
          "line": 117
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "catch ",
          "line": 118
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "console.error",
          "line": 119
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "getAvailableChordsForType",
          "line": 125
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 126
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "console.warn",
          "line": 127
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "switch ",
          "line": 131
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "bridgeLegacyFunctions",
          "line": 158
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 159
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 162
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "originalSelectChordName",
          "line": 165
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "app.modules.stateManager.updateCurrentChord",
          "line": 167
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "app.modules.stateManager.get",
          "line": 169
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 174
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "originalSelectChordType",
          "line": 177
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "app.modules.stateManager.updateCurrentChord",
          "line": 179
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "app.modules.stateManager.get",
          "line": 180
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 187
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "originalOnChordTypeChanged",
          "line": 190
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "document.querySelector",
          "line": 192
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 193
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "app.modules.stateManager.updateAutoharpType",
          "line": 194
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 200
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "originalOnInputChordsChanged",
          "line": 203
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "console.log",
          "line": 208
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "getCurrentAutoharpType",
          "line": 212
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "document.querySelector",
          "line": 213
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "getCurrentSelectedChords",
          "line": 218
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 220
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "window.initializeDOMReferences",
          "line": 221
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 225
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "window.getInputChords",
          "line": 227
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "catch ",
          "line": 228
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "console.warn",
          "line": 229
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "document.querySelectorAll",
          "line": 234
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "Array.from",
          "line": 235
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "map",
          "line": 235
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "el.querySelector",
          "line": 236
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "span.textContent.trim",
          "line": 237
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "el.textContent.trim",
          "line": 237
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "filter",
          "line": 238
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "syncLegacyToNewSystem",
          "line": 242
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 243
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "this.getCurrentAutoharpType",
          "line": 247
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "app.modules.stateManager.updateAutoharpType",
          "line": 248
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "this.getCurrentSelectedChords",
          "line": 251
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 252
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "app.modules.inputManager.replaceChords",
          "line": 253
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "console.log",
          "line": 256
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "catch ",
          "line": 257
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "console.error",
          "line": 258
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "syncNewSystemToLegacy",
          "line": 263
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 264
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "app.modules.stateManager.get",
          "line": 267
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "if ",
          "line": 270
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "window.renderInputChords",
          "line": 271
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "console.log",
          "line": 274
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "catch ",
          "line": 275
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "console.error",
          "line": 276
        },
        {
          "caller": "modules\\integrationBridge.js",
          "callee": "IntegrationBridge",
          "line": 282
        }
      ],
      "modules\\stateManager.js": [
        {
          "caller": "modules\\stateManager.js",
          "callee": "constructor",
          "line": 7
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.loadFromStorage",
          "line": 25
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.initializeAvailableChords",
          "line": 28
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "initializeAvailableChords",
          "line": 32
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.get",
          "line": 33
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.getAvailableChordsForType",
          "line": 34
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "if ",
          "line": 35
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.set",
          "line": 36
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "console.log",
          "line": 37
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "console.warn",
          "line": 39
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.set",
          "line": 42
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "console.log",
          "line": 43
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "subscribe",
          "line": 48
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "if ",
          "line": 49
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "push",
          "line": 52
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "return ",
          "line": 55
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "indexOf",
          "line": 56
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "if ",
          "line": 57
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "splice",
          "line": 58
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "emit",
          "line": 63
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "if ",
          "line": 64
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "forEach",
          "line": 65
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "callback",
          "line": 67
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "catch ",
          "line": 68
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "console.error",
          "line": 69
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "getState",
          "line": 76
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "get",
          "line": 80
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "setState",
          "line": 85
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "Object.keys",
          "line": 90
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "forEach",
          "line": 90
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "if ",
          "line": 91
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.emit",
          "line": 92
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.getState",
          "line": 95
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.emit",
          "line": 100
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.getState",
          "line": 102
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.saveToStorage",
          "line": 106
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "set",
          "line": 109
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.setState",
          "line": 110
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "updateAutoharpType",
          "line": 114
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.getAvailableChordsForType",
          "line": 115
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.setState",
          "line": 117
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "updateSelectedChords",
          "line": 127
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.setState",
          "line": 128
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "addSelectedChord",
          "line": 131
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.setState",
          "line": 135
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "removeSelectedChord",
          "line": 138
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.state.selectedChords.filter",
          "line": 139
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.setState",
          "line": 140
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "clearSelectedChords",
          "line": 143
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.setState",
          "line": 144
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "updateProgressions",
          "line": 152
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.setState",
          "line": 153
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "updateSuggestions",
          "line": 156
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.setState",
          "line": 157
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "toggleAudio",
          "line": 160
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.setState",
          "line": 161
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "setInputMode",
          "line": 165
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "if ",
          "line": 166
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "includes",
          "line": 166
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.setState",
          "line": 167
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "updateCurrentChord",
          "line": 171
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.setState",
          "line": 172
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "getAvailableChordsForType",
          "line": 179
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "if ",
          "line": 181
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "window.integrationBridge.getAvailableChordsForType",
          "line": 182
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "switch ",
          "line": 188
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "isChordAvailable",
          "line": 214
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.state.availableChords.includes",
          "line": 215
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "isChordSelected",
          "line": 218
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.state.selectedChords.includes",
          "line": 219
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "getSelectedChordCount",
          "line": 222
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "saveToStorage",
          "line": 227
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "localStorage.setItem",
          "line": 235
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "JSON.stringify",
          "line": 235
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "catch ",
          "line": 236
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "console.warn",
          "line": 237
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "loadFromStorage",
          "line": 241
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "localStorage.getItem",
          "line": 243
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "if ",
          "line": 244
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "JSON.parse",
          "line": 245
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.getAvailableChordsForType",
          "line": 254
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "catch ",
          "line": 256
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "console.warn",
          "line": 257
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "clearStorage",
          "line": 261
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "localStorage.removeItem",
          "line": 263
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "catch ",
          "line": 264
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "console.warn",
          "line": 265
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "validateState",
          "line": 270
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "if ",
          "line": 273
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "issues.push",
          "line": 274
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "if ",
          "line": 277
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "Array.isArray",
          "line": 277
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "issues.push",
          "line": 278
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "if ",
          "line": 281
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "Array.isArray",
          "line": 281
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "issues.push",
          "line": 282
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.state.selectedChords.filter",
          "line": 286
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.state.availableChords.includes",
          "line": 287
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "if ",
          "line": 290
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "issues.push",
          "line": 291
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "invalidChords.join",
          "line": 291
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "reset",
          "line": 301
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.emit",
          "line": 316
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.getState",
          "line": 316
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.saveToStorage",
          "line": 317
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "getDebugInfo",
          "line": 321
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.validateState",
          "line": 322
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.getState",
          "line": 324
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "Object.keys",
          "line": 326
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "map",
          "line": 326
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "exportState",
          "line": 334
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.getState",
          "line": 336
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "Date.now",
          "line": 337
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "importState",
          "line": 342
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "if ",
          "line": 343
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "Error",
          "line": 344
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "if ",
          "line": 348
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "Error",
          "line": 349
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.getAvailableChordsForType",
          "line": 356
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "if ",
          "line": 359
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "Array.isArray",
          "line": 359
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "stateToImport.selectedChords.filter",
          "line": 360
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "stateToImport.availableChords.includes",
          "line": 361
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.emit",
          "line": 366
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.getState",
          "line": 366
        },
        {
          "caller": "modules\\stateManager.js",
          "callee": "this.saveToStorage",
          "line": 367
        }
      ],
      "modules\\storageManager.js": [
        {
          "caller": "modules\\storageManager.js",
          "callee": "constructor",
          "line": 7
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "save",
          "line": 13
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "Date.now",
          "line": 17
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "localStorage.setItem",
          "line": 20
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "JSON.stringify",
          "line": 20
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "catch ",
          "line": 22
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "console.warn",
          "line": 23
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "load",
          "line": 28
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "localStorage.getItem",
          "line": 30
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "if ",
          "line": 31
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "JSON.parse",
          "line": 33
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "if ",
          "line": 36
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "console.warn",
          "line": 37
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "catch ",
          "line": 42
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "console.warn",
          "line": 43
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "remove",
          "line": 48
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "localStorage.removeItem",
          "line": 50
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "catch ",
          "line": 52
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "console.warn",
          "line": 53
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "exists",
          "line": 58
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "localStorage.getItem",
          "line": 59
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "savePreferences",
          "line": 63
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.save",
          "line": 64
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "loadPreferences",
          "line": 72
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.load",
          "line": 73
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "saveChordHistory",
          "line": 84
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "Array.isArray",
          "line": 86
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "chords.slice",
          "line": 86
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.save",
          "line": 87
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "loadChordHistory",
          "line": 90
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.load",
          "line": 91
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "addToChordHistory",
          "line": 94
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "if ",
          "line": 95
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.loadChordHistory",
          "line": 97
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "history.indexOf",
          "line": 100
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "if ",
          "line": 101
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "history.splice",
          "line": 102
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "history.unshift",
          "line": 106
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.saveChordHistory",
          "line": 108
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "saveChordProgression",
          "line": 111
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "if ",
          "line": 112
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "Array.isArray",
          "line": 112
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.loadChordProgressions",
          "line": 114
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "Date.now",
          "line": 117
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "Date.now",
          "line": 118
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.save",
          "line": 121
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "loadChordProgressions",
          "line": 124
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.load",
          "line": 125
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "deleteChordProgression",
          "line": 128
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.loadChordProgressions",
          "line": 129
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.save",
          "line": 131
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "updateProgressionLastUsed",
          "line": 134
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.loadChordProgressions",
          "line": 135
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "if ",
          "line": 136
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "Date.now",
          "line": 137
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.save",
          "line": 138
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "saveSession",
          "line": 144
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.save",
          "line": 145
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "Date.now",
          "line": 148
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "loadSession",
          "line": 152
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.load",
          "line": 153
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "if ",
          "line": 156
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "Date.now",
          "line": 157
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "if ",
          "line": 158
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.clearSession",
          "line": 159
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "clearSession",
          "line": 167
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.remove",
          "line": 168
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "saveUsageStats",
          "line": 172
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.loadUsageStats",
          "line": 173
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "Date.now",
          "line": 177
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.save",
          "line": 179
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "loadUsageStats",
          "line": 182
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.load",
          "line": 183
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "Date.now",
          "line": 191
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "incrementStat",
          "line": 195
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.loadUsageStats",
          "line": 196
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.saveUsageStats",
          "line": 198
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "incrementChordUsage",
          "line": 201
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.loadUsageStats",
          "line": 202
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "if ",
          "line": 203
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.saveUsageStats",
          "line": 205
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "exportAllData",
          "line": 209
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "keys.forEach",
          "line": 218
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.load",
          "line": 219
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "if ",
          "line": 220
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "Date.now",
          "line": 227
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "importAllData",
          "line": 232
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "if ",
          "line": 233
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "Error",
          "line": 234
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "if ",
          "line": 238
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "console.warn",
          "line": 239
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "keys.forEach",
          "line": 250
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "if ",
          "line": 251
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.save",
          "line": 252
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "clearAllData",
          "line": 260
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "keys.forEach",
          "line": 270
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.remove",
          "line": 271
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "getStorageInfo",
          "line": 277
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "for ",
          "line": 283
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "localStorage.key",
          "line": 284
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "if ",
          "line": 285
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "key.startsWith",
          "line": 285
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "localStorage.getItem",
          "line": 286
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "Blob",
          "line": 287
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "keys.push",
          "line": 289
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.getStorageQuota",
          "line": 300
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "catch ",
          "line": 302
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "console.warn",
          "line": 303
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "getStorageQuota",
          "line": 308
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "for ",
          "line": 317
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "while ",
          "line": 321
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "localStorage.setItem",
          "line": 323
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "localStorage.removeItem",
          "line": 324
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "catch ",
          "line": 327
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "catch ",
          "line": 331
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "localStorage.removeItem",
          "line": 333
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "catch ",
          "line": 337
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "cleanupOldData",
          "line": 343
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "Date.now",
          "line": 344
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.loadChordProgressions",
          "line": 347
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "Object.keys",
          "line": 350
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "forEach",
          "line": 350
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "if ",
          "line": 352
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "if ",
          "line": 358
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.save",
          "line": 359
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.loadChordHistory",
          "line": 363
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "if ",
          "line": 364
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "this.saveChordHistory",
          "line": 365
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "history.slice",
          "line": 365
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "migrateFromOldVersion",
          "line": 375
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "console.log",
          "line": 378
        },
        {
          "caller": "modules\\storageManager.js",
          "callee": "StorageManager",
          "line": 384
        }
      ],
      "simple-duplicate-check.js": [
        {
          "caller": "simple-duplicate-check.js",
          "callee": "require",
          "line": 8
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "require",
          "line": 9
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "findJavaScriptFiles",
          "line": 11
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "fs.readdirSync",
          "line": 13
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "for ",
          "line": 15
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "path.join",
          "line": 16
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "if ",
          "line": 18
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "entry.isDirectory",
          "line": 18
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "entry.name.startsWith",
          "line": 18
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "files.push",
          "line": 19
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "findJavaScriptFiles",
          "line": 19
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "if ",
          "line": 20
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "entry.isFile",
          "line": 20
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "entry.name.endsWith",
          "line": 20
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "files.push",
          "line": 21
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "extractMethods",
          "line": 28
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "fs.readFileSync",
          "line": 29
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "content.split",
          "line": 30
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "path.relative",
          "line": 31
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "process.cwd",
          "line": 31
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "lines.forEach",
          "line": 44
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "line.trim",
          "line": 46
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "if ",
          "line": 49
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "trimmedLine.startsWith",
          "line": 49
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "trimmedLine.startsWith",
          "line": 49
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "patterns.forEach",
          "line": 53
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "trimmedLine.match",
          "line": 54
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "if ",
          "line": 55
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "if ",
          "line": 59
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "includes",
          "line": 59
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "methods.push",
          "line": 63
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "checkForDuplicates",
          "line": 77
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 78
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 79
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "process.cwd",
          "line": 81
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "findJavaScriptFiles",
          "line": 82
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 84
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "jsFiles.forEach",
          "line": 88
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "extractMethods",
          "line": 89
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "allMethods.push",
          "line": 90
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "allMethods.forEach",
          "line": 95
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "if ",
          "line": 96
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "push",
          "line": 99
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "Object.entries",
          "line": 106
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "forEach",
          "line": 106
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "if ",
          "line": 107
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "methods.forEach",
          "line": 110
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "if ",
          "line": 111
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "push",
          "line": 114
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "Object.entries",
          "line": 117
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "forEach",
          "line": 117
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "if ",
          "line": 118
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "sameFileDuplicates.push",
          "line": 119
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "if ",
          "line": 128
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "duplicates.push",
          "line": 129
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 138
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 139
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 140
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "Object.keys",
          "line": 140
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 141
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 142
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "if ",
          "line": 145
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 146
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "duplicates ",
          "line": 146
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "sameFileDuplicates.forEach",
          "line": 147
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 148
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "dup.methods.forEach",
          "line": 149
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 150
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 153
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "duplicates.filter",
          "line": 157
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "Set",
          "line": 158
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "dup.methods.map",
          "line": 158
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "if ",
          "line": 162
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 163
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "duplicates ",
          "line": 163
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "crossFileDuplicates.forEach",
          "line": 164
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 165
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "dup.methods.forEach",
          "line": 166
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 167
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 170
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "if ",
          "line": 174
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 175
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "if ",
          "line": 176
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 177
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 178
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "intentional ",
          "line": 178
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "console.log",
          "line": 180
        },
        {
          "caller": "simple-duplicate-check.js",
          "callee": "checkForDuplicates",
          "line": 185
        }
      ],
      "tests\\test-chord-logic-specialist.js": [
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 7
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 10
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 14
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 18
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "expectedTypes.join",
          "line": 18
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 28
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "Object.entries",
          "line": 29
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "forEach",
          "line": 29
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 30
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "catch ",
          "line": 33
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.error",
          "line": 34
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 37
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 40
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 50
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "testTranspositions.forEach",
          "line": 51
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 52
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 71
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "testProgressions.forEach",
          "line": 72
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 73
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 74
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "test.chords.join",
          "line": 74
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "catch ",
          "line": 77
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.error",
          "line": 78
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 81
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 84
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 101
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "requiredMethods.forEach",
          "line": 102
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 103
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 114
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "testChords.forEach",
          "line": 115
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 117
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "catch ",
          "line": 120
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.error",
          "line": 121
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 124
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 127
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 137
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 138
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "testWorkflow.inputChords.join",
          "line": 138
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 139
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 140
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 141
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 142
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 150
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "capoTests.forEach",
          "line": 151
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 152
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "test.chords.join",
          "line": 152
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "catch ",
          "line": 155
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.error",
          "line": 156
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 159
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 162
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 172
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "edgeCases.forEach",
          "line": 173
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 174
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 183
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 184
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "largeProgression.join",
          "line": 184
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "catch ",
          "line": 186
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.error",
          "line": 187
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 190
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 193
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 202
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "circleOfFifthsTests.forEach",
          "line": 203
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 204
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "test.expectedRelated.join",
          "line": 204
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 214
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "enharmonicTests.forEach",
          "line": 215
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 216
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "catch ",
          "line": 219
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.error",
          "line": 220
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 223
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 224
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 225
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 226
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 227
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 228
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 229
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 230
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 231
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 232
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 233
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 234
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 235
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 236
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 237
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 238
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 239
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 240
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 241
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 242
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "console.log",
          "line": 243
        },
        {
          "caller": "tests\\test-chord-logic-specialist.js",
          "callee": "if ",
          "line": 246
        }
      ],
      "tests\\test-duplicate-chord-addition.js": [
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 6
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "testDuplicateChordAddition",
          "line": 9
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "import",
          "line": 12
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "import",
          "line": 13
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "import",
          "line": 14
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "ChordParser",
          "line": 18
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "AudioManager",
          "line": 19
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "InputManager",
          "line": 20
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 22
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 25
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "inputManager.addChord",
          "line": 26
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 27
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 28
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "inputManager.selectedChords.join",
          "line": 28
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 31
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "inputManager.addChord",
          "line": 32
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 33
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 34
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "inputManager.selectedChords.join",
          "line": 34
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 37
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "inputManager.addChord",
          "line": 38
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 39
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 40
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "inputManager.selectedChords.join",
          "line": 40
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 43
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "chord ",
          "line": 43
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "inputManager.addChord",
          "line": 44
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 45
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 46
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "inputManager.selectedChords.join",
          "line": 46
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 49
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "inputManager.addChord",
          "line": 50
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 51
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 52
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "inputManager.selectedChords.join",
          "line": 52
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 55
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 56
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 57
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "chords ",
          "line": 57
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 58
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "inputManager.selectedChords.join",
          "line": 58
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "if ",
          "line": 60
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 61
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.log",
          "line": 64
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "catch ",
          "line": 68
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "console.error",
          "line": 69
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "if ",
          "line": 75
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "document.addEventListener",
          "line": 76
        },
        {
          "caller": "tests\\test-duplicate-chord-addition.js",
          "callee": "testDuplicateChordAddition",
          "line": 78
        }
      ],
      "tests\\test-duplicate-fixes.js": [
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "testDuplicateFixes",
          "line": 9
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 10
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 16
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 20
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "testCases.forEach",
          "line": 32
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "window.formatChordName",
          "line": 33
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 34
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 36
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 38
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 42
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 43
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 46
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "FAILED ",
          "line": 46
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 49
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "catch ",
          "line": 51
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 52
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 56
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 64
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "window.parseChordString",
          "line": 65
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 66
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 67
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "parseChordString",
          "line": 67
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "JSON.stringify",
          "line": 67
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 70
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "parseChordString",
          "line": 70
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 73
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 77
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "chordParser.parseChord",
          "line": 79
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 80
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 81
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "chordParser.parseChord",
          "line": 81
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 84
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "chordParser.parseChord",
          "line": 84
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 87
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 90
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 91
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 94
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "FAILED ",
          "line": 94
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "catch ",
          "line": 96
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 97
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 101
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 105
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "app.clearAllChords",
          "line": 109
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "app.addChord",
          "line": 115
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 116
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 117
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "addChord",
          "line": 117
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 120
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "addChord",
          "line": 120
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "app.getSelectedChords",
          "line": 124
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 125
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "selectedChords.includes",
          "line": 125
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 126
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "getSelectedChords",
          "line": 126
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 129
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "getSelectedChords",
          "line": 129
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "JSON.stringify",
          "line": 129
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "app.removeChord",
          "line": 133
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 134
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 135
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "removeChord",
          "line": 135
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 138
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "removeChord",
          "line": 138
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "app.getSelectedChords",
          "line": 142
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 143
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "selectedChordsAfterRemoval.includes",
          "line": 143
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 144
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "getSelectedChords",
          "line": 144
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 147
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "getSelectedChords",
          "line": 147
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "JSON.stringify",
          "line": 147
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 150
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 151
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 154
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "FAILED ",
          "line": 154
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 157
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "catch ",
          "line": 159
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 160
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 164
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 168
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 172
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 173
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 178
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "callable ",
          "line": 178
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "catch ",
          "line": 180
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 181
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 184
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 187
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "catch ",
          "line": 189
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 190
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 194
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 195
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 197
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 198
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 200
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "runTestWhenAppReady",
          "line": 207
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 208
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "testDuplicateFixes",
          "line": 209
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 211
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "setTimeout",
          "line": 212
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "if ",
          "line": 220
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "document.addEventListener",
          "line": 221
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "setTimeout",
          "line": 222
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "setTimeout",
          "line": 225
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "console.log",
          "line": 228
        },
        {
          "caller": "tests\\test-duplicate-fixes.js",
          "callee": "testDuplicateFixes",
          "line": 228
        }
      ],
      "tests\\test-duplicate-interaction.js": [
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 6
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "testDuplicateChordInteraction",
          "line": 9
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 10
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "document.getElementById",
          "line": 13
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "if ",
          "line": 14
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.error",
          "line": 15
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "document.getElementById",
          "line": 20
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "if ",
          "line": 21
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.error",
          "line": 22
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 26
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "getCurrentChordCount",
          "line": 29
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "chordContainer.querySelectorAll",
          "line": 30
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "getCurrentChords",
          "line": 35
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "chordContainer.querySelectorAll",
          "line": 36
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "Array.from",
          "line": 37
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "map",
          "line": 37
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 41
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "getCurrentChordCount",
          "line": 42
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 43
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "textInput.dispatchEvent",
          "line": 47
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "Event",
          "line": 47
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "setTimeout",
          "line": 50
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 51
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "KeyboardEvent",
          "line": 52
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "textInput.dispatchEvent",
          "line": 57
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "setTimeout",
          "line": 60
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "getCurrentChordCount",
          "line": 61
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "getCurrentChords",
          "line": 62
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 63
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 64
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "chordsAfterFirst.join",
          "line": 64
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "if ",
          "line": 66
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 67
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 70
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "textInput.dispatchEvent",
          "line": 74
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "Event",
          "line": 74
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "setTimeout",
          "line": 77
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 78
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "KeyboardEvent",
          "line": 79
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "textInput.dispatchEvent",
          "line": 84
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "setTimeout",
          "line": 87
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "getCurrentChordCount",
          "line": 88
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "getCurrentChords",
          "line": 89
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 90
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 91
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "finalChords.join",
          "line": 91
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 94
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 95
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 96
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 97
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "if ",
          "line": 99
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 100
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 101
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "if ",
          "line": 103
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 104
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 105
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 108
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "console.log",
          "line": 114
        },
        {
          "caller": "tests\\test-duplicate-interaction.js",
          "callee": "testDuplicateChordInteraction",
          "line": 122
        }
      ],
      "tests\\test-event-audit-integration.js": [
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "testEventAuditIntegration",
          "line": 10
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 11
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "if ",
          "line": 17
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 18
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 22
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 25
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "document.getElementById",
          "line": 28
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "document.getElementById",
          "line": 29
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "if ",
          "line": 31
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 32
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "textInput.focus",
          "line": 40
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "textInput.dispatchEvent",
          "line": 43
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "Event",
          "line": 43
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "setTimeout",
          "line": 46
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "KeyboardEvent",
          "line": 48
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "textInput.dispatchEvent",
          "line": 53
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "setTimeout",
          "line": 56
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "chordContainer.querySelectorAll",
          "line": 58
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 60
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 61
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "JSON.stringify",
          "line": 61
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 62
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "if ",
          "line": 64
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "selectedChords.includes",
          "line": 64
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 65
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 68
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "window.AutoharpApp.modules.inputManager.selectedChords.push",
          "line": 73
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "runTest2",
          "line": 76
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "catch ",
          "line": 80
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 81
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "runTest2",
          "line": 82
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "runTest2",
          "line": 86
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 87
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "document.getElementById",
          "line": 90
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "document.getElementById",
          "line": 91
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "document.getElementById",
          "line": 92
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "if ",
          "line": 94
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 95
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "addButton.click",
          "line": 105
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "setTimeout",
          "line": 108
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "chordContainer.querySelectorAll",
          "line": 110
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 112
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 113
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "JSON.stringify",
          "line": 113
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 114
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "if ",
          "line": 116
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "selectedChords.includes",
          "line": 116
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 117
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 120
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "window.AutoharpApp.modules.inputManager.selectedChords.push",
          "line": 125
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "runTest3",
          "line": 128
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "catch ",
          "line": 131
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 132
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "runTest3",
          "line": 133
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "runTest3",
          "line": 138
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 139
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "document.getElementById",
          "line": 142
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "document.getElementById",
          "line": 143
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "if ",
          "line": 145
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 146
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "window.AutoharpApp.modules.inputManager.addChord",
          "line": 150
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "window.AutoharpApp.modules.inputManager.addChord",
          "line": 151
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 153
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "clearAllButton.click",
          "line": 156
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "setTimeout",
          "line": 159
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "chordContainer.querySelectorAll",
          "line": 161
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 163
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 164
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "if ",
          "line": 166
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 167
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 170
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "runTest4",
          "line": 174
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "catch ",
          "line": 177
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 178
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "runTest4",
          "line": 179
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "runTest4",
          "line": 184
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 185
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "document.getElementById",
          "line": 188
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "if ",
          "line": 190
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 191
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 196
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "soundToggle.click",
          "line": 199
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "setTimeout",
          "line": 201
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 205
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 206
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "if ",
          "line": 208
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 209
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 212
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "runTest5",
          "line": 216
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "catch ",
          "line": 219
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 220
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "runTest5",
          "line": 221
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "runTest5",
          "line": 226
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 227
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "document.getElementById",
          "line": 230
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "document.getElementById",
          "line": 231
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "if ",
          "line": 233
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 234
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "radio21.dispatchEvent",
          "line": 238
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "Event",
          "line": 238
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "setTimeout",
          "line": 240
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 244
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 245
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 246
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "if ",
          "line": 248
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 249
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 252
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "finishTests",
          "line": 256
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "catch ",
          "line": 259
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 260
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "finishTests",
          "line": 261
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "finishTests",
          "line": 265
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 266
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 267
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 268
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "Math.round",
          "line": 268
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "if ",
          "line": 270
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 271
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 273
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "testSpecificWorkflow",
          "line": 283
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 284
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "switch ",
          "line": 286
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "testChordInputWorkflow",
          "line": 288
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "testButtonClickWorkflow",
          "line": 291
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "testKeyboardShortcutWorkflow",
          "line": 294
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 297
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "testChordInputWorkflow",
          "line": 301
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 302
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "document.getElementById",
          "line": 304
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "if ",
          "line": 305
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 306
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "textInput.dispatchEvent",
          "line": 312
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "Event",
          "line": 312
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "setTimeout",
          "line": 314
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "document.getElementById",
          "line": 315
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 316
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 317
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "KeyboardEvent",
          "line": 320
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "textInput.dispatchEvent",
          "line": 325
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "setTimeout",
          "line": 327
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 329
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "JSON.stringify",
          "line": 329
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "runEventAuditTestWhenReady",
          "line": 335
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "if ",
          "line": 336
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "testEventAuditIntegration",
          "line": 337
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 339
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "setTimeout",
          "line": 340
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "if ",
          "line": 350
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "document.addEventListener",
          "line": 351
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "setTimeout",
          "line": 352
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "setTimeout",
          "line": 355
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 358
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 359
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 360
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "testEventAuditIntegration",
          "line": 360
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 361
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "testSpecificWorkflow",
          "line": 361
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "console.log",
          "line": 362
        },
        {
          "caller": "tests\\test-event-audit-integration.js",
          "callee": "testChordInputWorkflow",
          "line": 362
        }
      ],
      "tests\\test-fuzzy-matching.js": [
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "testFuzzyChordMatching",
          "line": 9
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 10
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 39
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "if ",
          "line": 42
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 43
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "testCases.forEach",
          "line": 49
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 51
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "chordParser.parseChord",
          "line": 54
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "if ",
          "line": 56
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 57
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 60
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "chordParser.normalizeChordInput",
          "line": 63
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 64
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "catch ",
          "line": 66
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 67
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 70
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 74
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 75
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 76
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "Math.round",
          "line": 76
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "if ",
          "line": 78
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 79
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 81
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "testNormalizationOnly",
          "line": 90
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 91
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "if ",
          "line": 93
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 94
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "testCases.forEach",
          "line": 107
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "chordParser.normalizeChordInput",
          "line": 109
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 110
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "catch ",
          "line": 111
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 112
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "testChordInput",
          "line": 120
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "if ",
          "line": 121
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 122
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 128
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "chordParser.normalizeChordInput",
          "line": 131
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 132
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "chordParser.parseChord",
          "line": 134
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 135
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "catch ",
          "line": 138
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 139
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "runFuzzyTestWhenReady",
          "line": 145
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "if ",
          "line": 146
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "testFuzzyChordMatching",
          "line": 147
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 149
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "setTimeout",
          "line": 150
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "if ",
          "line": 160
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "document.addEventListener",
          "line": 161
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "setTimeout",
          "line": 162
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "setTimeout",
          "line": 165
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 168
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 169
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 170
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "testFuzzyChordMatching",
          "line": 170
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 171
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "testNormalizationOnly",
          "line": 171
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "console.log",
          "line": 172
        },
        {
          "caller": "tests\\test-fuzzy-matching.js",
          "callee": "testChordInput",
          "line": 172
        }
      ],
      "tests\\test-input-flow-debug.js": [
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 6
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "addInputFlowDebugging",
          "line": 8
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "document.getElementById",
          "line": 11
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "document.getElementById",
          "line": 12
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "if ",
          "line": 14
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 15
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 19
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "textInput.addEventListener",
          "line": 22
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 23
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "textInput.addEventListener",
          "line": 26
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 27
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "textInput.addEventListener",
          "line": 30
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 31
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "textInput.addEventListener",
          "line": 34
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 35
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "textInput.addEventListener",
          "line": 38
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 39
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "MutationObserver",
          "line": 43
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "mutations.forEach",
          "line": 44
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "if ",
          "line": 45
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 47
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "if ",
          "line": 48
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "suggestionsContainer.querySelectorAll",
          "line": 49
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 50
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "if ",
          "line": 51
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "Array.from",
          "line": 52
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "map",
          "line": 52
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 53
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "suggestionTexts.join",
          "line": 53
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "if ",
          "line": 58
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 59
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "suggestionsContainer.querySelectorAll",
          "line": 60
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 61
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "observer.observe",
          "line": 66
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "if ",
          "line": 73
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "function",
          "line": 78
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 79
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "originalHandleTextInput.call",
          "line": 80
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 81
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "function",
          "line": 87
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 88
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 89
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "originalHandleTextInputSubmit.call",
          "line": 90
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 91
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 92
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "function",
          "line": 98
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 99
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "originalClearSuggestions.call",
          "line": 100
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 101
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "function",
          "line": 107
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 108
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "originalUpdateSuggestions.call",
          "line": 109
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 110
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 114
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 116
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 119
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 120
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 121
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 122
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.log",
          "line": 123
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "catch ",
          "line": 125
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "console.error",
          "line": 126
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "if ",
          "line": 131
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "document.addEventListener",
          "line": 132
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "setTimeout",
          "line": 133
        },
        {
          "caller": "tests\\test-input-flow-debug.js",
          "callee": "setTimeout",
          "line": 136
        }
      ],
      "tests\\test-integration.js": [
        {
          "caller": "tests\\test-integration.js",
          "callee": "testIntegration",
          "line": 6
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.log",
          "line": 7
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.log",
          "line": 10
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "if ",
          "line": 11
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.log",
          "line": 12
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "window.integrationBridge.getAvailableChordsForType",
          "line": 15
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.log",
          "line": 16
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.log",
          "line": 17
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "chords21.slice",
          "line": 17
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "if ",
          "line": 19
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.error",
          "line": 20
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.error",
          "line": 23
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.log",
          "line": 27
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "if ",
          "line": 28
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.log",
          "line": 29
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "window.AutoharpApp.getState",
          "line": 31
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.log",
          "line": 32
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "if ",
          "line": 39
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.error",
          "line": 40
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.error",
          "line": 43
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.log",
          "line": 47
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "legacyFunctions.forEach",
          "line": 49
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "if ",
          "line": 50
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.log",
          "line": 51
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.warn",
          "line": 53
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.log",
          "line": 58
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "if ",
          "line": 59
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "window.AutoharpApp.addChord",
          "line": 62
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "if ",
          "line": 63
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.log",
          "line": 64
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "window.AutoharpApp.getSelectedChords",
          "line": 67
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.log",
          "line": 68
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "window.AutoharpApp.clearAllChords",
          "line": 71
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.log",
          "line": 72
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.error",
          "line": 74
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "catch ",
          "line": 76
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.error",
          "line": 77
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.log",
          "line": 82
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "uiElements.forEach",
          "line": 91
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "document.getElementById",
          "line": 92
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "if ",
          "line": 93
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.log",
          "line": 94
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.warn",
          "line": 96
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.log",
          "line": 100
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "runTestWhenReady",
          "line": 104
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "if ",
          "line": 105
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "testIntegration",
          "line": 106
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "if ",
          "line": 107
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.log",
          "line": 108
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "setTimeout",
          "line": 109
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "runTestWhenReady",
          "line": 109
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "console.error",
          "line": 111
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "period ",
          "line": 111
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "if ",
          "line": 116
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "document.addEventListener",
          "line": 117
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "setTimeout",
          "line": 118
        },
        {
          "caller": "tests\\test-integration.js",
          "callee": "setTimeout",
          "line": 121
        }
      ],
      "tests\\test-normalization-fix.js": [
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "testChordNormalizationFix",
          "line": 9
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 10
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "if ",
          "line": 16
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 17
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "if ",
          "line": 23
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 24
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 28
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 31
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "chordParser.getSuggestions",
          "line": 34
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 35
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 36
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "JSON.stringify",
          "line": 36
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "suggestions.every",
          "line": 39
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "chord.startsWith",
          "line": 39
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "if ",
          "line": 40
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 41
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 44
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "catch ",
          "line": 46
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 47
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 49
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 52
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "inputManager.addChord",
          "line": 59
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 60
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 61
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 62
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "JSON.stringify",
          "line": 62
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "if ",
          "line": 64
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "inputManager.selectedChords.includes",
          "line": 64
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "inputManager.selectedChords.includes",
          "line": 64
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 65
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 68
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "inputManager.selectedChords.push",
          "line": 73
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "catch ",
          "line": 74
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 75
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 77
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 80
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "chordParser.parseChord",
          "line": 83
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 84
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 85
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "if ",
          "line": 87
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 88
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 91
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "catch ",
          "line": 93
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 94
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 96
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 99
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "chordParser.extractRootNote",
          "line": 102
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 103
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 104
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "if ",
          "line": 106
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 107
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 110
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "catch ",
          "line": 112
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 113
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 115
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 118
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "chordParser.parseChord",
          "line": 121
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 122
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 123
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "if ",
          "line": 125
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 126
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 129
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "catch ",
          "line": 131
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 132
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 134
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 137
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 138
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 139
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "Math.round",
          "line": 139
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "if ",
          "line": 141
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 142
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 144
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "testSpecificInput",
          "line": 153
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "if ",
          "line": 154
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 155
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 161
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "chordParser.parseChord",
          "line": 165
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 166
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "catch ",
          "line": 167
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 168
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "chordParser.extractRootNote",
          "line": 173
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 174
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "catch ",
          "line": 175
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 176
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "chordParser.getSuggestions",
          "line": 181
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 182
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "JSON.stringify",
          "line": 182
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "catch ",
          "line": 183
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 184
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 188
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "inputManager.addChord",
          "line": 188
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "runNormalizationTestWhenReady",
          "line": 192
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "if ",
          "line": 193
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "testChordNormalizationFix",
          "line": 194
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 196
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "setTimeout",
          "line": 197
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "if ",
          "line": 206
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "document.addEventListener",
          "line": 207
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "setTimeout",
          "line": 208
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "setTimeout",
          "line": 211
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 214
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 215
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 216
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "testChordNormalizationFix",
          "line": 216
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "console.log",
          "line": 217
        },
        {
          "caller": "tests\\test-normalization-fix.js",
          "callee": "testSpecificInput",
          "line": 217
        }
      ],
      "tests\\test-suggestion-panel-fix.js": [
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 5
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "setTimeout",
          "line": 8
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 9
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "document.getElementById",
          "line": 11
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "document.getElementById",
          "line": 12
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "if ",
          "line": 14
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.error",
          "line": 15
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 19
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 22
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "textInput.focus",
          "line": 23
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "Event",
          "line": 27
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "textInput.dispatchEvent",
          "line": 28
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "setTimeout",
          "line": 30
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "suggestionsContainer.querySelectorAll",
          "line": 31
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 32
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 33
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "if ",
          "line": 35
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 36
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 39
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "KeyboardEvent",
          "line": 41
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "textInput.dispatchEvent",
          "line": 48
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "setTimeout",
          "line": 50
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "suggestionsContainer.querySelectorAll",
          "line": 51
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 54
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 55
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 56
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "document.getElementById",
          "line": 59
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "chordGroupInputs.querySelectorAll",
          "line": 60
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 61
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "if ",
          "line": 63
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 64
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "textContent.replace",
          "line": 64
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "trim",
          "line": 64
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 68
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 73
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 74
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 75
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "if ",
          "line": 77
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 78
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 80
        },
        {
          "caller": "tests\\test-suggestion-panel-fix.js",
          "callee": "console.log",
          "line": 85
        }
      ],
      "tests\\test-transcription-debug.js": [
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 6
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "runTranscriptionDebugTest",
          "line": 9
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 11
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "getInputChords",
          "line": 11
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "if ",
          "line": 14
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "window.getInputChords",
          "line": 15
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 16
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "getInputChords",
          "line": 16
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 17
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 19
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "getInputChords",
          "line": 19
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 23
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "parseChordString",
          "line": 23
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "if ",
          "line": 28
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 29
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "parseChordString",
          "line": 29
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "testChords.forEach",
          "line": 31
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "window.parseChordString",
          "line": 32
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 33
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "parseChordString",
          "line": 33
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 36
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "parseChordString",
          "line": 36
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 40
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "calculateResultingChords",
          "line": 40
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "if ",
          "line": 42
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 43
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "calculateResultingChords",
          "line": 43
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 47
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "testProgression.join",
          "line": 47
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "window.calculateResultingChords",
          "line": 49
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 50
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 51
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "if ",
          "line": 53
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 54
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "results.forEach",
          "line": 55
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 56
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "result.chords.forEach",
          "line": 57
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 58
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 62
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 65
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "calculateResultingChords",
          "line": 65
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 69
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "onInputChordsChanged",
          "line": 69
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "if ",
          "line": 71
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 72
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "onInputChordsChanged",
          "line": 72
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "function",
          "line": 78
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 80
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "onInputChordsChanged",
          "line": 80
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "called ",
          "line": 80
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "originalFunction.apply",
          "line": 81
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 84
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "onInputChordsChanged",
          "line": 84
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "setTimeout",
          "line": 87
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 89
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "onInputChordsChanged",
          "line": 89
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 93
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "onInputChordsChanged",
          "line": 93
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 96
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "document.getElementById",
          "line": 99
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "document.getElementById",
          "line": 100
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "if ",
          "line": 102
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 103
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "chordGroup.querySelectorAll",
          "line": 104
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 105
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "if ",
          "line": 107
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 108
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "Array.from",
          "line": 108
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "map",
          "line": 108
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 111
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "if ",
          "line": 114
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 115
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "chordGroupResults.querySelectorAll",
          "line": 116
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 117
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 119
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.log",
          "line": 122
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "catch ",
          "line": 124
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "console.error",
          "line": 125
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "if ",
          "line": 130
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "document.addEventListener",
          "line": 131
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "setTimeout",
          "line": 132
        },
        {
          "caller": "tests\\test-transcription-debug.js",
          "callee": "setTimeout",
          "line": 135
        }
      ],
      "tests\\test-transcription-end-to-end.js": [
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 6
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "runEndToEndTest",
          "line": 8
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 10
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "if ",
          "line": 13
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 14
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "testChords.forEach",
          "line": 21
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 22
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "window.app.inputManager.addChord",
          "line": 23
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "setTimeout",
          "line": 27
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 28
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "document.getElementById",
          "line": 31
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "if ",
          "line": 32
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 33
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "chordGroupInputs.querySelectorAll",
          "line": 35
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 36
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "chordGroupInputs.querySelectorAll",
          "line": 38
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 39
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "if ",
          "line": 41
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "Array.from",
          "line": 42
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "map",
          "line": 42
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 43
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "chordTexts.join",
          "line": 43
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 46
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 49
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "getInputChords",
          "line": 49
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "if ",
          "line": 51
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "window.getInputChords",
          "line": 52
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 53
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "getInputChords",
          "line": 53
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "inputChords.join",
          "line": 53
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 54
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "if ",
          "line": 56
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 57
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 59
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "if ",
          "line": 61
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "window.calculateResultingChords",
          "line": 62
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 63
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "if ",
          "line": 65
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 66
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "results.forEach",
          "line": 67
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 68
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "result.chords.forEach",
          "line": 69
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 70
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 74
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 77
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 80
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 83
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 86
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "document.getElementById",
          "line": 88
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "if ",
          "line": 89
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 90
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "chordGroupResults.querySelectorAll",
          "line": 92
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 93
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "if ",
          "line": 95
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 96
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 98
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 101
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 104
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "if ",
          "line": 106
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 107
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "onInputChordsChanged",
          "line": 107
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "window.onInputChordsChanged",
          "line": 108
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "setTimeout",
          "line": 111
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "chordGroupResults.querySelectorAll",
          "line": 112
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 113
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "if ",
          "line": 115
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 116
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 118
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 121
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "if ",
          "line": 124
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "window.app.stateManager.clearSelectedChords",
          "line": 125
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 126
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 130
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.log",
          "line": 131
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "catch ",
          "line": 136
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "console.error",
          "line": 137
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "if ",
          "line": 142
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "document.addEventListener",
          "line": 143
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "setTimeout",
          "line": 144
        },
        {
          "caller": "tests\\test-transcription-end-to-end.js",
          "callee": "setTimeout",
          "line": 147
        }
      ],
      "webapp.js": [
        {
          "caller": "webapp.js",
          "callee": "chordParser.parseChord",
          "line": 33
        },
        {
          "caller": "webapp.js",
          "callee": "notation ",
          "line": 34
        },
        {
          "caller": "webapp.js",
          "callee": "parseChordString",
          "line": 37
        },
        {
          "caller": "webapp.js",
          "callee": "chordString.match",
          "line": 39
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 40
        },
        {
          "caller": "webapp.js",
          "callee": "chordString.slice",
          "line": 43
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 48
        },
        {
          "caller": "webapp.js",
          "callee": "remainder.includes",
          "line": 48
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 50
        },
        {
          "caller": "webapp.js",
          "callee": "remainder.includes",
          "line": 50
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 52
        },
        {
          "caller": "webapp.js",
          "callee": "remainder.includes",
          "line": 52
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 54
        },
        {
          "caller": "webapp.js",
          "callee": "remainder.includes",
          "line": 54
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 56
        },
        {
          "caller": "webapp.js",
          "callee": "remainder.includes",
          "line": 56
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 58
        },
        {
          "caller": "webapp.js",
          "callee": "remainder.includes",
          "line": 58
        },
        {
          "caller": "webapp.js",
          "callee": "CHORD_LISTS.autoharp21Maj.concat",
          "line": 70
        },
        {
          "caller": "webapp.js",
          "callee": "CHORD_LISTS.autoharp21Min.concat",
          "line": 70
        },
        {
          "caller": "webapp.js",
          "callee": "initializeAutoharpTypeListeners",
          "line": 81
        },
        {
          "caller": "webapp.js",
          "callee": "document.querySelectorAll",
          "line": 82
        },
        {
          "caller": "webapp.js",
          "callee": "chordInputType.forEach",
          "line": 83
        },
        {
          "caller": "webapp.js",
          "callee": "inputType.addEventListener",
          "line": 84
        },
        {
          "caller": "webapp.js",
          "callee": "onAutoharpTypeChanged",
          "line": 88
        },
        {
          "caller": "webapp.js",
          "callee": "switch ",
          "line": 91
        },
        {
          "caller": "webapp.js",
          "callee": "CHORD_LISTS.autoharp12Maj.concat",
          "line": 99
        },
        {
          "caller": "webapp.js",
          "callee": "CHORD_LISTS.autoharp12Min.concat",
          "line": 99
        },
        {
          "caller": "webapp.js",
          "callee": "CHORD_LISTS.autoharp15Maj.concat",
          "line": 103
        },
        {
          "caller": "webapp.js",
          "callee": "CHORD_LISTS.autoharp15Min.concat",
          "line": 103
        },
        {
          "caller": "webapp.js",
          "callee": "CHORD_LISTS.autoharp21Maj.concat",
          "line": 106
        },
        {
          "caller": "webapp.js",
          "callee": "CHORD_LISTS.autoharp21Min.concat",
          "line": 106
        },
        {
          "caller": "webapp.js",
          "callee": "renderAvailableChords",
          "line": 116
        },
        {
          "caller": "webapp.js",
          "callee": "onInputChordsChanged",
          "line": 117
        },
        {
          "caller": "webapp.js",
          "callee": "renderAvailableChords",
          "line": 120
        },
        {
          "caller": "webapp.js",
          "callee": "document.querySelector",
          "line": 122
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 124
        },
        {
          "caller": "webapp.js",
          "callee": "chordList.forEach",
          "line": 132
        },
        {
          "caller": "webapp.js",
          "callee": "document.createElement",
          "line": 133
        },
        {
          "caller": "webapp.js",
          "callee": "availableChordsContainer.appendChild",
          "line": 136
        },
        {
          "caller": "webapp.js",
          "callee": "initializeDOMReferences",
          "line": 145
        },
        {
          "caller": "webapp.js",
          "callee": "document.getElementById",
          "line": 147
        },
        {
          "caller": "webapp.js",
          "callee": "document.getElementById",
          "line": 148
        },
        {
          "caller": "webapp.js",
          "callee": "initializeChordInputListener",
          "line": 155
        },
        {
          "caller": "webapp.js",
          "callee": "selectChordName",
          "line": 164
        },
        {
          "caller": "webapp.js",
          "callee": "document.querySelector",
          "line": 165
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 168
        },
        {
          "caller": "webapp.js",
          "callee": "selectedButton.classList.contains",
          "line": 168
        },
        {
          "caller": "webapp.js",
          "callee": "document.querySelectorAll",
          "line": 170
        },
        {
          "caller": "webapp.js",
          "callee": "forEach",
          "line": 170
        },
        {
          "caller": "webapp.js",
          "callee": "btn.classList.remove",
          "line": 171
        },
        {
          "caller": "webapp.js",
          "callee": "btn.classList.remove",
          "line": 172
        },
        {
          "caller": "webapp.js",
          "callee": "document.querySelectorAll",
          "line": 180
        },
        {
          "caller": "webapp.js",
          "callee": "forEach",
          "line": 180
        },
        {
          "caller": "webapp.js",
          "callee": "btn.classList.remove",
          "line": 181
        },
        {
          "caller": "webapp.js",
          "callee": "btn.classList.remove",
          "line": 182
        },
        {
          "caller": "webapp.js",
          "callee": "selectedButton.classList.add",
          "line": 186
        },
        {
          "caller": "webapp.js",
          "callee": "document.querySelectorAll",
          "line": 188
        },
        {
          "caller": "webapp.js",
          "callee": "forEach",
          "line": 188
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 189
        },
        {
          "caller": "webapp.js",
          "callee": "btn.classList.add",
          "line": 190
        },
        {
          "caller": "webapp.js",
          "callee": "tryAddChord",
          "line": 195
        },
        {
          "caller": "webapp.js",
          "callee": "selectChordType",
          "line": 198
        },
        {
          "caller": "webapp.js",
          "callee": "document.querySelector",
          "line": 199
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 202
        },
        {
          "caller": "webapp.js",
          "callee": "selectedButton.classList.contains",
          "line": 202
        },
        {
          "caller": "webapp.js",
          "callee": "document.querySelectorAll",
          "line": 204
        },
        {
          "caller": "webapp.js",
          "callee": "forEach",
          "line": 204
        },
        {
          "caller": "webapp.js",
          "callee": "btn.classList.remove",
          "line": 205
        },
        {
          "caller": "webapp.js",
          "callee": "btn.classList.remove",
          "line": 206
        },
        {
          "caller": "webapp.js",
          "callee": "document.querySelectorAll",
          "line": 214
        },
        {
          "caller": "webapp.js",
          "callee": "forEach",
          "line": 214
        },
        {
          "caller": "webapp.js",
          "callee": "btn.classList.remove",
          "line": 215
        },
        {
          "caller": "webapp.js",
          "callee": "btn.classList.remove",
          "line": 216
        },
        {
          "caller": "webapp.js",
          "callee": "selectedButton.classList.add",
          "line": 220
        },
        {
          "caller": "webapp.js",
          "callee": "document.querySelectorAll",
          "line": 222
        },
        {
          "caller": "webapp.js",
          "callee": "forEach",
          "line": 222
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 223
        },
        {
          "caller": "webapp.js",
          "callee": "btn.classList.add",
          "line": 224
        },
        {
          "caller": "webapp.js",
          "callee": "tryAddChord",
          "line": 229
        },
        {
          "caller": "webapp.js",
          "callee": "tryAddChord",
          "line": 232
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 233
        },
        {
          "caller": "webapp.js",
          "callee": "formatChordName",
          "line": 234
        },
        {
          "caller": "webapp.js",
          "callee": "appendChord",
          "line": 235
        },
        {
          "caller": "webapp.js",
          "callee": "onInputChordsChanged",
          "line": 236
        },
        {
          "caller": "webapp.js",
          "callee": "resetChordSelection",
          "line": 239
        },
        {
          "caller": "webapp.js",
          "callee": "resetChordSelection",
          "line": 243
        },
        {
          "caller": "webapp.js",
          "callee": "document.querySelectorAll",
          "line": 248
        },
        {
          "caller": "webapp.js",
          "callee": "forEach",
          "line": 248
        },
        {
          "caller": "webapp.js",
          "callee": "btn.classList.remove",
          "line": 249
        },
        {
          "caller": "webapp.js",
          "callee": "btn.classList.add",
          "line": 250
        },
        {
          "caller": "webapp.js",
          "callee": "setTimeout",
          "line": 254
        },
        {
          "caller": "webapp.js",
          "callee": "document.querySelectorAll",
          "line": 255
        },
        {
          "caller": "webapp.js",
          "callee": "forEach",
          "line": 255
        },
        {
          "caller": "webapp.js",
          "callee": "btn.classList.remove",
          "line": 256
        },
        {
          "caller": "webapp.js",
          "callee": "formatChordName",
          "line": 261
        },
        {
          "caller": "webapp.js",
          "callee": "switch ",
          "line": 262
        },
        {
          "caller": "webapp.js",
          "callee": "addChordFromButton",
          "line": 283
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 284
        },
        {
          "caller": "webapp.js",
          "callee": "appendChord",
          "line": 285
        },
        {
          "caller": "webapp.js",
          "callee": "onInputChordsChanged",
          "line": 286
        },
        {
          "caller": "webapp.js",
          "callee": "appendChord",
          "line": 290
        },
        {
          "caller": "webapp.js",
          "callee": "document.createElement",
          "line": 291
        },
        {
          "caller": "webapp.js",
          "callee": "newChord.setAttribute",
          "line": 292
        },
        {
          "caller": "webapp.js",
          "callee": "newChord.classList.add",
          "line": 293
        },
        {
          "caller": "webapp.js",
          "callee": "newChord.setAttribute",
          "line": 294
        },
        {
          "caller": "webapp.js",
          "callee": "newChord.setAttribute",
          "line": 295
        },
        {
          "caller": "webapp.js",
          "callee": "addDragListeners",
          "line": 296
        },
        {
          "caller": "webapp.js",
          "callee": "document.createElement",
          "line": 299
        },
        {
          "caller": "webapp.js",
          "callee": "content.setAttribute",
          "line": 300
        },
        {
          "caller": "webapp.js",
          "callee": "removeChord",
          "line": 301
        },
        {
          "caller": "webapp.js",
          "callee": "newChord.appendChild",
          "line": 302
        },
        {
          "caller": "webapp.js",
          "callee": "chordGroup.appendChild",
          "line": 304
        },
        {
          "caller": "webapp.js",
          "callee": "chordGroup.setAttribute",
          "line": 305
        },
        {
          "caller": "webapp.js",
          "callee": "onInputChordsChanged",
          "line": 306
        },
        {
          "caller": "webapp.js",
          "callee": "removeChord",
          "line": 309
        },
        {
          "caller": "webapp.js",
          "callee": "button.closest",
          "line": 310
        },
        {
          "caller": "webapp.js",
          "callee": "newChord.setAttribute",
          "line": 311
        },
        {
          "caller": "webapp.js",
          "callee": "newChord.addEventListener",
          "line": 313
        },
        {
          "caller": "webapp.js",
          "callee": "chordGroup.removeChild",
          "line": 314
        },
        {
          "caller": "webapp.js",
          "callee": "onInputChordsChanged",
          "line": 315
        },
        {
          "caller": "webapp.js",
          "callee": "getInputChords",
          "line": 319
        },
        {
          "caller": "webapp.js",
          "callee": "document.getElementById",
          "line": 322
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 323
        },
        {
          "caller": "webapp.js",
          "callee": "console.warn",
          "line": 324
        },
        {
          "caller": "webapp.js",
          "callee": "Array.from",
          "line": 327
        },
        {
          "caller": "webapp.js",
          "callee": "chordGroupElement.querySelectorAll",
          "line": 327
        },
        {
          "caller": "webapp.js",
          "callee": "map",
          "line": 327
        },
        {
          "caller": "webapp.js",
          "callee": "initializeDragAndDrop",
          "line": 334
        },
        {
          "caller": "webapp.js",
          "callee": "document.querySelectorAll",
          "line": 336
        },
        {
          "caller": "webapp.js",
          "callee": "draggables.forEach",
          "line": 337
        },
        {
          "caller": "webapp.js",
          "callee": "addDragListeners",
          "line": 340
        },
        {
          "caller": "webapp.js",
          "callee": "draggable.addEventListener",
          "line": 342
        },
        {
          "caller": "webapp.js",
          "callee": "draggable.addEventListener",
          "line": 343
        },
        {
          "caller": "webapp.js",
          "callee": "draggable.addEventListener",
          "line": 344
        },
        {
          "caller": "webapp.js",
          "callee": "draggable.addEventListener",
          "line": 345
        },
        {
          "caller": "webapp.js",
          "callee": "draggable.addEventListener",
          "line": 348
        },
        {
          "caller": "webapp.js",
          "callee": "draggable.addEventListener",
          "line": 349
        },
        {
          "caller": "webapp.js",
          "callee": "draggable.addEventListener",
          "line": 350
        },
        {
          "caller": "webapp.js",
          "callee": "handleDragStart",
          "line": 353
        },
        {
          "caller": "webapp.js",
          "callee": "console.log",
          "line": 355
        },
        {
          "caller": "webapp.js",
          "callee": "this.setAttribute",
          "line": 356
        },
        {
          "caller": "webapp.js",
          "callee": "setTimeout",
          "line": 357
        },
        {
          "caller": "webapp.js",
          "callee": "this.classList.add",
          "line": 357
        },
        {
          "caller": "webapp.js",
          "callee": "handleDragOver",
          "line": 360
        },
        {
          "caller": "webapp.js",
          "callee": "e.preventDefault",
          "line": 361
        },
        {
          "caller": "webapp.js",
          "callee": "getDragAfterElement",
          "line": 362
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 363
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 365
        },
        {
          "caller": "webapp.js",
          "callee": "chordGroup.appendChild",
          "line": 366
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 367
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 368
        },
        {
          "caller": "webapp.js",
          "callee": "chordGroup.insertBefore",
          "line": 369
        },
        {
          "caller": "webapp.js",
          "callee": "handleDrop",
          "line": 374
        },
        {
          "caller": "webapp.js",
          "callee": "this.classList.remove",
          "line": 375
        },
        {
          "caller": "webapp.js",
          "callee": "handleDragEnd",
          "line": 378
        },
        {
          "caller": "webapp.js",
          "callee": "this.setAttribute",
          "line": 379
        },
        {
          "caller": "webapp.js",
          "callee": "this.classList.remove",
          "line": 380
        },
        {
          "caller": "webapp.js",
          "callee": "onInputChordsChanged",
          "line": 382
        },
        {
          "caller": "webapp.js",
          "callee": "getDragAfterElement",
          "line": 387
        },
        {
          "caller": "webapp.js",
          "callee": "container.querySelectorAll",
          "line": 389
        },
        {
          "caller": "webapp.js",
          "callee": "not",
          "line": 389
        },
        {
          "caller": "webapp.js",
          "callee": "draggableElements.reduce",
          "line": 391
        },
        {
          "caller": "webapp.js",
          "callee": "child.getBoundingClientRect",
          "line": 393
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 395
        },
        {
          "caller": "webapp.js",
          "callee": "handleTouchStart",
          "line": 413
        },
        {
          "caller": "webapp.js",
          "callee": "e.preventDefault",
          "line": 415
        },
        {
          "caller": "webapp.js",
          "callee": "this.setAttribute",
          "line": 423
        },
        {
          "caller": "webapp.js",
          "callee": "console.log",
          "line": 424
        },
        {
          "caller": "webapp.js",
          "callee": "handleTouchMove",
          "line": 427
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 428
        },
        {
          "caller": "webapp.js",
          "callee": "e.preventDefault",
          "line": 430
        },
        {
          "caller": "webapp.js",
          "callee": "Math.abs",
          "line": 432
        },
        {
          "caller": "webapp.js",
          "callee": "Math.abs",
          "line": 433
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 436
        },
        {
          "caller": "webapp.js",
          "callee": "draggedChord.classList.add",
          "line": 438
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 441
        },
        {
          "caller": "webapp.js",
          "callee": "getDragAfterElement",
          "line": 443
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 445
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 447
        },
        {
          "caller": "webapp.js",
          "callee": "chordGroup.appendChild",
          "line": 448
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 449
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 450
        },
        {
          "caller": "webapp.js",
          "callee": "chordGroup.insertBefore",
          "line": 451
        },
        {
          "caller": "webapp.js",
          "callee": "handleTouchEnd",
          "line": 457
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 458
        },
        {
          "caller": "webapp.js",
          "callee": "this.setAttribute",
          "line": 460
        },
        {
          "caller": "webapp.js",
          "callee": "this.classList.remove",
          "line": 461
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 463
        },
        {
          "caller": "webapp.js",
          "callee": "onInputChordsChanged",
          "line": 464
        },
        {
          "caller": "webapp.js",
          "callee": "console.log",
          "line": 469
        },
        {
          "caller": "webapp.js",
          "callee": "calculateResultingChords",
          "line": 476
        },
        {
          "caller": "webapp.js",
          "callee": "console.log",
          "line": 486
        },
        {
          "caller": "webapp.js",
          "callee": "for ",
          "line": 488
        },
        {
          "caller": "webapp.js",
          "callee": "autoharpIntervals.push",
          "line": 491
        },
        {
          "caller": "webapp.js",
          "callee": "chords.indexOf",
          "line": 491
        },
        {
          "caller": "webapp.js",
          "callee": "match",
          "line": 491
        },
        {
          "caller": "webapp.js",
          "callee": "console.log",
          "line": 493
        },
        {
          "caller": "webapp.js",
          "callee": "for ",
          "line": 497
        },
        {
          "caller": "webapp.js",
          "callee": "parseChordString",
          "line": 498
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 499
        },
        {
          "caller": "webapp.js",
          "callee": "chords.indexOf",
          "line": 500
        },
        {
          "caller": "webapp.js",
          "callee": "parsedInputChords.push",
          "line": 501
        },
        {
          "caller": "webapp.js",
          "callee": "intervals.push",
          "line": 507
        },
        {
          "caller": "webapp.js",
          "callee": "console.log",
          "line": 508
        },
        {
          "caller": "webapp.js",
          "callee": "console.warn",
          "line": 510
        },
        {
          "caller": "webapp.js",
          "callee": "console.log",
          "line": 513
        },
        {
          "caller": "webapp.js",
          "callee": "console.log",
          "line": 514
        },
        {
          "caller": "webapp.js",
          "callee": "Map",
          "line": 516
        },
        {
          "caller": "webapp.js",
          "callee": "for ",
          "line": 517
        },
        {
          "caller": "webapp.js",
          "callee": "parseChordString",
          "line": 518
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 519
        },
        {
          "caller": "webapp.js",
          "callee": "chords.indexOf",
          "line": 520
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 522
        },
        {
          "caller": "webapp.js",
          "callee": "autoharpChordMap.has",
          "line": 522
        },
        {
          "caller": "webapp.js",
          "callee": "autoharpChordMap.set",
          "line": 523
        },
        {
          "caller": "webapp.js",
          "callee": "autoharpChordMap.get",
          "line": 525
        },
        {
          "caller": "webapp.js",
          "callee": "push",
          "line": 525
        },
        {
          "caller": "webapp.js",
          "callee": "console.log",
          "line": 529
        },
        {
          "caller": "webapp.js",
          "callee": "for ",
          "line": 535
        },
        {
          "caller": "webapp.js",
          "callee": "for ",
          "line": 540
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 544
        },
        {
          "caller": "webapp.js",
          "callee": "autoharpChordMap.has",
          "line": 544
        },
        {
          "caller": "webapp.js",
          "callee": "autoharpChordMap.get",
          "line": 546
        },
        {
          "caller": "webapp.js",
          "callee": "transposedChords.push",
          "line": 547
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 560
        },
        {
          "caller": "webapp.js",
          "callee": "matches.push",
          "line": 561
        },
        {
          "caller": "webapp.js",
          "callee": "console.log",
          "line": 566
        },
        {
          "caller": "webapp.js",
          "callee": "transposedChords.map",
          "line": 567
        },
        {
          "caller": "webapp.js",
          "callee": "join",
          "line": 567
        },
        {
          "caller": "webapp.js",
          "callee": "console.log",
          "line": 571
        },
        {
          "caller": "webapp.js",
          "callee": "onInputChordsChanged",
          "line": 579
        },
        {
          "caller": "webapp.js",
          "callee": "getInputChords",
          "line": 580
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 583
        },
        {
          "caller": "webapp.js",
          "callee": "document.createElement",
          "line": 585
        },
        {
          "caller": "webapp.js",
          "callee": "chordGroupResults.appendChild",
          "line": 587
        },
        {
          "caller": "webapp.js",
          "callee": "calculateResultingChords",
          "line": 592
        },
        {
          "caller": "webapp.js",
          "callee": "if ",
          "line": 595
        },
        {
          "caller": "webapp.js",
          "callee": "document.createElement",
          "line": 597
        },
        {
          "caller": "webapp.js",
          "callee": "chordGroupResults.appendChild",
          "line": 599
        },
        {
          "caller": "webapp.js",
          "callee": "resultingChords.forEach",
          "line": 603
        },
        {
          "caller": "webapp.js",
          "callee": "document.createElement",
          "line": 604
        },
        {
          "caller": "webapp.js",
          "callee": "Math.abs",
          "line": 611
        },
        {
          "caller": "webapp.js",
          "callee": "div.style.setProperty",
          "line": 612
        },
        {
          "caller": "webapp.js",
          "callee": "div.setAttribute",
          "line": 613
        },
        {
          "caller": "webapp.js",
          "callee": "transpositionResult.chords.forEach",
          "line": 616
        },
        {
          "caller": "webapp.js",
          "callee": "document.createElement",
          "line": 617
        },
        {
          "caller": "webapp.js",
          "callee": "chordDiv.setAttribute",
          "line": 619
        },
        {
          "caller": "webapp.js",
          "callee": "chordDiv.setAttribute",
          "line": 620
        },
        {
          "caller": "webapp.js",
          "callee": "div.appendChild",
          "line": 628
        },
        {
          "caller": "webapp.js",
          "callee": "chordGroupResults.appendChild",
          "line": 631
        },
        {
          "caller": "webapp.js",
          "callee": "document.addEventListener",
          "line": 640
        },
        {
          "caller": "webapp.js",
          "callee": "function ",
          "line": 640
        },
        {
          "caller": "webapp.js",
          "callee": "initializeDOMReferences",
          "line": 641
        },
        {
          "caller": "webapp.js",
          "callee": "initializeAutoharpTypeListeners",
          "line": 642
        },
        {
          "caller": "webapp.js",
          "callee": "initializeChordInputListener",
          "line": 643
        },
        {
          "caller": "webapp.js",
          "callee": "initializeDragAndDrop",
          "line": 644
        }
      ]
    }
  }
}