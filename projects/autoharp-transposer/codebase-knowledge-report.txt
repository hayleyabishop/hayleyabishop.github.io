CODEBASE KNOWLEDGE GRAPH REPORT
=====================================

SUMMARY STATISTICS:
   Files analyzed: 33
   Classes found: 16
   Functions found: 66
   Methods found: 315
   Event handlers: 44

CLASSES AND METHODS:

Class: CodebaseMapper (codebase-mapper.js:11)
   constructor (line 108)
   constructor() (line 12)
   for() (line 33)
   findJavaScriptFiles() (line 47)
   for() (line 51)
   if() (line 95)
   if() (line 114)
   if() (line 130)
   if() (line 144)
   if() (line 159)
   if() (line 173)
   if() (line 181)
   buildRelationships() (line 199)
   generateReport() (line 217)
   if() (line 235)
   if() (line 240)
   if() (line 251)
   if() (line 261)
   if() (line 272)
   writeReport() (line 284)
   exportKnowledgeGraph() (line 299)
   if() (line 334)

Class: RobustDuplicateDetector (detect-duplicates.js:11)
   constructor (line 12)
   constructor() (line 12)
   scanProject() (line 24)
   findJavaScriptFiles() (line 50)
   for() (line 56)
   scanFile() (line 75)
   if() (line 118)
   analyzeResults() (line 151)
   if() (line 156)
   if() (line 168)
   if() (line 178)
   findSimilarMethodNames() (line 191)
   for() (line 194)
   for() (line 195)
   areMethodNamesSimilar() (line 211)
   for() (line 228)
   if() (line 231)
   for() (line 236)
   if() (line 239)
   generateReport() (line 247)
   if() (line 265)
   if() (line 278)
   if() (line 291)
   if() (line 299)
   if() (line 306)
   if() (line 308)
   outputReport() (line 324)
   getResults() (line 344)
   if() (line 350)

Class: ImprovedCodebaseMapper (improved-codebase-mapper.js:11)
   constructor (line 12)
   constructor() (line 12)
   generateKnowledgeGraph() (line 32)
   findJavaScriptFiles() (line 60)
   for() (line 66)
   analyzeFile() (line 84)
   extractClasses() (line 104)
   if() (line 113)
   if() (line 126)
   extractFunctions() (line 146)
   if() (line 153)
   if() (line 168)
   buildMethodIndex() (line 183)
   if() (line 189)
   findDuplicates() (line 202)
   if() (line 204)
   updateMetadata() (line 213)
   saveResults() (line 222)
   generateSummary() (line 232)
   if() (line 243)
   if() (line 250)
   if() (line 265)

Class: AutoharpTransposerApp (modules\appIntegration.js:14)
   constructor (line 15)
   constructor() (line 15)
   if() (line 64)
   connectModules() (line 113)
   if() (line 125)
   if() (line 134)
   loadSavedState() (line 142)
   if() (line 155)
   if() (line 160)
   initializeUI() (line 170)
   if() (line 172)
   if() (line 181)
   updateAutoharpTypeUI() (line 193)
   if() (line 196)
   updateAudioToggleUI() (line 204)
   if() (line 207)
   updateSelectedChordsUI() (line 213)
   if() (line 215)
   if() (line 220)
   if() (line 226)
   setupAutoSave() (line 233)
   saveCurrentSession() (line 245)
   addChord() (line 267)
   removeChord() (line 276)
   clearAllChords() (line 284)
   getSelectedChords() (line 292)
   setAutoharpType() (line 296)
   toggleAudio() (line 300)
   getState() (line 304)
   on() (line 309)
   if() (line 310)
   if() (line 313)
   emit() (line 319)
   if() (line 320)
   exportData() (line 332)
   importData() (line 340)
   if() (line 341)
   if() (line 344)
   getDebugInfo() (line 349)
   destroy() (line 361)
   if() (line 367)
   if() (line 372)
   handleInitializationError() (line 382)
   if() (line 404)
   if() (line 418)

Class: AutoharpTypes (modules\autoharpTypes.js:11)
   constructor (line 12)
   constructor() (line 12)
   getAvailableTypes() (line 83)
   getType() (line 92)
   getAllChords() (line 101)
   getChordsByCategory() (line 118)
   getIntervals() (line 131)
   isChordAvailable() (line 144)
   getTypeInfo() (line 156)
   getCompatibilityMatrix() (line 172)
   for() (line 176)
   for() (line 178)
   findBestAutoharpType() (line 191)
   for() (line 201)
   for() (line 205)
   if() (line 215)

Class: ChordAudioManager (modules\chordAudio.js:6)
   constructor (line 7)
   constructor() (line 7)
   initializeAudioContext() (line 15)
   toggleSound() (line 27)
   if() (line 30)
   if() (line 36)
   playChord() (line 43)
   if() (line 44)
   if() (line 81)
   playProgression() (line 91)
   previewTransposition() (line 121)
   if() (line 122)
   playChordAtTime() (line 139)
   if() (line 168)
   stopAllSounds() (line 178)
   getChordFrequencies() (line 189)
   parseChordName() (line 212)
   getBaseChordFrequencies() (line 231)
   switch() (line 233)
   applyAutoharpCharacteristics() (line 253)
   switch() (line 257)
   if() (line 272)
   getOscillatorType() (line 283)
   switch() (line 287)
   destroy() (line 304)
   if() (line 306)

Class: ChordParser (modules\chordParser.js:10)
   constructor (line 11)
   constructor() (line 11)
   generateAllValidChords() (line 31)
   for() (line 62)
   for() (line 63)
   updateAvailableChords() (line 71)
   parseChord() (line 82)
   if() (line 92)
   if() (line 97)
   if() (line 106)
   if() (line 111)
   if() (line 116)
   if() (line 124)
   if() (line 130)
   if() (line 139)
   normalizeChordInput() (line 151)
   if() (line 243)
   if() (line 270)
   getFuzzyMatches() (line 286)
   if() (line 297)
   getSuggestions() (line 308)
   if() (line 309)
   getRootNotePermutations() (line 320)
   if() (line 323)
   extractRootNote() (line 338)
   if() (line 356)
   generateChordVariations() (line 363)
   filterAndPrioritizeVariations() (line 391)
   if() (line 400)
   validateChord() (line 426)
   calculateSimilarity() (line 433)
   levenshteinDistance() (line 444)
   for() (line 450)
   for() (line 453)
   for() (line 458)
   for() (line 459)
   soundexMatch() (line 475)
   normalizeChordName() (line 492)
   addToHistory() (line 512)
   if() (line 517)
   loadChordHistory() (line 531)
   saveChordHistory() (line 541)
   parseAdvancedChord() (line 550)
   for() (line 563)
   getContextualSuggestions() (line 572)
   if() (line 576)
   getHarmonicallyRelatedChords() (line 589)
   switch() (line 656)
   setAutoharpType() (line 685)
   getCurrentAutoharpType() (line 697)
   transposeProgression() (line 709)
   validateChordForAutoharp() (line 720)
   getCompatibleChords() (line 730)
   getAutoharpTypeInfo() (line 740)
   findBestAutoharpType() (line 750)
   findOptimalKeys() (line 760)
   getCompatibilityMatrix() (line 772)
   analyzeProgression() (line 781)
   parseChordWithAutoharpInfo() (line 791)
   if() (line 795)

Class: ChordTransposition (modules\chordTransposition.js:12)
   constructor (line 13)
   constructor() (line 13)
   transposeChord() (line 38)
   if() (line 53)
   calculateSemitoneInterval() (line 74)
   transposeProgression() (line 95)
   for() (line 111)
   if() (line 114)
   if() (line 127)
   if() (line 131)
   findAlternativeChords() (line 151)
   for() (line 162)
   if() (line 185)
   findOptimalKeys() (line 204)
   for() (line 208)
   if() (line 224)
   analyzeProgression() (line 236)
   if() (line 268)

Class: DataSchemas (modules\dataSchemas.js:6)
   constructor (line 7)
   constructor() (line 7)
   if() (line 154)
   if() (line 168)
   if() (line 190)
   if() (line 195)
   if() (line 203)
   if() (line 215)
   if() (line 216)
   if() (line 219)
   if() (line 225)
   if() (line 226)
   if() (line 229)
   if() (line 234)
   if() (line 242)
   if() (line 245)
   if() (line 253)
   if() (line 255)
   switch() (line 264)

Class: EventCoordinator (modules\eventCoordinator.js:6)
   constructor (line 7)
   constructor() (line 7)
   setupEventListeners() (line 20)
   if() (line 22)
   initializeEventListeners() (line 29)
   setupAutoharpTypeListeners() (line 49)
   if() (line 53)
   setupChordButtonListeners() (line 60)
   setupTextInputListeners() (line 81)
   if() (line 85)
   if() (line 89)
   if() (line 98)
   if() (line 121)
   setupAudioControlListeners() (line 130)
   if() (line 133)
   setupUtilityButtonListeners() (line 140)
   if() (line 143)
   if() (line 151)
   if() (line 159)
   setupKeyboardShortcuts() (line 166)
   if() (line 169)
   switch() (line 173)
   if() (line 175)
   setupStateListeners() (line 203)
   handleAutoharpTypeChange() (line 233)
   handleChordNameSelection() (line 238)
   handleChordTypeSelection() (line 248)
   handleAddChordClick() (line 258)
   if() (line 267)
   if() (line 277)
   handleRemoveChordClick() (line 289)
   if() (line 291)
   handlePlayAll() (line 300)
   if() (line 304)
   if() (line 312)
   handleTextInputFocus() (line 330)
   if() (line 332)
   handleSuggestionClick() (line 337)
   handleTextInput() (line 348)
   if() (line 371)
   if() (line 383)
   handleTextInputSubmit() (line 390)
   if() (line 399)
   if() (line 409)
   clearTextInput() (line 424)
   if() (line 427)
   showSuggestions() (line 439)
   if() (line 447)
   if() (line 470)
   clearSuggestions() (line 484)
   if() (line 486)
   highlightMatch() (line 498)
   if() (line 499)
   if() (line 509)
   handleSuggestionNavigation() (line 522)
   if() (line 529)
   handleSoundToggle() (line 540)
   handleClearAll() (line 546)
   updateUI() (line 552)
   updateSelectedChordsDisplay() (line 558)
   updateChordButtons() (line 574)
   updateAvailableChordButtons() (line 584)
   updateSuggestions() (line 594)
   if() (line 595)
   updateProgressions() (line 610)
   if() (line 614)
   if() (line 619)
   createChordElement() (line 630)
   if() (line 641)
   formatChordNameLegacy() (line 652)
   if() (line 654)
   focusTextInput() (line 663)
   if() (line 665)
   removeLastChord() (line 673)
   if() (line 675)
   showMessage() (line 681)
   if() (line 685)
   getDebugInfo() (line 703)
   selectChordNameLegacy() (line 722)
   if() (line 735)
   selectChordTypeLegacy() (line 750)
   if() (line 763)
   tryAddChordLegacy() (line 777)
   if() (line 778)
   if() (line 780)
   if() (line 783)
   resetChordSelectionLegacy() (line 794)
   initializeChordInputListenerLegacy() (line 808)

Class: InputManager (modules\inputManager.js:6)
   constructor (line 7)
   constructor() (line 7)
   on() (line 19)
   if() (line 20)
   emit() (line 25)
   if() (line 26)
   addChord() (line 38)
   if() (line 41)
   if() (line 48)
   if() (line 77)
   removeChord() (line 94)
   removeChordAt() (line 107)
   clearAll() (line 120)
   getSelectedChords() (line 131)
   hasChord() (line 135)
   getChordCount() (line 139)
   isValidChordFormat() (line 144)
   processTextInput() (line 158)
   if() (line 167)
   getSuggestions() (line 188)
   reorderChords() (line 193)
   updateAvailableChords() (line 213)
   if() (line 221)
   addChords() (line 242)
   replaceChords() (line 251)
   exportState() (line 257)
   importState() (line 264)
   validateAllSelected() (line 274)
   if() (line 279)
   getDebugInfo() (line 288)
   getInputChordsLegacy() (line 306)
   appendChordLegacy() (line 316)
   if() (line 332)
   removeChordLegacy() (line 342)
   if() (line 354)
   addChordFromButtonLegacy() (line 365)
   if() (line 366)
   if() (line 369)

Class: IntegrationBridge (modules\integrationBridge.js:6)
   constructor (line 7)
   constructor() (line 7)
   setupLegacyDataWatcher() (line 16)
   if() (line 18)
   if() (line 25)
   if() (line 34)
   onLegacyDataReady() (line 41)
   useFallbackChordData() (line 51)
   setModuleSystemReady() (line 71)
   checkReadiness() (line 76)
   if() (line 77)
   onReady() (line 82)
   if() (line 83)
   executePendingCallbacks() (line 90)
   getAvailableChordsForType() (line 101)
   if() (line 102)
   switch() (line 107)
   bridgeLegacyFunctions() (line 134)
   if() (line 138)
   if() (line 150)
   if() (line 163)
   if() (line 169)
   if() (line 176)
   getCurrentAutoharpType() (line 188)
   getCurrentSelectedChords() (line 194)
   if() (line 196)
   if() (line 201)
   syncLegacyToNewSystem() (line 218)
   if() (line 228)
   syncNewSystemToLegacy() (line 239)
   if() (line 246)

Class: StateManager (modules\stateManager.js:6)
   constructor (line 7)
   constructor() (line 7)
   initializeAvailableChords() (line 32)
   if() (line 35)
   subscribe() (line 48)
   if() (line 49)
   if() (line 57)
   emit() (line 63)
   if() (line 64)
   getState() (line 76)
   get() (line 80)
   setState() (line 85)
   if() (line 91)
   set() (line 109)
   updateAutoharpType() (line 114)
   updateSelectedChords() (line 127)
   addSelectedChord() (line 131)
   removeSelectedChord() (line 138)
   clearSelectedChords() (line 143)
   updateProgressions() (line 152)
   updateSuggestions() (line 156)
   toggleAudio() (line 160)
   setInputMode() (line 165)
   setAutoharpType() (line 175)
   if() (line 176)
   if() (line 183)
   updateProgression() (line 209)
   if() (line 210)
   if() (line 218)
   if() (line 222)
   if() (line 243)
   updateCurrentChord() (line 258)
   getAvailableChordsForType() (line 266)
   if() (line 268)
   switch() (line 275)
   isChordAvailable() (line 301)
   isChordSelected() (line 305)
   getSelectedChordCount() (line 309)
   saveToStorage() (line 314)
   loadFromStorage() (line 328)
   if() (line 331)
   clearStorage() (line 348)
   validateState() (line 357)
   if() (line 360)
   if() (line 377)
   reset() (line 388)
   getDebugInfo() (line 408)
   exportState() (line 421)
   importState() (line 429)
   if() (line 430)
   if() (line 435)

Class: StorageManager (modules\storageManager.js:6)
   constructor (line 7)
   constructor() (line 7)
   save() (line 13)
   load() (line 28)
   if() (line 36)
   remove() (line 48)
   exists() (line 58)
   savePreferences() (line 63)
   loadPreferences() (line 72)
   saveChordHistory() (line 84)
   loadChordHistory() (line 90)
   addToChordHistory() (line 94)
   if() (line 101)
   saveChordProgression() (line 111)
   loadChordProgressions() (line 124)
   deleteChordProgression() (line 128)
   updateProgressionLastUsed() (line 134)
   if() (line 136)
   saveSession() (line 144)
   loadSession() (line 152)
   if() (line 156)
   if() (line 158)
   clearSession() (line 167)
   saveUsageStats() (line 172)
   loadUsageStats() (line 182)
   incrementStat() (line 195)
   incrementChordUsage() (line 201)
   exportAllData() (line 209)
   if() (line 220)
   importAllData() (line 232)
   if() (line 233)
   if() (line 238)
   if() (line 251)
   clearAllData() (line 260)
   getStorageInfo() (line 277)
   for() (line 283)
   getStorageQuota() (line 308)
   for() (line 317)
   while() (line 321)
   cleanupOldData() (line 343)
   if() (line 352)
   if() (line 358)
   if() (line 364)
   saveProject() (line 378)
   if() (line 379)
   if() (line 387)
   if() (line 391)
   if() (line 411)
   loadProject() (line 429)
   if() (line 430)
   if() (line 437)
   if() (line 441)
   loadProjectIndex() (line 456)
   getAllProjects() (line 460)
   deleteProject() (line 467)
   if() (line 468)
   if() (line 482)
   saveProgressionToProject() (line 493)
   if() (line 495)
   if() (line 502)
   removeProgressionFromProject() (line 518)
   if() (line 520)
   migrateFromOldVersion() (line 530)

Class: VisualFeedbackManager (modules\visualFeedback.js:6)
   constructor (line 7)
   constructor() (line 7)
   initializeFeedbackElements() (line 13)
   ensureFeedbackContainer() (line 20)
   if() (line 22)
   ensureProgressIndicator() (line 37)
   if() (line 39)
   ensureChordHighlighter() (line 57)
   if() (line 60)
   showChordPlayback() (line 79)
   if() (line 82)
   if() (line 90)
   showProgressionPlayback() (line 97)
   if() (line 111)
   showTranspositionPreview() (line 126)
   highlightElement() (line 153)
   showTemporaryMessage() (line 179)
   if() (line 199)
   ensureFadeAnimation() (line 205)
   findChordElement() (line 222)
   for() (line 233)
   for() (line 244)
   showAudioLoading() (line 254)
   hideAudioLoading() (line 289)
   if() (line 291)
   destroy() (line 297)
   if() (line 306)

Class: AudioVisualFeedbackTester (tests\test-audio-visual-feedback.js:20)
   constructor (line 21)
   constructor() (line 21)
   for() (line 58)
   for() (line 81)
   for() (line 94)
   for() (line 202)
   if() (line 213)
   generateTestReport() (line 220)
   if() (line 233)
   if() (line 261)
   wait() (line 268)

STANDALONE FUNCTIONS:
   initializeApp() (modules\appIntegration.js:403)
   normalize() [arrow/assigned] (modules\chordParser.js:477)
   findJavaScriptFiles() (simple-duplicate-check.js:11)
   extractMethods() (simple-duplicate-check.js:28)
   checkForDuplicates() (simple-duplicate-check.js:77)
   testDuplicateChordAddition() (tests\test-duplicate-chord-addition.js:9)
   testDuplicateFixes() (tests\test-duplicate-fixes.js:9)
   runTestWhenAppReady() (tests\test-duplicate-fixes.js:207)
   testDuplicateChordInteraction() (tests\test-duplicate-interaction.js:9)
   getCurrentChordCount() (tests\test-duplicate-interaction.js:29)
   getCurrentChords() (tests\test-duplicate-interaction.js:35)
   testEventAuditIntegration() (tests\test-event-audit-integration.js:10)
   runTest2() (tests\test-event-audit-integration.js:86)
   runTest3() (tests\test-event-audit-integration.js:138)
   runTest4() (tests\test-event-audit-integration.js:184)
   runTest5() (tests\test-event-audit-integration.js:226)
   finishTests() (tests\test-event-audit-integration.js:265)
   testSpecificWorkflow() (tests\test-event-audit-integration.js:283)
   testChordInputWorkflow() (tests\test-event-audit-integration.js:301)
   runEventAuditTestWhenReady() (tests\test-event-audit-integration.js:335)
   testFuzzyChordMatching() (tests\test-fuzzy-matching.js:9)
   testNormalizationOnly() (tests\test-fuzzy-matching.js:90)
   testChordInput() (tests\test-fuzzy-matching.js:120)
   runFuzzyTestWhenReady() (tests\test-fuzzy-matching.js:145)
   addInputFlowDebugging() (tests\test-input-flow-debug.js:8)
   logTest() (tests\test-input-ui-specialist-fixes.js:21)
   waitForApp() (tests\test-input-ui-specialist-fixes.js:32)
   testNoDuplicateMethods() (tests\test-input-ui-specialist-fixes.js:43)
   testRealTimeValidation() (tests\test-input-ui-specialist-fixes.js:70)
   testSuggestionSystem() (tests\test-input-ui-specialist-fixes.js:101)
   testMethodExecution() (tests\test-input-ui-specialist-fixes.js:133)
   testChordAdditionWorkflow() (tests\test-input-ui-specialist-fixes.js:171)
   testIntegration() (tests\test-integration.js:6)
   runTestWhenReady() (tests\test-integration.js:104)
   testChordNormalizationFix() (tests\test-normalization-fix.js:9)
   testSpecificInput() (tests\test-normalization-fix.js:153)
   runNormalizationTestWhenReady() (tests\test-normalization-fix.js:192)
   runTranscriptionDebugTest() (tests\test-transcription-debug.js:9)
   runEndToEndTest() (tests\test-transcription-end-to-end.js:8)
   parseChordString() (webapp.js:37)
   initializeAutoharpTypeListeners() (webapp.js:81)
   onAutoharpTypeChanged() (webapp.js:88)
   renderAvailableChords() (webapp.js:120)
   initializeDOMReferences() (webapp.js:145)
   initializeChordInputListener() (webapp.js:155)
   selectChordName() (webapp.js:164)
   selectChordType() (webapp.js:198)
   tryAddChord() (webapp.js:232)
   resetChordSelection() (webapp.js:243)
   formatChordName() (webapp.js:261)
   addChordFromButton() (webapp.js:283)
   appendChord() (webapp.js:290)
   removeChord() (webapp.js:309)
   getInputChords() (webapp.js:339)
   initializeDragAndDrop() (webapp.js:354)
   addDragListeners() (webapp.js:360)
   handleDragStart() (webapp.js:385)
   handleDragOver() (webapp.js:396)
   handleDrop() (webapp.js:416)
   handleDragEnd() (webapp.js:423)
   getDragAfterElement() (webapp.js:433)
   handleTouchStart() (webapp.js:459)
   handleTouchMove() (webapp.js:473)
   handleTouchEnd() (webapp.js:503)
   calculateResultingChords() (webapp.js:522)
   onInputChordsChanged() (webapp.js:625)

EVENT HANDLERS:
   beforeunload -> ( (modules\appIntegration.js:240)
   DOMContentLoaded -> ( (modules\appIntegration.js:419)
   DOMContentLoaded -> ( (modules\eventCoordinator.js:23)
   change -> (e (modules\eventCoordinator.js:52)
   click -> (e (modules\eventCoordinator.js:62)
   input -> (e (modules\eventCoordinator.js:87)
   keydown -> (e (modules\eventCoordinator.js:97)
   focus -> ( (modules\eventCoordinator.js:110)
   blur -> ( (modules\eventCoordinator.js:114)
   click -> (e (modules\eventCoordinator.js:122)
   click -> ( (modules\eventCoordinator.js:134)
   click -> ( (modules\eventCoordinator.js:144)
   click -> ( (modules\eventCoordinator.js:152)
   click -> ( (modules\eventCoordinator.js:160)
   keydown -> (e (modules\eventCoordinator.js:167)
   click -> ( (modules\eventCoordinator.js:463)
   click -> (e (modules\eventCoordinator.js:642)
   animationend -> ( (modules\inputManager.js:351)
   load -> async ( (tests\test-audio-visual-feedback.js:274)
   DOMContentLoaded -> testDuplicateChordAddition (tests\test-duplicate-chord-addition.js:76)
   DOMContentLoaded -> ( (tests\test-duplicate-fixes.js:221)
   DOMContentLoaded -> ( (tests\test-event-audit-integration.js:351)
   DOMContentLoaded -> ( (tests\test-fuzzy-matching.js:161)
   input -> (e (tests\test-input-flow-debug.js:22)
   keydown -> (e (tests\test-input-flow-debug.js:26)
   keyup -> (e (tests\test-input-flow-debug.js:30)
   focus -> (e (tests\test-input-flow-debug.js:34)
   blur -> (e (tests\test-input-flow-debug.js:38)
   DOMContentLoaded -> ( (tests\test-input-flow-debug.js:132)
   DOMContentLoaded -> runAllTests (tests\test-input-ui-specialist-fixes.js:238)
   DOMContentLoaded -> ( (tests\test-integration.js:117)
   DOMContentLoaded -> ( (tests\test-normalization-fix.js:207)
   DOMContentLoaded -> ( (tests\test-transcription-debug.js:131)
   DOMContentLoaded -> ( (tests\test-transcription-end-to-end.js:143)
   change -> onAutoharpTypeChanged (webapp.js:84)
   animationend -> ( (webapp.js:323)
   dragstart -> handleDragStart (webapp.js:369)
   dragover -> handleDragOver (webapp.js:370)
   drop -> handleDrop (webapp.js:371)
   dragend -> handleDragEnd (webapp.js:372)
   touchstart -> handleTouchStart (webapp.js:375)
   touchmove -> handleTouchMove (webapp.js:376)
   touchend -> handleTouchEnd (webapp.js:377)
   DOMContentLoaded -> function ( (webapp.js:686)

MODULE DEPENDENCIES:
   codebase-mapper depends on:
      <- fs
      <- path
   detect-duplicates depends on:
      <- fs
      <- path
   improved-codebase-mapper depends on:
      <- fs
      <- path
   appIntegration depends on:
      <- ./chordAudio.js
      <- ./chordParser.js
      <- ./inputManager.js
      <- ./stateManager.js
      <- ./eventCoordinator.js
      <- ./storageManager.js
      <- ./integrationBridge.js
   chordParser depends on:
      <- ./autoharpTypes.js
      <- ./chordTransposition.js
   chordTransposition depends on:
      <- ./autoharpTypes.js
   simple-duplicate-check depends on:
      <- fs
      <- path
   test-state-data-specialist depends on:
      <- ../modules/stateManager.js
      <- ../modules/storageManager.js
      <- ../modules/dataSchemas.js